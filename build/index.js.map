{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap 00c588c3323bf6c85ded","webpack:///./src/lib/index.js","webpack:///./src/lib/components/Keyboard.js","webpack:///./src/lib/services/PhysicalKeyboard.js","webpack:///./src/lib/services/KeyboardLayout.js","webpack:///./src/lib/services/Utilities.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","value","__WEBPACK_IMPORTED_MODULE_0__components_Keyboard__","_classCallCheck","instance","Constructor","TypeError","__WEBPACK_IMPORTED_MODULE_0__Keyboard_css__","__WEBPACK_IMPORTED_MODULE_1__services_PhysicalKeyboard__","__WEBPACK_IMPORTED_MODULE_2__services_KeyboardLayout__","__WEBPACK_IMPORTED_MODULE_3__services_Utilities__","_typeof","Symbol","iterator","obj","constructor","_createClass","defineProperties","target","props","length","descriptor","writable","key","protoProps","staticProps","SimpleKeyboard","_this","setOptions","option","options","assign","render","registerModule","initCallback","getModuleProp","prop","getModulesList","keys","keyboardDOMQuery","arguments","undefined","utilities","keyboardDOM","document","querySelector","layoutName","theme","inputName","handleButtonClicked","bind","syncInstanceInputs","clearInput","getInput","setInput","replaceInput","clear","dispatch","addButtonTheme","removeButtonTheme","getButtonElement","handleCaret","caretEventHandler","onInit","onRender","input","keyboardDOMClass","split","join","buttonElements","console","warn","Error","window","camelCase","physicalKeyboardInterface","button","debug","onKeyPress","updatedInput","getUpdatedInput","caretPosition","maxLength","handleMaxLength","log","onChange","_this2","inputObj","innerHTML","className","callback","forEach","buttons","_this3","classNameItem","buttonTheme","classNameFound","map","class","includes","buttonThemeArray","push","_this4","Array","isArray","index","filteredButtonArray","filter","item","splice","output","buttonArr","addEventListener","event","targetTagName","tagName","toLowerCase","selectionStart","_this5","layoutClass","layout","getDefaultLayout","buttonThemesParsed","themeObj","themeButtons","themeButton","themeParsed","countInArray","row","rIndex","rowArray","rowDOM","createElement","bIndex","fctBtnClass","getButtonClass","buttonThemeClass","buttonDisplayName","getButtonDisplayName","display","mergeDisplay","buttonDOM","onclick","setAttribute","buttonUID","buttonSpanDOM","appendChild","initialized","PhysicalKeyboard","simpleKeyboardInstance","initKeyboardListener","getSimpleKeyboardLayoutKey","physicalKeyboardHighlight","buttonPressed","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","code","toUpperCase","Number","isInteger","KeyboardLayout","default","shift","Utilities","updateCaretPos","isMaxLengthReached","buttonTypeClass","buttonWithoutBraces","replace","buttonNormalized","{bksp}","{backspace}","{enter}","{shift}","{shiftleft}","{shiftright}","{alt}","{s}","{tab}","{lock}","{capslock}","{accept}","{space}","{//}","{esc}","{escape}","{f1}","{f2}","{f3}","{f4}","{f5}","{f6}","{f7}","{f8}","{f9}","{f10}","{f11}","{f12}","{numpaddivide}","{numlock}","{arrowup}","{arrowleft}","{arrowdown}","{arrowright}","{prtscr}","{scrolllock}","{pause}","{insert}","{home}","{pageup}","{delete}","{end}","{pagedown}","{numpadmultiply}","{numpadsubtract}","{numpadadd}","{numpadenter}","{period}","{numpaddecimal}","{numpad0}","{numpad1}","{numpad2}","{numpad3}","{numpad4}","{numpad5}","{numpad6}","{numpad7}","{numpad8}","{numpad9}","getDefaultDiplay","caretPos","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","minus","source","string","position","slice","prevTwoChars","emojiMatched","emojiMatchedReg","substring","match","substr","currentInput","condition","maxLengthReached","Boolean","trim","reduce","word","array","x"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Keyboard__ = __webpack_require__(2);\n/* harmony default export */ __webpack_exports__[\"default\"] = (__WEBPACK_IMPORTED_MODULE_0__components_Keyboard__[\"a\" /* default */]);\n\n/***/ }),\n/* 2 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Keyboard_css__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Keyboard_css___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0__Keyboard_css__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__services_PhysicalKeyboard__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__services_KeyboardLayout__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__services_Utilities__ = __webpack_require__(6);\nvar _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}// Services\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */var SimpleKeyboard=function(){/**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */function SimpleKeyboard(){var _this=this;_classCallCheck(this,SimpleKeyboard);this.setOptions=function(option){option=option||{};_this.options=Object.assign(_this.options,option);_this.render();};this.registerModule=function(name,initCallback){_this.modules[name]={};initCallback(_this.modules[name]);};this.getModuleProp=function(name,prop){if(!_this.modules[name])return false;return _this.modules[name][prop];};this.getModulesList=function(){return Object.keys(_this.modules);};var keyboardDOMQuery=typeof(arguments.length<=0?undefined:arguments[0])===\"string\"?arguments.length<=0?undefined:arguments[0]:'.simple-keyboard';var options=_typeof(arguments.length<=0?undefined:arguments[0])===\"object\"?arguments.length<=0?undefined:arguments[0]:arguments.length<=1?undefined:arguments[1];if(!options)options={};/**\r\n     * Initializing Utilities\r\n     */this.utilities=new __WEBPACK_IMPORTED_MODULE_3__services_Utilities__[\"a\" /* default */](this);/**\r\n     * Processing options\r\n     */this.keyboardDOM=document.querySelector(keyboardDOMQuery);/**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have. \r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     */this.options=options;this.options.layoutName=this.options.layoutName||\"default\";this.options.theme=this.options.theme||\"hg-theme-default\";this.options.inputName=this.options.inputName||\"default\";/**\r\n     * Module namespace\r\n     */this.modules={};/**\r\n     * Bindings\r\n     */this.handleButtonClicked=this.handleButtonClicked.bind(this);this.syncInstanceInputs=this.syncInstanceInputs.bind(this);this.clearInput=this.clearInput.bind(this);this.getInput=this.getInput.bind(this);this.setInput=this.setInput.bind(this);this.replaceInput=this.replaceInput.bind(this);this.clear=this.clear.bind(this);this.dispatch=this.dispatch.bind(this);this.addButtonTheme=this.addButtonTheme.bind(this);this.removeButtonTheme=this.removeButtonTheme.bind(this);this.getButtonElement=this.getButtonElement.bind(this);this.handleCaret=this.handleCaret.bind(this);this.caretEventHandler=this.caretEventHandler.bind(this);this.onInit=this.onInit.bind(this);this.onRender=this.onRender.bind(this);this.render=this.render.bind(this);/**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * let input = keyboard.getInput();\r\n     * \r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     * \r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */this.input={};this.input[this.options.inputName]='';/**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */this.keyboardDOMClass=keyboardDOMQuery.split('.').join(\"\");/**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */this.buttonElements={};/**\r\n     * Rendering keyboard\r\n     */if(this.keyboardDOM)this.render();else{console.warn('\"'+keyboardDOMQuery+'\" was not found in the DOM.');throw new Error(\"KEYBOARD_DOM_ERROR\");}/**\r\n     * Saving instance\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */if(!window['SimpleKeyboardInstances'])window['SimpleKeyboardInstances']={};window['SimpleKeyboardInstances'][this.utilities.camelCase(this.keyboardDOMClass)]=this;/**\r\n     * Physical Keyboard support\r\n     */this.physicalKeyboardInterface=new __WEBPACK_IMPORTED_MODULE_1__services_PhysicalKeyboard__[\"a\" /* default */](this);}/**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */_createClass(SimpleKeyboard,[{key:'handleButtonClicked',value:function handleButtonClicked(button){var debug=this.options.debug;/**\r\n     * Ignoring placeholder buttons\r\n     */if(button==='{//}')return false;/**\r\n     * Calling onKeyPress\r\n     */if(typeof this.options.onKeyPress===\"function\")this.options.onKeyPress(button);if(!this.input[this.options.inputName])this.input[this.options.inputName]='';var updatedInput=this.utilities.getUpdatedInput(button,this.input[this.options.inputName],this.options,this.caretPosition);if(this.input[this.options.inputName]!==updatedInput){/**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */if(this.options.maxLength&&this.utilities.handleMaxLength(this.input,this.options,updatedInput)){return false;}this.input[this.options.inputName]=updatedInput;if(debug)console.log('Input changed:',this.input);/**\r\n       * Enforce syncInstanceInputs, if set\r\n       */if(this.options.syncInstanceInputs)this.syncInstanceInputs(this.input);/**\r\n       * Calling onChange\r\n       */if(typeof this.options.onChange===\"function\")this.options.onChange(this.input[this.options.inputName]);}if(debug){console.log(\"Key pressed:\",button);}}/**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */},{key:'syncInstanceInputs',value:function syncInstanceInputs(){var _this2=this;this.dispatch(function(instance){instance.replaceInput(_this2.input);});}/**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */},{key:'clearInput',value:function clearInput(inputName){inputName=inputName||this.options.inputName;this.input[this.options.inputName]='';/**\r\n     * Enforce syncInstanceInputs, if set\r\n     */if(this.options.syncInstanceInputs)this.syncInstanceInputs(this.input);}/**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */},{key:'getInput',value:function getInput(inputName){inputName=inputName||this.options.inputName;/**\r\n     * Enforce syncInstanceInputs, if set\r\n     */if(this.options.syncInstanceInputs)this.syncInstanceInputs(this.input);return this.input[this.options.inputName];}/**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */},{key:'setInput',value:function setInput(input,inputName){inputName=inputName||this.options.inputName;this.input[inputName]=input;/**\r\n     * Enforce syncInstanceInputs, if set\r\n     */if(this.options.syncInstanceInputs)this.syncInstanceInputs(this.input);}/**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */},{key:'replaceInput',value:function replaceInput(inputObj){this.input=inputObj;}/**\r\n   * Set new option or modify existing ones after initialization. \r\n   * @param  {object} option The option to set\r\n   */},{key:'clear',/**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used interally between re-renders.\r\n   */value:function clear(){this.keyboardDOM.innerHTML='';this.keyboardDOM.className=this.keyboardDOMClass;this.buttonElements={};}/**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */},{key:'dispatch',value:function dispatch(callback){if(!window['SimpleKeyboardInstances']){console.warn('SimpleKeyboardInstances is not defined. Dispatch cannot be called.');throw new Error(\"INSTANCES_VAR_ERROR\");}return Object.keys(window['SimpleKeyboardInstances']).forEach(function(key){callback(window['SimpleKeyboardInstances'][key],key);});}/**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */},{key:'addButtonTheme',value:function addButtonTheme(buttons,className){var _this3=this;if(!className||!buttons)return false;buttons.split(\" \").forEach(function(button){className.split(\" \").forEach(function(classNameItem){if(!_this3.options.buttonTheme)_this3.options.buttonTheme=[];var classNameFound=false;/**\r\n         * If class is already defined, we add button to class definition\r\n         */_this3.options.buttonTheme.map(function(buttonTheme){if(buttonTheme.class.split(\" \").includes(classNameItem)){classNameFound=true;var buttonThemeArray=buttonTheme.buttons.split(\" \");if(!buttonThemeArray.includes(button)){classNameFound=true;buttonThemeArray.push(button);buttonTheme.buttons=buttonThemeArray.join(\" \");}}return buttonTheme;});/**\r\n         * If class is not defined, we create a new entry\r\n         */if(!classNameFound){_this3.options.buttonTheme.push({class:classNameItem,buttons:buttons});}});});this.render();}/**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */},{key:'removeButtonTheme',value:function removeButtonTheme(buttons,className){var _this4=this;/**\r\n     * When called with empty parameters, remove all button themes\r\n     */if(!buttons&&!className){this.options.buttonTheme=[];this.render();return false;}/**\r\n     * If buttons are passed and buttonTheme has items\r\n     */if(buttons&&Array.isArray(this.options.buttonTheme)&&this.options.buttonTheme.length){var buttonArray=buttons.split(\" \");buttonArray.forEach(function(button,key){_this4.options.buttonTheme.map(function(buttonTheme,index){/**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */if(className&&className.includes(buttonTheme.class)||!className){var filteredButtonArray=buttonTheme.buttons.split(\" \").filter(function(item){return item!==button;});/**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */if(filteredButtonArray.length){buttonTheme.buttons=filteredButtonArray.join(\" \");}else{_this4.options.buttonTheme.splice(index,1);buttonTheme=null;}}return buttonTheme;});});this.render();}}/**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */},{key:'getButtonElement',value:function getButtonElement(button){var output=void 0;var buttonArr=this.buttonElements[button];if(buttonArr){if(buttonArr.length>1){output=buttonArr;}else{output=buttonArr[0];}}return output;}/**\r\n   * Retrieves the current cursor position within a input or textarea (if any)\r\n   */},{key:'handleCaret',value:function handleCaret(){if(this.options.debug){console.log(\"Caret handling started\");}document.addEventListener(\"keyup\",this.caretEventHandler);document.addEventListener(\"mouseup\",this.caretEventHandler);document.addEventListener(\"touchend\",this.caretEventHandler);}/**\r\n   * Called by {@link handleCaret} when an event that warrants a cursor position update is triggered\r\n   */},{key:'caretEventHandler',value:function caretEventHandler(event){var targetTagName=event.target.tagName.toLowerCase();if(targetTagName===\"textarea\"||targetTagName===\"input\"){/**\r\n       * Tracks current cursor position\r\n       * As keys are pressed, text will be added/removed at that position within the input.\r\n       */this.caretPosition=event.target.selectionStart;if(this.options.debug){console.log('Caret at: ',event.target.selectionStart,event.target.tagName.toLowerCase());}}}/**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */},{key:'onInit',value:function onInit(){if(this.options.debug){console.log(\"Initialized\");}/**\r\n     * Caret handling\r\n     */this.handleCaret();if(typeof this.options.onInit===\"function\")this.options.onInit();}/**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */},{key:'onRender',value:function onRender(){if(typeof this.options.onRender===\"function\")this.options.onRender();}/**\r\n   * Register module\r\n   *//**\r\n   * Get module prop\r\n   *//**\r\n   * getModulesList\r\n   */},{key:'render',/**\r\n   * Renders rows and buttons as per options\r\n   */value:function render(){var _this5=this;/**\r\n     * Clear keyboard\r\n     */this.clear();var layoutClass=this.options.layout?\"hg-layout-custom\":'hg-layout-'+this.options.layoutName;var layout=this.options.layout||__WEBPACK_IMPORTED_MODULE_2__services_KeyboardLayout__[\"a\" /* default */].getDefaultLayout();/**\r\n     * Account for buttonTheme, if set\r\n     */var buttonThemesParsed={};if(Array.isArray(this.options.buttonTheme)){this.options.buttonTheme.forEach(function(themeObj){if(themeObj.buttons&&themeObj.class){var themeButtons=void 0;if(typeof themeObj.buttons===\"string\"){themeButtons=themeObj.buttons.split(' ');}if(themeButtons){themeButtons.forEach(function(themeButton){var themeParsed=buttonThemesParsed[themeButton];// If the button has already been added\nif(themeParsed){// Making sure we don't add duplicate classes, even when buttonTheme has duplicates\nif(!_this5.utilities.countInArray(themeParsed.split(\" \"),themeObj.class)){buttonThemesParsed[themeButton]=themeParsed+' '+themeObj.class;}}else{buttonThemesParsed[themeButton]=themeObj.class;}});}}else{console.warn('buttonTheme row is missing the \"buttons\" or the \"class\". Please check the documentation.');}});}/**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */this.keyboardDOM.className+=' '+this.options.theme+' '+layoutClass;/**\r\n     * Iterating through each row\r\n     */layout[this.options.layoutName].forEach(function(row,rIndex){var rowArray=row.split(' ');/**\r\n       * Creating empty row\r\n       */var rowDOM=document.createElement('div');rowDOM.className+=\"hg-row\";/**\r\n       * Iterating through each button in row\r\n       */rowArray.forEach(function(button,bIndex){var fctBtnClass=_this5.utilities.getButtonClass(button);var buttonThemeClass=buttonThemesParsed[button];var buttonDisplayName=_this5.utilities.getButtonDisplayName(button,_this5.options.display,_this5.options.mergeDisplay);/**\r\n         * Creating button\r\n         */var buttonDOM=document.createElement('div');buttonDOM.className+='hg-button '+fctBtnClass+(buttonThemeClass?\" \"+buttonThemeClass:\"\");buttonDOM.onclick=function(){return _this5.handleButtonClicked(button);};/**\r\n         * Adding identifier\r\n         */buttonDOM.setAttribute(\"data-skBtn\",button);/**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */var buttonUID=_this5.options.layoutName+'-r'+rIndex+'b'+bIndex;buttonDOM.setAttribute(\"data-skBtnUID\",buttonUID);/**\r\n         * Adding display label\r\n         */buttonDOM.setAttribute(\"data-displayLabel\",buttonDisplayName);/**\r\n         * Adding button label to button\r\n         */var buttonSpanDOM=document.createElement('span');buttonSpanDOM.innerHTML=buttonDisplayName;buttonDOM.appendChild(buttonSpanDOM);/**\r\n         * Adding to buttonElements\r\n         */if(!_this5.buttonElements[button])_this5.buttonElements[button]=[];_this5.buttonElements[button].push(buttonDOM);/**\r\n         * Appending button to row\r\n         */rowDOM.appendChild(buttonDOM);});/**\r\n       * Appending row to keyboard\r\n       */_this5.keyboardDOM.appendChild(rowDOM);});/**\r\n     * Calling onRender\r\n     */this.onRender();if(!this.initialized){/**\r\n       * Ensures that onInit is only called once per instantiation\r\n       */this.initialized=true;/**\r\n       * Calling onInit\r\n       */this.onInit();}}}]);return SimpleKeyboard;}();/* harmony default export */ __webpack_exports__[\"a\"] = (SimpleKeyboard);\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports) {\n\n// removed by extract-text-webpack-plugin\n\n/***/ }),\n/* 4 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}/**\r\n * Physical Keyboard Service\r\n */var PhysicalKeyboard=function(){/**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */function PhysicalKeyboard(simpleKeyboardInstance){_classCallCheck(this,PhysicalKeyboard);/**\r\n     * @type {object} A simple-keyboard instance\r\n     */this.simpleKeyboardInstance=simpleKeyboardInstance;/**\r\n     * Bindings\r\n     */this.initKeyboardListener=this.initKeyboardListener.bind(this);this.getSimpleKeyboardLayoutKey=this.getSimpleKeyboardLayoutKey.bind(this);/**\r\n     * Initialize key listeners\r\n     */this.initKeyboardListener();}/**\r\n   * Initializes key event listeners\r\n   */_createClass(PhysicalKeyboard,[{key:\"initKeyboardListener\",value:function initKeyboardListener(){var _this=this;// Adding button style on keydown\ndocument.addEventListener(\"keydown\",function(event){if(_this.simpleKeyboardInstance.options.physicalKeyboardHighlight){var buttonPressed=_this.getSimpleKeyboardLayoutKey(event);_this.simpleKeyboardInstance.dispatch(function(instance){var buttonDOM=instance.getButtonElement(buttonPressed)||instance.getButtonElement(\"{\"+buttonPressed+\"}\");if(buttonDOM){buttonDOM.style.backgroundColor=_this.simpleKeyboardInstance.options.physicalKeyboardHighlightBgColor||\"#9ab4d0\";buttonDOM.style.color=_this.simpleKeyboardInstance.options.physicalKeyboardHighlightTextColor||\"white\";}});}});// Removing button style on keyup\ndocument.addEventListener(\"keyup\",function(event){if(_this.simpleKeyboardInstance.options.physicalKeyboardHighlight){var buttonPressed=_this.getSimpleKeyboardLayoutKey(event);_this.simpleKeyboardInstance.dispatch(function(instance){var buttonDOM=instance.getButtonElement(buttonPressed)||instance.getButtonElement(\"{\"+buttonPressed+\"}\");if(buttonDOM){buttonDOM.removeAttribute(\"style\");}});}});}/**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */},{key:\"getSimpleKeyboardLayoutKey\",value:function getSimpleKeyboardLayoutKey(event){var output=void 0;if(event.code.includes(\"Numpad\")||event.code.includes(\"Shift\")||event.code.includes(\"Space\")||event.code.includes(\"Backspace\")||event.code.includes(\"Control\")||event.code.includes(\"Alt\")||event.code.includes(\"Meta\")){output=event.code;}else{output=event.key;}/**\r\n     * If button is not uppercase, casting to lowercase\r\n     */if(output!==output.toUpperCase()||event.code[0]===\"F\"&&Number.isInteger(Number(event.code[1]))&&event.code.length<=3){output=output.toLowerCase();}return output;}}]);return PhysicalKeyboard;}();/* harmony default export */ __webpack_exports__[\"a\"] = (PhysicalKeyboard);\n\n/***/ }),\n/* 5 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}/**\r\n * Keyboard Layout Service\r\n */var KeyboardLayout=function(){function KeyboardLayout(){_classCallCheck(this,KeyboardLayout);}_createClass(KeyboardLayout,null,[{key:'getDefaultLayout',/**\r\n   * Get default simple-keyboard layout\r\n   * @return {object} The default layout (US-QWERTY)\r\n   */value:function getDefaultLayout(){return{'default':['` 1 2 3 4 5 6 7 8 9 0 - = {bksp}','{tab} q w e r t y u i o p [ ] \\\\','{lock} a s d f g h j k l ; \\' {enter}','{shift} z x c v b n m , . / {shift}','.com @ {space}'],'shift':['~ ! @ # $ % ^ & * ( ) _ + {bksp}','{tab} Q W E R T Y U I O P { } |','{lock} A S D F G H J K L : \" {enter}','{shift} Z X C V B N M < > ? {shift}','.com @ {space}']};}}]);return KeyboardLayout;}();/* harmony default export */ __webpack_exports__[\"a\"] = (KeyboardLayout);\n\n/***/ }),\n/* 6 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nvar _typeof=typeof Symbol===\"function\"&&typeof Symbol.iterator===\"symbol\"?function(obj){return typeof obj;}:function(obj){return obj&&typeof Symbol===\"function\"&&obj.constructor===Symbol&&obj!==Symbol.prototype?\"symbol\":typeof obj;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}/**\r\n * Utility Service\r\n */var Utilities=function(){/**\r\n   * Creates an instance of the Utility service\r\n   */function Utilities(simpleKeyboardInstance){_classCallCheck(this,Utilities);/**\r\n     * @type {object} A simple-keyboard instance\r\n     */this.simpleKeyboardInstance=simpleKeyboardInstance;/**\r\n     * Bindings\r\n     */this.getButtonClass=this.getButtonClass.bind(this);this.getButtonDisplayName=this.getButtonDisplayName.bind(this);this.getUpdatedInput=this.getUpdatedInput.bind(this);this.updateCaretPos=this.updateCaretPos.bind(this);this.isMaxLengthReached=this.isMaxLengthReached.bind(this);this.camelCase=this.camelCase.bind(this);this.countInArray=this.countInArray.bind(this);}/**\r\n   * Adds default classes to a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */_createClass(Utilities,[{key:\"getButtonClass\",value:function getButtonClass(button){var buttonTypeClass=button.includes(\"{\")&&button.includes(\"}\")&&button!=='{//}'?\"functionBtn\":\"standardBtn\";var buttonWithoutBraces=button.replace(\"{\",\"\").replace(\"}\",\"\");var buttonNormalized='';if(buttonTypeClass!==\"standardBtn\")buttonNormalized=\" hg-button-\"+buttonWithoutBraces;return\"hg-\"+buttonTypeClass+buttonNormalized;}/**\r\n   * Default button display labels\r\n   */},{key:\"getDefaultDiplay\",value:function getDefaultDiplay(){return{'{bksp}':'backspace','{backspace}':'backspace','{enter}':'< enter','{shift}':'shift','{shiftleft}':'shift','{shiftright}':'shift','{alt}':'alt','{s}':'shift','{tab}':'tab','{lock}':'caps','{capslock}':'caps','{accept}':'Submit','{space}':' ','{//}':' ',\"{esc}\":\"esc\",\"{escape}\":\"esc\",\"{f1}\":\"f1\",\"{f2}\":\"f2\",\"{f3}\":\"f3\",\"{f4}\":\"f4\",\"{f5}\":\"f5\",\"{f6}\":\"f6\",\"{f7}\":\"f7\",\"{f8}\":\"f8\",\"{f9}\":\"f9\",\"{f10}\":\"f10\",\"{f11}\":\"f11\",\"{f12}\":\"f12\",'{numpaddivide}':'/','{numlock}':'lock',\"{arrowup}\":\"↑\",\"{arrowleft}\":\"←\",\"{arrowdown}\":\"↓\",\"{arrowright}\":\"→\",\"{prtscr}\":\"print\",\"{scrolllock}\":\"scroll\",\"{pause}\":\"pause\",\"{insert}\":\"ins\",\"{home}\":\"home\",\"{pageup}\":\"up\",\"{delete}\":\"del\",\"{end}\":\"end\",\"{pagedown}\":\"down\",\"{numpadmultiply}\":\"*\",\"{numpadsubtract}\":\"-\",\"{numpadadd}\":\"+\",\"{numpadenter}\":\"enter\",\"{period}\":\".\",\"{numpaddecimal}\":\".\",\"{numpad0}\":\"0\",\"{numpad1}\":\"1\",\"{numpad2}\":\"2\",\"{numpad3}\":\"3\",\"{numpad4}\":\"4\",\"{numpad5}\":\"5\",\"{numpad6}\":\"6\",\"{numpad7}\":\"7\",\"{numpad8}\":\"8\",\"{numpad9}\":\"9\"};}/**\r\n   * Returns the display (label) name for a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */},{key:\"getButtonDisplayName\",value:function getButtonDisplayName(button,display,mergeDisplay){if(mergeDisplay){display=Object.assign({},this.getDefaultDiplay(),display);}else{display=display||this.getDefaultDiplay();}return display[button]||button;}/**\r\n   * Returns the updated input resulting from clicking a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {object} options The simple-keyboard options object\r\n   * @param  {number} caretPos The cursor's current position\r\n   */},{key:\"getUpdatedInput\",value:function getUpdatedInput(button,input,options,caretPos){var output=input;if((button===\"{bksp}\"||button===\"{backspace}\")&&output.length>0){output=this.removeAt(output,caretPos);}else if(button===\"{space}\")output=this.addStringAt(output,\" \",caretPos);else if(button===\"{tab}\"&&!(typeof options.tabCharOnTab===\"boolean\"&&options.tabCharOnTab===false)){output=this.addStringAt(output,\"\\t\",caretPos);}else if((button===\"{enter}\"||button===\"{numpadenter}\")&&options.newLineOnEnter)output=this.addStringAt(output,\"\\n\",caretPos);else if(button.includes(\"numpad\")&&Number.isInteger(Number(button[button.length-2]))){output=this.addStringAt(output,button[button.length-2],caretPos);}else if(button===\"{numpaddivide}\")output=this.addStringAt(output,'/',caretPos);else if(button===\"{numpadmultiply}\")output=this.addStringAt(output,'*',caretPos);else if(button===\"{numpadsubtract}\")output=this.addStringAt(output,'-',caretPos);else if(button===\"{numpadadd}\")output=this.addStringAt(output,'+',caretPos);else if(button===\"{numpaddecimal}\")output=this.addStringAt(output,'.',caretPos);else if(button===\"{\"||button===\"}\")output=this.addStringAt(output,button,caretPos);else if(!button.includes(\"{\")&&!button.includes(\"}\"))output=this.addStringAt(output,button,caretPos);return output;}/**\r\n   * Moves the cursor position by a given amount\r\n   * \r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */},{key:\"updateCaretPos\",value:function updateCaretPos(length,minus){if(minus){if(this.simpleKeyboardInstance.caretPosition>0)this.simpleKeyboardInstance.caretPosition=this.simpleKeyboardInstance.caretPosition-length;}else{this.simpleKeyboardInstance.caretPosition=this.simpleKeyboardInstance.caretPosition+length;}}/**\r\n   * Adds a string to the input at a given position\r\n   * \r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   */},{key:\"addStringAt\",value:function addStringAt(source,string,position){var output=void 0;if(this.simpleKeyboardInstance.options.debug){console.log(\"Caret at:\",position);}if(!position&&position!==0){output=source+string;}else{output=[source.slice(0,position),string,source.slice(position)].join('');/**\r\n       * Avoid caret position change when maxLength is set\r\n       */if(!this.isMaxLengthReached()){this.updateCaretPos(string.length);}}return output;}/**\r\n   * Removes an amount of characters at a given position\r\n   * \r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */},{key:\"removeAt\",value:function removeAt(source,position){if(this.simpleKeyboardInstance.caretPosition===0){return source;}var output=void 0;var prevTwoChars=void 0;var emojiMatched=void 0;var emojiMatchedReg=/([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;/**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */if(position&&position>=0){prevTwoChars=source.substring(position-2,position);emojiMatched=prevTwoChars.match(emojiMatchedReg);if(emojiMatched){output=source.substr(0,position-2)+source.substr(position);this.updateCaretPos(2,true);}else{output=source.substr(0,position-1)+source.substr(position);this.updateCaretPos(1,true);}}else{prevTwoChars=source.slice(-2);emojiMatched=prevTwoChars.match(emojiMatchedReg);if(emojiMatched){output=source.slice(0,-2);this.updateCaretPos(2,true);}else{output=source.slice(0,-1);this.updateCaretPos(1,true);}}return output;}/**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   * \r\n   * @param  {object} inputObj\r\n   * @param  {object} options\r\n   * @param  {string} updatedInput\r\n   */},{key:\"handleMaxLength\",value:function handleMaxLength(inputObj,options,updatedInput){var maxLength=options.maxLength;var currentInput=inputObj[options.inputName];var condition=currentInput.length===maxLength;if(/**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */updatedInput.length<=currentInput.length){return false;}if(Number.isInteger(maxLength)){if(options.debug){console.log(\"maxLength (num) reached:\",condition);}if(condition){/**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */this.maxLengthReached=true;return true;}else{this.maxLengthReached=false;return false;}}if((typeof maxLength===\"undefined\"?\"undefined\":_typeof(maxLength))===\"object\"){var _condition=currentInput.length===maxLength[options.inputName];if(options.debug){console.log(\"maxLength (obj) reached:\",_condition);}if(_condition){this.maxLengthReached=true;return true;}else{this.maxLengthReached=false;return false;}}}/**\r\n   * Gets the current value of maxLengthReached\r\n   */},{key:\"isMaxLengthReached\",value:function isMaxLengthReached(){return Boolean(this.maxLengthReached);}/**\r\n   * Transforms an arbitrary string to camelCase\r\n   * \r\n   * @param  {string} string The string to transform.\r\n   */},{key:\"camelCase\",value:function camelCase(string){return string.toLowerCase().trim().split(/[.\\-_\\s]/g).reduce(function(string,word){return string+word[0].toUpperCase()+word.slice(1);});}},{key:\"countInArray\",/**\r\n   * Counts the number of duplicates in a given array\r\n   * \r\n   * @param  {Array} array The haystack to search in\r\n   * @param  {string} value The needle to search for\r\n   */value:function countInArray(array,value){return array.reduce(function(n,x){return n+(x===value);},0);}}]);return Utilities;}();/* harmony default export */ __webpack_exports__[\"a\"] = (Utilities);\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 00c588c3323bf6c85ded","import SimpleKeyboard from './components/Keyboard';\r\nexport default SimpleKeyboard;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/index.js","import './Keyboard.css';\r\n\r\n// Services\r\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\r\nimport KeyboardLayout from '../services/KeyboardLayout';\r\nimport Utilities from '../services/Utilities';\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params){\r\n    let keyboardDOMQuery = typeof params[0] === \"string\" ? params[0] : '.simple-keyboard';\r\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\r\n\r\n    if(!options)\r\n      options = {};\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities(this);\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have. \r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n\r\n    /**\r\n     * Module namespace\r\n     */\r\n    this.modules = {};\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    this.handleButtonClicked = this.handleButtonClicked.bind(this);\r\n    this.syncInstanceInputs = this.syncInstanceInputs.bind(this);\r\n    this.clearInput = this.clearInput.bind(this);\r\n    this.getInput = this.getInput.bind(this);\r\n    this.setInput = this.setInput.bind(this);\r\n    this.replaceInput = this.replaceInput.bind(this);\r\n    this.clear = this.clear.bind(this);\r\n    this.dispatch = this.dispatch.bind(this);\r\n    this.addButtonTheme = this.addButtonTheme.bind(this);\r\n    this.removeButtonTheme = this.removeButtonTheme.bind(this);\r\n    this.getButtonElement = this.getButtonElement.bind(this);\r\n    this.handleCaret = this.handleCaret.bind(this);\r\n    this.caretEventHandler = this.caretEventHandler.bind(this);\r\n    this.onInit = this.onInit.bind(this);\r\n    this.onRender = this.onRender.bind(this);\r\n    this.render = this.render.bind(this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * let input = keyboard.getInput();\r\n     * \r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     * \r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = '';\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMQuery.split('.').join(\"\");\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if(this.keyboardDOM)\r\n      this.render();\r\n    else {\r\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Saving instance\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if(!window['SimpleKeyboardInstances'])\r\n      window['SimpleKeyboardInstances'] = {};\r\n      \r\n    window['SimpleKeyboardInstances'][this.utilities.camelCase(this.keyboardDOMClass)] = this;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboardInterface = new PhysicalKeyboard(this);\r\n  }\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button){\r\n    let debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if(button === '{//}')\r\n      return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if(typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n    \r\n    if(!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = '';\r\n\r\n    let updatedInput = this.utilities.getUpdatedInput(button, this.input[this.options.inputName], this.options, this.caretPosition);\r\n\r\n    if(this.input[this.options.inputName] !== updatedInput){\r\n\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if(this.options.maxLength && this.utilities.handleMaxLength(this.input, this.options, updatedInput)){\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName] = updatedInput;\r\n\r\n      if(debug)\r\n        console.log('Input changed:', this.input);\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if(this.options.syncInstanceInputs)\r\n        this.syncInstanceInputs(this.input);\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if(typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.input[this.options.inputName]);\r\n    }\r\n    \r\n    if(debug){\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs(){\r\n    this.dispatch((instance) => {\r\n      instance.replaceInput(this.input);\r\n    });\r\n  }\r\n  \r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName){\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[this.options.inputName] = '';\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if(this.options.syncInstanceInputs)\r\n      this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName){\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if(this.options.syncInstanceInputs)\r\n      this.syncInstanceInputs(this.input);\r\n\r\n    return this.input[this.options.inputName];\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName){\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if(this.options.syncInstanceInputs)\r\n      this.syncInstanceInputs(this.input);\r\n  }\r\n  \r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj){\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization. \r\n   * @param  {object} option The option to set\r\n   */\r\n  setOptions = option => {\r\n    option = option || {};\r\n    this.options = Object.assign(this.options, option);\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used interally between re-renders.\r\n   */\r\n  clear(){\r\n    this.keyboardDOM.innerHTML = '';\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback){\r\n    if(!window['SimpleKeyboardInstances']){\r\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n    \r\n    return Object.keys(window['SimpleKeyboardInstances']).forEach((key) => {\r\n      callback(window['SimpleKeyboardInstances'][key], key);\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className){\r\n    if(!className || !buttons)\r\n      return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if(!this.options.buttonTheme)\r\n          this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n  \r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n\r\n          if(buttonTheme.class.split(\" \").includes(classNameItem)){\r\n            classNameFound = true;\r\n            \r\n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if(!buttonThemeArray.includes(button)){\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if(!classNameFound){\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className){\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if(!buttons && !className){\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if(buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length){\r\n      let buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button, key) => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if(\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ){\r\n            let filteredButtonArray = buttonTheme.buttons.split(\" \").filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if(filteredButtonArray.length){\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n \r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button){\r\n    let output;\r\n\r\n    let buttonArr = this.buttonElements[button];\r\n    if(buttonArr){\r\n      if(buttonArr.length > 1){\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the current cursor position within a input or textarea (if any)\r\n   */\r\n  handleCaret(){\r\n    if(this.options.debug){\r\n      console.log(\"Caret handling started\");\r\n    }\r\n\r\n    document.addEventListener(\"keyup\", this.caretEventHandler);\r\n    document.addEventListener(\"mouseup\", this.caretEventHandler);\r\n    document.addEventListener(\"touchend\", this.caretEventHandler);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link handleCaret} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event){\r\n    let targetTagName = event.target.tagName.toLowerCase();\r\n\r\n    if(\r\n      targetTagName === \"textarea\" ||\r\n      targetTagName === \"input\"\r\n    ){\r\n      /**\r\n       * Tracks current cursor position\r\n       * As keys are pressed, text will be added/removed at that position within the input.\r\n       */\r\n      this.caretPosition = event.target.selectionStart;\r\n\r\n      if(this.options.debug){\r\n        console.log('Caret at: ', event.target.selectionStart, event.target.tagName.toLowerCase());\r\n      }     \r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit(){\r\n    if(this.options.debug){\r\n      console.log(\"Initialized\");\r\n    }\r\n\r\n    /**\r\n     * Caret handling\r\n     */\r\n    this.handleCaret();\r\n\r\n    if(typeof this.options.onInit === \"function\")\r\n      this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender(){\r\n    if(typeof this.options.onRender === \"function\")\r\n      this.options.onRender();\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp = (name, prop) => {\r\n    if(!this.modules[name])\r\n      return false;\r\n    \r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList = () => {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render(){\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    let layoutClass = this.options.layout ? \"hg-layout-custom\" : `hg-layout-${this.options.layoutName}`;\r\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\r\n\r\n    /**\r\n     * Account for buttonTheme, if set\r\n     */\r\n    let buttonThemesParsed = {};\r\n    if(Array.isArray(this.options.buttonTheme)){\r\n      this.options.buttonTheme.forEach(themeObj => {\r\n        if(themeObj.buttons && themeObj.class){\r\n          let themeButtons;\r\n\r\n          if(typeof themeObj.buttons === \"string\"){\r\n            themeButtons = themeObj.buttons.split(' ');\r\n          }\r\n\r\n          if(themeButtons){\r\n            themeButtons.forEach(themeButton => {\r\n              let themeParsed = buttonThemesParsed[themeButton];\r\n\r\n              // If the button has already been added\r\n              if(themeParsed){\r\n                // Making sure we don't add duplicate classes, even when buttonTheme has duplicates\r\n                if(!this.utilities.countInArray(themeParsed.split(\" \"), themeObj.class)){\r\n                  buttonThemesParsed[themeButton] = `${themeParsed} ${themeObj.class}`;\r\n                }\r\n              } else {\r\n                buttonThemesParsed[themeButton] = themeObj.class;\r\n              }\r\n            });\r\n          }\r\n        } else {\r\n          console.warn(`buttonTheme row is missing the \"buttons\" or the \"class\". Please check the documentation.`)\r\n        }\r\n      });\r\n    }\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass}`;\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      let rowArray = row.split(' ');\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      var rowDOM = document.createElement('div');\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        let fctBtnClass = this.utilities.getButtonClass(button);\r\n        let buttonThemeClass = buttonThemesParsed[button];\r\n        let buttonDisplayName = this.utilities.getButtonDisplayName(button, this.options.display, this.options.mergeDisplay);\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        var buttonDOM = document.createElement('div');\r\n        buttonDOM.className += `hg-button ${fctBtnClass}${buttonThemeClass ? \" \"+buttonThemeClass : \"\"}`;\r\n        buttonDOM.onclick = () => this.handleButtonClicked(button);\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding display label\r\n         */\r\n        buttonDOM.setAttribute(\"data-displayLabel\", buttonDisplayName);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        var buttonSpanDOM = document.createElement('span');\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if(!this.buttonElements[button])\r\n          this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n\r\n      });\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if(!this.initialized){\r\n      /**\r\n       * Ensures that onInit is only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/lib/components/Keyboard.js","/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor(simpleKeyboardInstance){\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    this.initKeyboardListener = this.initKeyboardListener.bind(this);\r\n    this.getSimpleKeyboardLayoutKey = this.getSimpleKeyboardLayoutKey.bind(this);\r\n\r\n    /**\r\n     * Initialize key listeners\r\n     */\r\n    this.initKeyboardListener();\r\n  }\r\n\r\n  /**\r\n   * Initializes key event listeners\r\n   */\r\n  initKeyboardListener(){\r\n    // Adding button style on keydown\r\n    document.addEventListener(\"keydown\", (event) => {\r\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\r\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n        this.simpleKeyboardInstance.dispatch(instance => {\r\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n          if(buttonDOM){\r\n            buttonDOM.style.backgroundColor = this.simpleKeyboardInstance.options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\r\n            buttonDOM.style.color = this.simpleKeyboardInstance.options.physicalKeyboardHighlightTextColor || \"white\";\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Removing button style on keyup\r\n    document.addEventListener(\"keyup\", (event) => {\r\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\r\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n        this.simpleKeyboardInstance.dispatch(instance => {\r\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n          if(buttonDOM){\r\n            buttonDOM.removeAttribute(\"style\");\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event){\r\n    let output;\r\n\r\n    if(\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ){\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" && Number.isInteger(Number(event.code[1])) && event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;\n\n\n// WEBPACK FOOTER //\n// ./src/lib/services/PhysicalKeyboard.js","/**\r\n * Keyboard Layout Service\r\n */\r\nclass KeyboardLayout {\r\n  /**\r\n   * Get default simple-keyboard layout\r\n   * @return {object} The default layout (US-QWERTY)\r\n   */\r\n  static getDefaultLayout(){\r\n    return {\r\n      'default': [\r\n        '` 1 2 3 4 5 6 7 8 9 0 - = {bksp}',\r\n        '{tab} q w e r t y u i o p [ ] \\\\',\r\n        '{lock} a s d f g h j k l ; \\' {enter}',\r\n        '{shift} z x c v b n m , . / {shift}',\r\n        '.com @ {space}'\r\n      ],\r\n      'shift': [\r\n        '~ ! @ # $ % ^ & * ( ) _ + {bksp}',\r\n        '{tab} Q W E R T Y U I O P { } |',\r\n        '{lock} A S D F G H J K L : \" {enter}',\r\n        '{shift} Z X C V B N M < > ? {shift}',\r\n        '.com @ {space}'\r\n      ]\r\n    } \r\n  }\r\n}\r\n\r\nexport default KeyboardLayout;\n\n\n// WEBPACK FOOTER //\n// ./src/lib/services/KeyboardLayout.js","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor(simpleKeyboardInstance){\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    this.getButtonClass = this.getButtonClass.bind(this);\r\n    this.getButtonDisplayName = this.getButtonDisplayName.bind(this);\r\n    this.getUpdatedInput = this.getUpdatedInput.bind(this);\r\n    this.updateCaretPos = this.updateCaretPos.bind(this);\r\n    this.isMaxLengthReached = this.isMaxLengthReached.bind(this);\r\n    this.camelCase = this.camelCase.bind(this);\r\n    this.countInArray = this.countInArray.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button){\r\n    let buttonTypeClass = (button.includes(\"{\") && button.includes(\"}\") && button !== '{//}') ? \"functionBtn\" : \"standardBtn\";\r\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = '';\r\n\r\n    if(buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay(){\r\n    return {\r\n      '{bksp}': 'backspace',\r\n      '{backspace}': 'backspace',\r\n      '{enter}': '< enter',\r\n      '{shift}': 'shift',\r\n      '{shiftleft}': 'shift',\r\n      '{shiftright}': 'shift',\r\n      '{alt}': 'alt',\r\n      '{s}': 'shift',\r\n      '{tab}': 'tab',\r\n      '{lock}': 'caps',\r\n      '{capslock}': 'caps',\r\n      '{accept}': 'Submit',\r\n      '{space}': ' ',\r\n      '{//}': ' ',\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      '{numpaddivide}': '/',\r\n      '{numlock}': 'lock',\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\",\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay){\r\n    if(mergeDisplay){\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  \r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   * \r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {object} options The simple-keyboard options object\r\n   * @param  {number} caretPos The cursor's current position\r\n   */\r\n  getUpdatedInput(button, input, options, caretPos){\r\n    \r\n    let output = input;\r\n\r\n    if((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0){\r\n      output = this.removeAt(output, caretPos);\r\n\r\n    } else if(button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", caretPos);\r\n\r\n    else if(button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)){\r\n      output = this.addStringAt(output, \"\\t\", caretPos);\r\n\r\n    } else if((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\r\n      output = this.addStringAt(output, \"\\n\", caretPos);\r\n\r\n    else if(button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))){\r\n      output = this.addStringAt(output, button[button.length - 2], caretPos);\r\n    }\r\n    else if(button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, '/', caretPos);\r\n\r\n    else if(button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, '*', caretPos);\r\n    else if(button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, '-', caretPos);\r\n\r\n    else if(button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, '+', caretPos);\r\n\r\n    else if(button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, '.', caretPos);\r\n\r\n    else if(button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, caretPos);\r\n\r\n    else if(!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, caretPos);\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   * \r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus){\r\n    if(minus){\r\n      if(this.simpleKeyboardInstance.caretPosition > 0)\r\n        this.simpleKeyboardInstance.caretPosition = this.simpleKeyboardInstance.caretPosition - length\r\n    } else {\r\n      this.simpleKeyboardInstance.caretPosition = this.simpleKeyboardInstance.caretPosition + length;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   * \r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   */\r\n  addStringAt(source, string, position){\r\n    let output;\r\n\r\n    if(this.simpleKeyboardInstance.options.debug){\r\n      console.log(\"Caret at:\", position);\r\n    }\r\n\r\n    if(!position && position !== 0){\r\n      output = source + string;\r\n    } else {\r\n      output = [source.slice(0, position), string, source.slice(position)].join('');\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if(!this.isMaxLengthReached()){\r\n        this.updateCaretPos(string.length);\r\n      }\r\n\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   * \r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   */\r\n  removeAt(source, position){\r\n    if(this.simpleKeyboardInstance.caretPosition === 0){\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n    let prevTwoChars;\r\n    let emojiMatched;\r\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n    /**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */\r\n    if(position && position >= 0){\r\n      prevTwoChars = source.substring(position - 2, position)\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if(emojiMatched){\r\n        output = source.substr(0, (position - 2)) + source.substr(position);\r\n        this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.substr(0, (position - 1)) + source.substr(position);\r\n        this.updateCaretPos(1, true);\r\n      }\r\n    } else {\r\n      prevTwoChars = source.slice(-2);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if(emojiMatched){\r\n        output = source.slice(0, -2);\r\n        this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.slice(0, -1);\r\n        this.updateCaretPos(1, true);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   * \r\n   * @param  {object} inputObj\r\n   * @param  {object} options\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, options, updatedInput){\r\n    let maxLength = options.maxLength;\r\n    let currentInput = inputObj[options.inputName];\r\n    let condition = currentInput.length === maxLength;\r\n\r\n\r\n    if(\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ){\r\n      return false;\r\n    }\r\n\r\n    if(Number.isInteger(maxLength)){\r\n      if(options.debug){\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if(condition){\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if(typeof maxLength === \"object\"){\r\n      let condition = currentInput.length === maxLength[options.inputName];\r\n\r\n      if(options.debug){\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if(condition){\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached(){\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   * \r\n   * @param  {string} string The string to transform.\r\n   */\r\n  camelCase(string){\r\n    return string.toLowerCase().trim().split(/[.\\-_\\s]/g).reduce((string, word) => string + word[0].toUpperCase() + word.slice(1));\r\n  };\r\n\r\n  /**\r\n   * Counts the number of duplicates in a given array\r\n   * \r\n   * @param  {Array} array The haystack to search in\r\n   * @param  {string} value The needle to search for\r\n   */\r\n  countInArray(array, value){\r\n    return array.reduce((n, x) => n + (x === value), 0);\r\n  }\r\n\r\n}\r\n\r\nexport default Utilities;\n\n\n// WEBPACK FOOTER //\n// ./src/lib/services/Utilities.js"],"sourceRoot":""}