{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/Utilities.js","components/Keyboard.js","services/KeyboardLayout.js","services/PhysicalKeyboard.js","index.js","../../node_modules/webpack/buildin/harmony-module.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utilities","getOptions","getCaretPosition","dispatch","this","bindMethods","myClass","instance","getOwnPropertyNames","myMethod","button","buttonTypeClass","includes","buttonWithoutBraces","replace","buttonNormalized","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","options","output","length","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","minus","newCaretPos","updateCaretPosAction","caretPosition","debug","console","log","keyboardDOMClass","source","string","position","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","Boolean","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","SimpleKeyboard","params","keyboardDOM","document","querySelector","HTMLDivElement","className","warn","Error","initCallback","baseDOMClasses","keyboardClasses","filter","DOMClass","handleParams","utilities","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","buttonElements","currentInstanceName","camelCase","allKeyboardInstances","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","PhysicalKeyboard","render","loadModules","onKeyPress","getUpdatedInput","inputPattern","inputPatternIsValid","handleMaxLength","syncInstanceInputs","onChange","onChangeAll","e","preventDefault","stopMouseDownPropagation","stopPropagation","target","classList","add","activeButtonClass","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","disableButtonHold","setTimeout","handleButtonHold","recurseButtons","buttonElement","remove","onKeyReleased","handleButtonClicked","replaceInput","onSetOptions","innerHTML","callback","forEach","buttons","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","Array","isArray","index","filteredButtonArray","item","splice","buttonArr","inputVal","inputPatternRaw","RegExp","didInputMatch","test","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","event","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","targetTagName","tagName","disableCaretPositioning","selectionStart","fn","buttonName","removeEventListener","onpointerup","ontouchend","ontouchcancel","onmouseup","deleteButton","onpointerdown","onpointercancel","ontouchstart","onclick","onmousedown","clear","initialized","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","contains","autoUseTouchEvents","useTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","KeyboardModule","keyboardModule","constructor","classStr","init","prop","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","createElement","containerUID","setAttribute","containedElements","element","appendChild","layoutClass","layout","getDefaultLayout","useTouchEventsClass","disableRowButtonContainers","getKeyboardClassString","row","rIndex","rowArray","bIndex","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","buttonType","useButtonTag","buttonDOM","getButtonThemeClasses","setDOMButtonAttributes","handleButtonMouseDown","handleButtonMouseUp","buttonUID","buttonSpanDOM","parseRowDOMContainers","handleKeyboardContainerMouseDown","default","shift","buttonPressed","getSimpleKeyboardLayoutKey","getButtonElement","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","code","originalModule","webpackPolyfill"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, dispatch }) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button) {\r\n    const buttonTypeClass =\r\n      button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\r\n        ? \"functionBtn\"\r\n        : \"standardBtn\";\r\n    const buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\"\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button, input, caretPos, moveCaret) {\r\n    const options = this.getOptions();\r\n    let output = input;\r\n\r\n    if (\r\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeAt(output, caretPos, moveCaret);\r\n    } else if (button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\r\n    else if (\r\n      button === \"{tab}\" &&\r\n      !(\r\n        typeof options.tabCharOnTab === \"boolean\" &&\r\n        options.tabCharOnTab === false\r\n      )\r\n    ) {\r\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\r\n    } else if (\r\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\r\n      options.newLineOnEnter\r\n    )\r\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\r\n    else if (\r\n      button.includes(\"numpad\") &&\r\n      Number.isInteger(Number(button[button.length - 2]))\r\n    ) {\r\n      output = this.addStringAt(\r\n        output,\r\n        button[button.length - 2],\r\n        caretPos,\r\n        moveCaret\r\n      );\r\n    } else if (button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, \"/\", caretPos, moveCaret);\r\n    else if (button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, \"*\", caretPos, moveCaret);\r\n    else if (button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, \"-\", caretPos, moveCaret);\r\n    else if (button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, \"+\", caretPos, moveCaret);\r\n    else if (button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, \".\", caretPos, moveCaret);\r\n    else if (button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus) {\r\n    const newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch(instance => {\r\n      instance.caretPosition = newCaretPos;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length, minus) {\r\n    const options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (minus) {\r\n      if (caretPosition > 0) caretPosition = caretPosition - length;\r\n    } else {\r\n      caretPosition = caretPosition + length;\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition, `(${this.keyboardDOMClass})`);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source, string, position, moveCaret) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + string;\r\n    } else {\r\n      output = [source.slice(0, position), string, source.slice(position)].join(\r\n        \"\"\r\n      );\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(string.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source, position, moveCaret) {\r\n    const caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n    let prevTwoChars;\r\n    let emojiMatched;\r\n    const emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n    /**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */\r\n    if (position && position >= 0) {\r\n      prevTwoChars = source.substring(position - 2, position);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position - 2) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.substr(0, position - 1) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    } else {\r\n      prevTwoChars = source.slice(-2);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.slice(0, -2);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.slice(0, -1);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, updatedInput) {\r\n    const options = this.getOptions();\r\n    const maxLength = options.maxLength;\r\n    const currentInput = inputObj[options.inputName];\r\n    const condition = updatedInput.length - 1 >= maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      const condition = currentInput.length === maxLength[options.inputName];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass, instance) {\r\n    // eslint-disable-next-line no-unused-vars\r\n    for (const myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      const excludeMethod =\r\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} string The string to transform.\r\n   */\r\n  camelCase(string) {\r\n    if (!string) return false;\r\n\r\n    return string\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((string, word) =>\r\n        word.length ? string + word[0].toUpperCase() + word.slice(1) : string\r\n      );\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import \"./Keyboard.css\";\r\n\r\n// Services\r\nimport { getDefaultLayout } from \"../services/KeyboardLayout\";\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params) {\r\n    const { keyboardDOMClass, keyboardDOM, options = {} } = this.handleParams(\r\n      params\r\n    );\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      dispatch: this.dispatch\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = keyboardDOM;\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {Array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {boolean} stopMouseDownPropagation Stops pointer down events on simple-keyboard buttons from bubbling to parent elements.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n    this.options.preventMouseDownDefault =\r\n      this.options.preventMouseDownDefault || false;\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * const input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMClass;\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!window[\"SimpleKeyboardInstances\"])\r\n      window[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = window[\"SimpleKeyboardInstances\"];\r\n    this.keyboardInstanceNames = Object.keys(window[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance =\r\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions\r\n    });\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\".${keyboardDOMClass}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * parseParams\r\n   */\r\n  handleParams = params => {\r\n    let keyboardDOMClass;\r\n    let keyboardDOM;\r\n    let options;\r\n\r\n    /**\r\n     * If first parameter is a string:\r\n     * Consider it as an element's class\r\n     */\r\n    if (typeof params[0] === \"string\") {\r\n      keyboardDOMClass = params[0].split(\".\").join(\"\");\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`);\r\n      options = params[1];\r\n\r\n      /**\r\n       * If first parameter is an HTMLDivElement\r\n       * Consider it as the keyboard DOM element\r\n       */\r\n    } else if (params[0] instanceof HTMLDivElement) {\r\n      /**\r\n       * This element must have a class, otherwise throw\r\n       */\r\n      if (!params[0].className) {\r\n        console.warn(\"Any DOM element passed as parameter must have a class.\");\r\n        throw new Error(\"KEYBOARD_DOM_CLASS_ERROR\");\r\n      }\r\n\r\n      keyboardDOMClass = params[0].className.split(\" \")[0];\r\n      keyboardDOM = params[0];\r\n      options = params[1];\r\n\r\n      /**\r\n       * Otherwise, search for .simple-keyboard DOM element\r\n       */\r\n    } else {\r\n      keyboardDOMClass = \"simple-keyboard\";\r\n      keyboardDOM = document.querySelector(`.${keyboardDOMClass}`);\r\n      options = params[0];\r\n    }\r\n\r\n    return {\r\n      keyboardDOMClass,\r\n      keyboardDOM,\r\n      options\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = () => this.options;\r\n  getCaretPosition = () => this.caretPosition;\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button) {\r\n    const debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n\r\n    if (!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = \"\";\r\n\r\n    const updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[this.options.inputName],\r\n      this.caretPosition\r\n    );\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[this.options.inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (\r\n        this.options.maxLength &&\r\n        this.utilities.handleMaxLength(this.input, updatedInput)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName] = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[this.options.inputName],\r\n        this.caretPosition,\r\n        true\r\n      );\r\n\r\n      if (debug) console.log(\"Input changed:\", this.input);\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.input[this.options.inputName]);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\")\r\n        this.options.onChangeAll(this.input);\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button, e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n    if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n    /**\r\n     * Add active class\r\n     */\r\n    if (e) e.target.classList.add(this.activeButtonClass);\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.isMouseHold = true;\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = setTimeout(() => {\r\n        if (\r\n          this.isMouseHold &&\r\n          ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n            button === \"{delete}\" ||\r\n            button === \"{backspace}\" ||\r\n            button === \"{bksp}\" ||\r\n            button === \"{space}\" ||\r\n            button === \"{tab}\")\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button, e);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button) {\r\n    /**\r\n     * Remove active class\r\n     */\r\n    this.recurseButtons(buttonElement => {\r\n      buttonElement.classList.remove(this.activeButtonClass);\r\n    });\r\n\r\n    this.isMouseHold = false;\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === \"function\")\r\n      this.options.onKeyReleased(button);\r\n  }\r\n\r\n  /**\r\n   * Handles container mousedown\r\n   */\r\n  handleKeyboardContainerMouseDown(e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button) {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = setTimeout(() => {\r\n      if (this.isMouseHold) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs() {\r\n    this.dispatch(instance => {\r\n      instance.replaceInput(this.input);\r\n      instance.caretPosition = this.caretPosition;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.caretPosition = 0;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n\r\n    return this.input[inputName];\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs();\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj) {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options) {\r\n    options = options || {};\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    /**\r\n     * Some option changes require adjustments before re-render\r\n     */\r\n    this.onSetOptions(options);\r\n\r\n    /**\r\n     * Rendering\r\n     */\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(options) {\r\n    if (options.inputName) {\r\n      /**\r\n       * inputName changed. This requires a caretPosition reset\r\n       */\r\n      if (this.options.debug) {\r\n        console.log(\"inputName changed. caretPosition reset.\");\r\n      }\r\n\r\n      this.caretPosition = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used internally between re-renders.\r\n   */\r\n  clear() {\r\n    this.keyboardDOM.innerHTML = \"\";\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback) {\r\n    if (!window[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(\r\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\r\n      );\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach(key => {\r\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className) {\r\n    if (!className || !buttons) return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n          if (buttonTheme.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            const buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className) {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (\r\n      buttons &&\r\n      Array.isArray(this.options.buttonTheme) &&\r\n      this.options.buttonTheme.length\r\n    ) {\r\n      const buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach(button => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if (\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ) {\r\n            const filteredButtonArray = buttonTheme.buttons\r\n              .split(\" \")\r\n              .filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (filteredButtonArray.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button) {\r\n    let output;\r\n\r\n    const buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal) {\r\n    const inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      const didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `inputPattern (\"${inputPattern}\"): ${\r\n            didInputMatch ? \"passed\" : \"did not pass!\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners() {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      /**\r\n       * Event Listeners\r\n       */\r\n      document.addEventListener(\"keyup\", this.handleKeyUp);\r\n      document.addEventListener(\"keydown\", this.handleKeyDown);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event) {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event) {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  handleTouchEnd(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event) {\r\n    let targetTagName;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch(instance => {\r\n      if (instance.isMouseHold) {\r\n        instance.isMouseHold = false;\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" || targetTagName === \"input\") &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        instance.caretPosition = event.target.selectionStart;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            event.target.selectionStart,\r\n            event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`\r\n          );\r\n        }\r\n      } else if (instance.options.disableCaretPositioning) {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.caretPosition = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute an operation on each button\r\n   */\r\n  recurseButtons(fn) {\r\n    if (!fn) return false;\r\n\r\n    Object.keys(this.buttonElements).forEach(buttonName =>\r\n      this.buttonElements[buttonName].forEach(fn)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy() {\r\n    if (this.options.debug)\r\n      console.log(\r\n        `Destroying simple-keyboard instance: ${this.currentInstanceName}`\r\n      );\r\n\r\n    /**\r\n     * Remove document listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\r\n    document.onpointerup = null;\r\n    document.ontouchend = null;\r\n    document.ontouchcancel = null;\r\n    document.onmouseup = null;\r\n\r\n    /**\r\n     * Remove buttons\r\n     */\r\n    let deleteButton = buttonElement => {\r\n      buttonElement.onpointerdown = null;\r\n      buttonElement.onpointerup = null;\r\n      buttonElement.onpointercancel = null;\r\n      buttonElement.ontouchstart = null;\r\n      buttonElement.ontouchend = null;\r\n      buttonElement.ontouchcancel = null;\r\n      buttonElement.onclick = null;\r\n      buttonElement.onmousedown = null;\r\n      buttonElement.onmouseup = null;\r\n\r\n      buttonElement.remove();\r\n      buttonElement = null;\r\n    };\r\n\r\n    this.recurseButtons(deleteButton);\r\n\r\n    this.recurseButtons = null;\r\n    deleteButton = null;\r\n\r\n    /**\r\n     * Remove wrapper events\r\n     */\r\n    this.keyboardDOM.onpointerdown = null;\r\n    this.keyboardDOM.ontouchstart = null;\r\n    this.keyboardDOM.onmousedown = null;\r\n\r\n    /**\r\n     * Clearing keyboard wrapper\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Remove instance\r\n     */\r\n    window[\"SimpleKeyboardInstances\"][this.currentInstanceName] = null;\r\n    delete window[\"SimpleKeyboardInstances\"][this.currentInstanceName];\r\n\r\n    /**\r\n     * Reset initialized flag\r\n     */\r\n    this.initialized = false;\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button) {\r\n    const buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach(themeObj => {\r\n        if (\r\n          themeObj.class &&\r\n          typeof themeObj.class === \"string\" &&\r\n          themeObj.buttons &&\r\n          typeof themeObj.buttons === \"string\"\r\n        ) {\r\n          const themeObjClasses = themeObj.class.split(\" \");\r\n          const themeObjButtons = themeObj.buttons.split(\" \");\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonTheme\". Please check the documentation.`,\r\n            themeObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button, callback) {\r\n    const buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach(attrObj => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === \"string\" &&\r\n          attrObj.value &&\r\n          typeof attrObj.value === \"string\" &&\r\n          attrObj.buttons &&\r\n          typeof attrObj.buttons === \"string\"\r\n        ) {\r\n          const attrObjButtons = attrObj.buttons.split(\" \");\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonAttributes\". Please check the documentation.`,\r\n            attrObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = event => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\")\r\n      this.options.beforeFirstRender();\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\")\r\n      this.options.beforeRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\")\r\n      this.options.onModulesLoaded();\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach(KeyboardModule => {\r\n        const keyboardModule = new KeyboardModule();\r\n\r\n        /* istanbul ignore next */\r\n        if (\r\n          module.constructor.name &&\r\n          keyboardModule.constructor.name !== \"Function\"\r\n        ) {\r\n          const classStr = `module-${this.utilities.camelCase(\r\n            keyboardModule.constructor.name\r\n          )}`;\r\n          this.keyboardPluginClasses =\r\n            this.keyboardPluginClasses + ` ${classStr}`;\r\n        }\r\n\r\n        keyboardModule.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses =\r\n        this.keyboardPluginClasses + \" modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name, prop) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM,\r\n    rowIndex,\r\n    containerStartIndexes,\r\n    containerEndIndexes\r\n  ) {\r\n    const rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        const endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        const updated_startIndex = startIndex - removedElements;\r\n        const updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        const containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        const containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        const containedElements = rowDOMArray.splice(\r\n          updated_startIndex,\r\n          updated_endIndex - updated_startIndex + 1\r\n        );\r\n        removedElements = updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach(element => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach(element => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\r\n            \"rowDOMContainer\",\r\n            containedElements,\r\n            updated_startIndex,\r\n            updated_endIndex,\r\n            removedElements + 1\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * getKeyboardClassString\r\n   */\r\n  getKeyboardClassString = (...baseDOMClasses) => {\r\n    const keyboardClasses = [this.keyboardDOMClass, ...baseDOMClasses].filter(\r\n      DOMClass => !!DOMClass\r\n    );\r\n\r\n    return keyboardClasses.join(\" \");\r\n  };\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    const layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    const layout = this.options.layout || getDefaultLayout();\r\n    const useTouchEvents = this.options.useTouchEvents || false;\r\n    const useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    const useMouseEvents = this.options.useMouseEvents || false;\r\n    const disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className = this.getKeyboardClassString(\r\n      this.options.theme,\r\n      layoutClass,\r\n      this.keyboardPluginClasses,\r\n      useTouchEventsClass\r\n    );\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      const rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      const containerStartIndexes = [];\r\n      const containerEndIndexes = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        const buttonHasContainerStart =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"[\") &&\r\n          button.length > 1;\r\n        const buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"]\") &&\r\n          button.length > 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        const fctBtnClass = this.utilities.getButtonClass(button);\r\n        const buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        const buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        const buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute, value) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        this.activeButtonClass = \"hg-activeButton\";\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (\r\n          this.utilities.pointerEventsSupported() &&\r\n          !useTouchEvents &&\r\n          !useMouseEvents\r\n        ) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = e => {\r\n            this.handleButtonClicked(button);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = () => {\r\n            this.handleButtonMouseUp(button);\r\n          };\r\n          buttonDOM.onpointercancel = () => {\r\n            this.handleButtonMouseUp(button);\r\n          };\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = e => {\r\n              this.handleButtonClicked(button);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = () => {\r\n              this.handleButtonMouseUp(button);\r\n            };\r\n            buttonDOM.ontouchcancel = () => {\r\n              this.handleButtonMouseUp(button);\r\n            };\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = () => {\r\n              this.isMouseHold = false;\r\n              this.handleButtonClicked(button);\r\n            };\r\n            buttonDOM.onmousedown = e => {\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.onmouseup = () => {\r\n              this.handleButtonMouseUp(button);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        const buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        const buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(\r\n        rowDOM,\r\n        rIndex,\r\n        containerStartIndexes,\r\n        containerEndIndexes\r\n      );\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling parent events\r\n       */\r\n      /* istanbul ignore next */\r\n      if (\r\n        this.utilities.pointerEventsSupported() &&\r\n        !useTouchEvents &&\r\n        !useMouseEvents\r\n      ) {\r\n        document.onpointerup = () => this.handleButtonMouseUp();\r\n        this.keyboardDOM.onpointerdown = e =>\r\n          this.handleKeyboardContainerMouseDown(e);\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = () => this.handleButtonMouseUp();\r\n        document.ontouchcancel = () => this.handleButtonMouseUp();\r\n\r\n        this.keyboardDOM.ontouchstart = e =>\r\n          this.handleKeyboardContainerMouseDown(e);\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = () => this.handleButtonMouseUp();\r\n        this.keyboardDOM.onmousedown = e =>\r\n          this.handleKeyboardContainerMouseDown(e);\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","export const getDefaultLayout = () => {\r\n  return {\r\n    default: [\r\n      \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n      \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n      \"{lock} a s d f g h j k l ; ' {enter}\",\r\n      \"{shift} z x c v b n m , . / {shift}\",\r\n      \".com @ {space}\"\r\n    ],\r\n    shift: [\r\n      \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n      \"{tab} Q W E R T Y U I O P { } |\",\r\n      '{lock} A S D F G H J K L : \" {enter}',\r\n      \"{shift} Z X C V B N M < > ? {shift}\",\r\n      \".com @ {space}\"\r\n    ]\r\n  };\r\n};\r\n","import Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(event) {\r\n    const options = this.getOptions();\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      const buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM) {\r\n        buttonDOM.style.backgroundColor =\r\n          options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\r\n        buttonDOM.style.color =\r\n          options.physicalKeyboardHighlightTextColor || \"white\";\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(event) {\r\n    const buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      const buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM && buttonDOM.removeAttribute) {\r\n        buttonDOM.removeAttribute(\"style\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event) {\r\n    let output;\r\n\r\n    if (\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ) {\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" &&\r\n        Number.isInteger(Number(event.code[1])) &&\r\n        event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport default SimpleKeyboard;\r\n","module.exports = function (originalModule) {\n  if (!originalModule.webpackPolyfill) {\n    var module = Object.create(originalModule); // module.parent = undefined by default\n\n    if (!module.children) module.children = [];\n    Object.defineProperty(module, \"loaded\", {\n      enumerable: true,\n      get: function get() {\n        return module.l;\n      }\n    });\n    Object.defineProperty(module, \"id\", {\n      enumerable: true,\n      get: function get() {\n        return module.i;\n      }\n    });\n    Object.defineProperty(module, \"exports\", {\n      enumerable: true\n    });\n    module.webpackPolyfill = 1;\n  }\n\n  return module;\n};"],"sourceRoot":""}