{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","../../node_modules/@babel/runtime/helpers/esm/createClass.js","services/PhysicalKeyboard.js","services/KeyboardLayout.js","services/Utilities.js","components/Keyboard.js","index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","length","descriptor","configurable","writable","_createClass","protoProps","staticProps","PhysicalKeyboard","simpleKeyboardInstance","this","initKeyboardListener","getSimpleKeyboardLayoutKey","_this","document","addEventListener","event","options","physicalKeyboardHighlight","buttonPressed","dispatch","buttonDOM","getButtonElement","concat","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","output","code","includes","toUpperCase","Number","isInteger","toLowerCase","KeyboardLayout","default","shift","Utilities","getButtonClass","getButtonDisplayName","getUpdatedInput","updateCaretPos","isMaxLengthReached","camelCase","countInArray","button","buttonTypeClass","buttonWithoutBraces","replace","buttonNormalized","{bksp}","{backspace}","{enter}","{shift}","{shiftleft}","{shiftright}","{alt}","{s}","{tab}","{lock}","{capslock}","{accept}","{space}","{//}","{esc}","{escape}","{f1}","{f2}","{f3}","{f4}","{f5}","{f6}","{f7}","{f8}","{f9}","{f10}","{f11}","{f12}","{numpaddivide}","{numlock}","{arrowup}","{arrowleft}","{arrowdown}","{arrowright}","{prtscr}","{scrolllock}","{pause}","{insert}","{home}","{pageup}","{delete}","{end}","{pagedown}","{numpadmultiply}","{numpadsubtract}","{numpadadd}","{numpadenter}","{period}","{numpaddecimal}","{numpad0}","{numpad1}","{numpad2}","{numpad3}","{numpad4}","{numpad5}","{numpad6}","{numpad7}","{numpad8}","{numpad9}","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","minus","caretPosition","source","string","position","slice","join","debug","console","log","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","Boolean","trim","split","reduce","word","array","x","SimpleKeyboard","setOptions","option","render","registerModule","initCallback","getModuleProp","prop","getModulesList","keys","keyboardDOMQuery","arguments","undefined","utilities","keyboardDOM","querySelector","layoutName","theme","keyboardPluginClasses","handleButtonClicked","syncInstanceInputs","clearInput","getInput","setInput","replaceInput","clear","addButtonTheme","removeButtonTheme","handleCaret","caretEventHandler","onInit","onRender","loadModules","handleButtonMouseUp","handleButtonMouseDown","handleButtonHold","onModulesLoaded","keyboardDOMClass","buttonElements","warn","Error","physicalKeyboardInterface","onKeyPress","handleMaxLength","onChange","e","_this2","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","setTimeout","_this3","_this4","innerHTML","className","callback","forEach","buttons","_this5","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","_this6","Array","isArray","index","filteredButtonArray","filter","item","splice","buttonArr","targetTagName","tagName","disableCaretPositioning","selectionStart","_this7","Module","constructor","classStr","init","_this8","layoutClass","layout","getDefaultLayout","useTouchEvents","buttonThemesParsed","themeObj","themeButtons","themeButton","themeParsed","row","rIndex","rowArray","rowDOM","createElement","bIndex","fctBtnClass","buttonThemeClass","buttonDisplayName","ontouchstart","ontouchend","ontouchcancel","onclick","onmousedown","setAttribute","buttonUID","buttonSpanDOM","appendChild","onmouseup","initialized"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","/**\n * Physical Keyboard Service\n */\nclass PhysicalKeyboard {\n  /**\n   * Creates an instance of the PhysicalKeyboard service\n   */\n  constructor(simpleKeyboardInstance){\n    /**\n     * @type {object} A simple-keyboard instance\n     */\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\n\n    /**\n     * Bindings\n     */\n    this.initKeyboardListener = this.initKeyboardListener.bind(this);\n    this.getSimpleKeyboardLayoutKey = this.getSimpleKeyboardLayoutKey.bind(this);\n\n    /**\n     * Initialize key listeners\n     */\n    this.initKeyboardListener();\n  }\n\n  /**\n   * Initializes key event listeners\n   */\n  initKeyboardListener(){\n    // Adding button style on keydown\n    document.addEventListener(\"keydown\", (event) => {\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\n\n        this.simpleKeyboardInstance.dispatch(instance => {\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\n\n          if(buttonDOM){\n            buttonDOM.style.backgroundColor = this.simpleKeyboardInstance.options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\n            buttonDOM.style.color = this.simpleKeyboardInstance.options.physicalKeyboardHighlightTextColor || \"white\";\n          }\n        });\n      }\n    });\n\n    // Removing button style on keyup\n    document.addEventListener(\"keyup\", (event) => {\n      if(this.simpleKeyboardInstance.options.physicalKeyboardHighlight){\n        let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\n\n        this.simpleKeyboardInstance.dispatch(instance => {\n          let buttonDOM = instance.getButtonElement(buttonPressed) || instance.getButtonElement(`{${buttonPressed}}`);\n\n          if(buttonDOM && buttonDOM.removeAttribute){\n            buttonDOM.removeAttribute(\"style\");\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\n   * @param  {object} event The KeyboardEvent\n   */\n  getSimpleKeyboardLayoutKey(event){\n    let output;\n\n    if(\n      event.code.includes(\"Numpad\") ||\n      event.code.includes(\"Shift\") ||\n      event.code.includes(\"Space\") ||\n      event.code.includes(\"Backspace\") ||\n      event.code.includes(\"Control\") ||\n      event.code.includes(\"Alt\") ||\n      event.code.includes(\"Meta\")\n    ){\n      output = event.code;\n    } else {\n      output = event.key;\n    }\n\n    /**\n     * If button is not uppercase, casting to lowercase\n     */\n    if (\n      output !== output.toUpperCase() ||\n      (event.code[0] === \"F\" && Number.isInteger(Number(event.code[1])) && event.code.length <= 3)\n    ) {\n      output = output.toLowerCase();\n    }\n\n    return output;\n  }\n}\n\nexport default PhysicalKeyboard;","/**\n * Keyboard Layout Service\n */\nclass KeyboardLayout {\n  /**\n   * Get default simple-keyboard layout\n   * @return {object} The default layout (US-QWERTY)\n   */\n  static getDefaultLayout(){\n    return {\n      'default': [\n        '` 1 2 3 4 5 6 7 8 9 0 - = {bksp}',\n        '{tab} q w e r t y u i o p [ ] \\\\',\n        '{lock} a s d f g h j k l ; \\' {enter}',\n        '{shift} z x c v b n m , . / {shift}',\n        '.com @ {space}'\n      ],\n      'shift': [\n        '~ ! @ # $ % ^ & * ( ) _ + {bksp}',\n        '{tab} Q W E R T Y U I O P { } |',\n        '{lock} A S D F G H J K L : \" {enter}',\n        '{shift} Z X C V B N M < > ? {shift}',\n        '.com @ {space}'\n      ]\n    } \n  }\n}\n\nexport default KeyboardLayout;","/**\n * Utility Service\n */\nclass Utilities {\n  /**\n   * Creates an instance of the Utility service\n   */\n  constructor(simpleKeyboardInstance){\n    /**\n     * @type {object} A simple-keyboard instance\n     */\n    this.simpleKeyboardInstance = simpleKeyboardInstance;\n\n    /**\n     * Bindings\n     */\n    this.getButtonClass = this.getButtonClass.bind(this);\n    this.getButtonDisplayName = this.getButtonDisplayName.bind(this);\n    this.getUpdatedInput = this.getUpdatedInput.bind(this);\n    this.updateCaretPos = this.updateCaretPos.bind(this);\n    this.isMaxLengthReached = this.isMaxLengthReached.bind(this);\n    this.camelCase = this.camelCase.bind(this);\n    this.countInArray = this.countInArray.bind(this);\n  }\n\n  /**\n   * Adds default classes to a given button\n   * \n   * @param  {string} button The button's layout name\n   * @return {string} The classes to be added to the button\n   */\n  getButtonClass(button){\n    let buttonTypeClass = (button.includes(\"{\") && button.includes(\"}\") && button !== '{//}') ? \"functionBtn\" : \"standardBtn\";\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\n    let buttonNormalized = '';\n\n    if(buttonTypeClass !== \"standardBtn\")\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\n\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\n  }\n\n  /**\n   * Default button display labels\n   */\n  getDefaultDiplay(){\n    return {\n      '{bksp}': 'backspace',\n      '{backspace}': 'backspace',\n      '{enter}': '< enter',\n      '{shift}': 'shift',\n      '{shiftleft}': 'shift',\n      '{shiftright}': 'shift',\n      '{alt}': 'alt',\n      '{s}': 'shift',\n      '{tab}': 'tab',\n      '{lock}': 'caps',\n      '{capslock}': 'caps',\n      '{accept}': 'Submit',\n      '{space}': ' ',\n      '{//}': ' ',\n      \"{esc}\": \"esc\",\n      \"{escape}\": \"esc\",\n      \"{f1}\": \"f1\",\n      \"{f2}\": \"f2\",\n      \"{f3}\": \"f3\",\n      \"{f4}\": \"f4\",\n      \"{f5}\": \"f5\",\n      \"{f6}\": \"f6\",\n      \"{f7}\": \"f7\",\n      \"{f8}\": \"f8\",\n      \"{f9}\": \"f9\",\n      \"{f10}\": \"f10\",\n      \"{f11}\": \"f11\",\n      \"{f12}\": \"f12\",\n      '{numpaddivide}': '/',\n      '{numlock}': 'lock',\n      \"{arrowup}\": \"↑\",\n      \"{arrowleft}\": \"←\",\n      \"{arrowdown}\": \"↓\",\n      \"{arrowright}\": \"→\",\n      \"{prtscr}\": \"print\",\n      \"{scrolllock}\": \"scroll\",\n      \"{pause}\": \"pause\",\n      \"{insert}\": \"ins\",\n      \"{home}\": \"home\",\n      \"{pageup}\": \"up\",\n      \"{delete}\": \"del\",\n      \"{end}\": \"end\",\n      \"{pagedown}\": \"down\",\n      \"{numpadmultiply}\": \"*\",\n      \"{numpadsubtract}\": \"-\",\n      \"{numpadadd}\": \"+\",\n      \"{numpadenter}\": \"enter\",\n      \"{period}\": \".\",\n      \"{numpaddecimal}\": \".\",\n      \"{numpad0}\": \"0\",\n      \"{numpad1}\": \"1\",\n      \"{numpad2}\": \"2\",\n      \"{numpad3}\": \"3\",\n      \"{numpad4}\": \"4\",\n      \"{numpad5}\": \"5\",\n      \"{numpad6}\": \"6\",\n      \"{numpad7}\": \"7\",\n      \"{numpad8}\": \"8\",\n      \"{numpad9}\": \"9\",\n    };\n  }\n  /**\n   * Returns the display (label) name for a given button\n   * \n   * @param  {string} button The button's layout name\n   * @param  {object} display The provided display option\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\n   */\n  getButtonDisplayName(button, display, mergeDisplay){\n    if(mergeDisplay){\n      display = Object.assign({}, this.getDefaultDiplay(), display);\n    } else {\n      display = display || this.getDefaultDiplay();\n    }\n\n    return display[button] || button;\n  }\n\n  \n  /**\n   * Returns the updated input resulting from clicking a given button\n   * \n   * @param  {string} button The button's layout name\n   * @param  {string} input The input string\n   * @param  {object} options The simple-keyboard options object\n   * @param  {number} caretPos The cursor's current position\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  getUpdatedInput(button, input, options, caretPos, moveCaret){\n    \n    let output = input;\n\n    if((button === \"{bksp}\" || button === \"{backspace}\") && output.length > 0){\n      output = this.removeAt(output, caretPos, moveCaret);\n\n    } else if(button === \"{space}\")\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\n\n    else if(button === \"{tab}\" && !(typeof options.tabCharOnTab === \"boolean\" && options.tabCharOnTab === false)){\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\n\n    } else if((button === \"{enter}\" || button === \"{numpadenter}\") && options.newLineOnEnter)\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\n\n    else if(button.includes(\"numpad\") && Number.isInteger(Number(button[button.length - 2]))){\n      output = this.addStringAt(output, button[button.length - 2], caretPos);\n    }\n    else if(button === \"{numpaddivide}\")\n      output = this.addStringAt(output, '/', caretPos, moveCaret);\n\n    else if(button === \"{numpadmultiply}\")\n      output = this.addStringAt(output, '*', caretPos, moveCaret);\n\n    else if(button === \"{numpadsubtract}\")\n      output = this.addStringAt(output, '-', caretPos, moveCaret);\n\n    else if(button === \"{numpadadd}\")\n      output = this.addStringAt(output, '+', caretPos, moveCaret);\n\n    else if(button === \"{numpaddecimal}\")\n      output = this.addStringAt(output, '.', caretPos, moveCaret);\n\n    else if(button === \"{\" || button === \"}\")\n      output = this.addStringAt(output, button, caretPos, moveCaret);\n\n    else if(!button.includes(\"{\") && !button.includes(\"}\"))\n      output = this.addStringAt(output, button, caretPos, moveCaret);\n\n    return output;\n  }\n\n  /**\n   * Moves the cursor position by a given amount\n   * \n   * @param  {number} length Represents by how many characters the input should be moved\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\n   */\n  updateCaretPos(length, minus){\n    if(minus){\n      if(this.simpleKeyboardInstance.caretPosition > 0)\n        this.simpleKeyboardInstance.caretPosition = this.simpleKeyboardInstance.caretPosition - length;\n    } else {\n      this.simpleKeyboardInstance.caretPosition = this.simpleKeyboardInstance.caretPosition + length;\n    }\n  }\n\n  /**\n   * Adds a string to the input at a given position\n   * \n   * @param  {string} source The source input\n   * @param  {string} string The string to add\n   * @param  {number} position The (cursor) position where the string should be added\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  addStringAt(source, string, position, moveCaret){\n    let output;\n\n    if(!position && position !== 0){\n      output = source + string;\n    } else {\n      output = [source.slice(0, position), string, source.slice(position)].join('');\n\n      /**\n       * Avoid caret position change when maxLength is set\n       */\n      if(!this.isMaxLengthReached()){\n        if(moveCaret) this.updateCaretPos(string.length);\n      }\n\n    }\n\n    if(this.simpleKeyboardInstance.options.debug && moveCaret){\n      console.log(\"Caret at:\", position);\n    }\n\n    return output;\n  }\n\n  /**\n   * Removes an amount of characters at a given position\n   * \n   * @param  {string} source The source input\n   * @param  {number} position The (cursor) position from where the characters should be removed\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\n   */\n  removeAt(source, position, moveCaret){\n    if(this.simpleKeyboardInstance.caretPosition === 0){\n      return source;\n    }\n\n    let output;\n    let prevTwoChars;\n    let emojiMatched;\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\n\n    /**\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\n     */\n    if(position && position >= 0){\n      prevTwoChars = source.substring(position - 2, position)\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n      if(emojiMatched){\n        output = source.substr(0, (position - 2)) + source.substr(position);\n        if(moveCaret) this.updateCaretPos(2, true);\n      } else {\n        output = source.substr(0, (position - 1)) + source.substr(position);\n        if(moveCaret) this.updateCaretPos(1, true);\n      }\n    } else {\n      prevTwoChars = source.slice(-2);\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\n\n      if(emojiMatched){\n        output = source.slice(0, -2);\n        if(moveCaret) this.updateCaretPos(2, true);\n      } else {\n        output = source.slice(0, -1);\n        if(moveCaret) this.updateCaretPos(1, true);\n      }\n    }\n\n    if(this.simpleKeyboardInstance.options.debug && moveCaret){\n      console.log(\"Caret at:\", this.simpleKeyboardInstance.caretPosition);\n    }\n\n    return output;\n  }\n  /**\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\n   * \n   * @param  {object} inputObj\n   * @param  {object} options\n   * @param  {string} updatedInput\n   */\n  handleMaxLength(inputObj, options, updatedInput){\n    let maxLength = options.maxLength;\n    let currentInput = inputObj[options.inputName];\n    let condition = currentInput.length === maxLength;\n\n    if(\n      /**\n       * If pressing this button won't add more characters\n       * We exit out of this limiter function\n       */\n      updatedInput.length <= currentInput.length\n    ){\n      return false;\n    }\n\n    if(Number.isInteger(maxLength)){\n      if(options.debug){\n        console.log(\"maxLength (num) reached:\", condition);\n      }\n\n      if(condition){\n        /**\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\n         */\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n\n    if(typeof maxLength === \"object\"){\n      let condition = currentInput.length === maxLength[options.inputName];\n\n      if(options.debug){\n        console.log(\"maxLength (obj) reached:\", condition);\n      }\n\n      if(condition){\n        this.maxLengthReached = true;\n        return true;\n      } else {\n        this.maxLengthReached = false;\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Gets the current value of maxLengthReached\n   */\n  isMaxLengthReached(){\n    return Boolean(this.maxLengthReached);\n  }\n\n  /**\n   * Transforms an arbitrary string to camelCase\n   * \n   * @param  {string} string The string to transform.\n   */\n  camelCase(string){\n    return string.toLowerCase().trim().split(/[.\\-_\\s]/g).reduce((string, word) => string + word[0].toUpperCase() + word.slice(1));\n  };\n\n  /**\n   * Counts the number of duplicates in a given array\n   * \n   * @param  {Array} array The haystack to search in\n   * @param  {string} value The needle to search for\n   */\n  countInArray(array, value){\n    return array.reduce((n, x) => n + (x === value), 0);\n  }\n\n}\n\nexport default Utilities;","import './Keyboard.css';\n\n// Services\nimport PhysicalKeyboard from '../services/PhysicalKeyboard';\nimport KeyboardLayout from '../services/KeyboardLayout';\nimport Utilities from '../services/Utilities';\n\n/**\n * Root class for simple-keyboard\n * This class:\n * - Parses the options\n * - Renders the rows and buttons\n * - Handles button functionality\n */\nclass SimpleKeyboard {\n  /**\n   * Creates an instance of SimpleKeyboard\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\n   */\n  constructor(...params){\n    let keyboardDOMQuery = typeof params[0] === \"string\" ? params[0] : '.simple-keyboard';\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\n\n    if(!options)\n      options = {};\n\n    /**\n     * Initializing Utilities\n     */\n    this.utilities = new Utilities(this);\n\n    /**\n     * Processing options\n     */\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\n\n    /**\n     * @type {object}\n     * @property {object} layout Modify the keyboard layout.\n     * @property {string} layoutName Specifies which layout should be used.\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have. \n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\n     */\n    this.options = options;\n    this.options.layoutName = this.options.layoutName || \"default\";\n    this.options.theme = this.options.theme || \"hg-theme-default\";\n    this.options.inputName = this.options.inputName || \"default\";\n\n    /**\n     * @type {object} Classes identifying loaded plugins\n     */\n    this.keyboardPluginClasses = '';\n\n    /**\n     * Bindings\n     */\n    this.handleButtonClicked = this.handleButtonClicked.bind(this);\n    this.syncInstanceInputs = this.syncInstanceInputs.bind(this);\n    this.clearInput = this.clearInput.bind(this);\n    this.getInput = this.getInput.bind(this);\n    this.setInput = this.setInput.bind(this);\n    this.replaceInput = this.replaceInput.bind(this);\n    this.clear = this.clear.bind(this);\n    this.dispatch = this.dispatch.bind(this);\n    this.addButtonTheme = this.addButtonTheme.bind(this);\n    this.removeButtonTheme = this.removeButtonTheme.bind(this);\n    this.getButtonElement = this.getButtonElement.bind(this);\n    this.handleCaret = this.handleCaret.bind(this);\n    this.caretEventHandler = this.caretEventHandler.bind(this);\n    this.onInit = this.onInit.bind(this);\n    this.onRender = this.onRender.bind(this);\n    this.render = this.render.bind(this);\n    this.loadModules = this.loadModules.bind(this);\n    this.handleButtonMouseUp = this.handleButtonMouseUp.bind(this);\n    this.handleButtonMouseDown = this.handleButtonMouseDown.bind(this);\n    this.handleButtonHold = this.handleButtonHold.bind(this);\n    this.onModulesLoaded = this.onModulesLoaded.bind(this);\n\n    /**\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\n     * @example\n     * // To get entered input\n     * let input = keyboard.getInput();\n     * \n     * // To clear entered input.\n     * keyboard.clearInput();\n     * \n     * @type {object}\n     * @property {object} default Default SimpleKeyboard internal input.\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\n     */\n    this.input = {};\n    this.input[this.options.inputName] = '';\n\n    /**\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\n     */\n    this.keyboardDOMClass = keyboardDOMQuery.split('.').join(\"\");\n\n    /**\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\n     */\n    this.buttonElements = {};\n\n    /**\n     * Rendering keyboard\n     */\n    if(this.keyboardDOM)\n      this.render();\n    else {\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\n    }\n\n    /**\n     * Saving instance\n     * This enables multiple simple-keyboard support with easier management\n     */\n    if(!window['SimpleKeyboardInstances'])\n      window['SimpleKeyboardInstances'] = {};\n      \n    window['SimpleKeyboardInstances'][this.utilities.camelCase(this.keyboardDOMClass)] = this;\n\n    /**\n     * Physical Keyboard support\n     */\n    this.physicalKeyboardInterface = new PhysicalKeyboard(this);\n\n    /**\n     * Modules\n     */\n    this.modules = {};\n    this.loadModules();\n  }\n\n  /**\n   * Handles clicks made to keyboard buttons\n   * @param  {string} button The button's layout name.\n   */\n  handleButtonClicked(button){\n    let debug = this.options.debug;\n\n    /**\n     * Ignoring placeholder buttons\n     */\n    if(button === '{//}')\n      return false;\n\n    /**\n     * Calling onKeyPress\n     */\n    if(typeof this.options.onKeyPress === \"function\")\n      this.options.onKeyPress(button);\n    \n    if(!this.input[this.options.inputName])\n      this.input[this.options.inputName] = '';\n\n    let updatedInput = this.utilities.getUpdatedInput(\n      button, this.input[this.options.inputName], this.options, this.caretPosition\n    );\n\n    if(this.input[this.options.inputName] !== updatedInput){\n\n      /**\n       * If maxLength and handleMaxLength yield true, halting\n       */\n      if(this.options.maxLength && this.utilities.handleMaxLength(this.input, this.options, updatedInput)){\n        return false;\n      }\n\n      this.input[this.options.inputName]  = this.utilities.getUpdatedInput(\n        button, this.input[this.options.inputName], this.options, this.caretPosition, true\n      );\n\n      if(debug)\n        console.log('Input changed:', this.input);\n\n      /**\n       * Enforce syncInstanceInputs, if set\n       */\n      if(this.options.syncInstanceInputs)\n        this.syncInstanceInputs(this.input);\n\n      /**\n       * Calling onChange\n       */\n      if(typeof this.options.onChange === \"function\")\n        this.options.onChange(this.input[this.options.inputName]);\n    }\n    \n    if(debug){\n      console.log(\"Key pressed:\", button);\n    }\n  }\n\n  /**\n   * Handles button mousedown\n   */\n  /* istanbul ignore next */\n  handleButtonMouseDown(button, e){\n    /**\n     * @type {boolean} Whether the mouse is being held onKeyPress\n     */\n    this.isMouseHold = true;\n\n    if(this.holdInteractionTimeout)\n      clearTimeout(this.holdInteractionTimeout);\n\n    if(this.holdTimeout)\n      clearTimeout(this.holdTimeout);\n\n    /**\n     * @type {object} Time to wait until a key hold is detected\n     */\n    this.holdTimeout = setTimeout(() => {\n      if(\n        this.isMouseHold  &&\n        (\n          (!button.includes(\"{\") && !button.includes(\"}\")) ||\n          button === \"{bksp}\" ||\n          button === \"{space}\" ||\n          button === \"{tab}\"\n        )\n      ){\n        if(this.options.debug)\n          console.log(\"Button held:\", button);\n\n        this.handleButtonHold(button, e);\n      }\n      clearTimeout(this.holdTimeout);\n    }, 500);\n  }\n\n  /**\n   * Handles button mouseup\n   */\n  handleButtonMouseUp(){\n    this.isMouseHold = false;\n    if(this.holdInteractionTimeout)\n      clearTimeout(this.holdInteractionTimeout);\n  }\n\n  /**\n   * Handles button hold\n   */\n  /* istanbul ignore next */\n  handleButtonHold(button){\n    if(this.holdInteractionTimeout)\n      clearTimeout(this.holdInteractionTimeout);\n\n    /**\n     * @type {object} Timeout dictating the speed of key hold iterations\n     */\n    this.holdInteractionTimeout = setTimeout(() => {\n      if(this.isMouseHold){\n        this.handleButtonClicked(button);\n        this.handleButtonHold(button);\n      } else {\n        clearTimeout(this.holdInteractionTimeout);\n      }\n    }, 100);\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances (if you have several instances).\n   */\n  syncInstanceInputs(){\n    this.dispatch((instance) => {\n      instance.replaceInput(this.input);\n    });\n  }\n  \n  /**\n   * Clear the keyboard’s input.\n   * @param {string} [inputName] optional - the internal input to select\n   */\n  clearInput(inputName){\n    inputName = inputName || this.options.inputName;\n    this.input[this.options.inputName] = '';\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if(this.options.syncInstanceInputs)\n      this.syncInstanceInputs(this.input);\n  }\n\n  /**\n   * Get the keyboard’s input (You can also get it from the onChange prop).\n   * @param  {string} [inputName] optional - the internal input to select\n   */\n  getInput(inputName){\n    inputName = inputName || this.options.inputName;\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if(this.options.syncInstanceInputs)\n      this.syncInstanceInputs(this.input);\n\n    return this.input[this.options.inputName];\n  }\n\n  /**\n   * Set the keyboard’s input.\n   * @param  {string} input the input value\n   * @param  {string} inputName optional - the internal input to select\n   */\n  setInput(input, inputName){\n    inputName = inputName || this.options.inputName;\n    this.input[inputName] = input;\n\n    /**\n     * Enforce syncInstanceInputs, if set\n     */\n    if(this.options.syncInstanceInputs)\n      this.syncInstanceInputs(this.input);\n  }\n  \n  /**\n   * Replace the input object (`keyboard.input`)\n   * @param  {object} inputObj The input object\n   */\n  replaceInput(inputObj){\n    this.input = inputObj;\n  }\n\n  /**\n   * Set new option or modify existing ones after initialization. \n   * @param  {object} option The option to set\n   */\n  setOptions = option => {\n    option = option || {};\n    this.options = Object.assign(this.options, option);\n    this.render();\n  }\n\n  /**\n   * Remove all keyboard rows and reset keyboard values.\n   * Used interally between re-renders.\n   */\n  clear(){\n    this.keyboardDOM.innerHTML = '';\n    this.keyboardDOM.className = this.keyboardDOMClass;\n    this.buttonElements = {};\n  }\n\n  /**\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\n   */\n  dispatch(callback){\n    if(!window['SimpleKeyboardInstances']){\n      console.warn(`SimpleKeyboardInstances is not defined. Dispatch cannot be called.`);\n      throw new Error(\"INSTANCES_VAR_ERROR\");\n    }\n    \n    return Object.keys(window['SimpleKeyboardInstances']).forEach((key) => {\n      callback(window['SimpleKeyboardInstances'][key], key);\n    })\n  }\n\n  /**\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  addButtonTheme(buttons, className){\n    if(!className || !buttons)\n      return false;\n\n    buttons.split(\" \").forEach(button => {\n      className.split(\" \").forEach(classNameItem => {\n        if(!this.options.buttonTheme)\n          this.options.buttonTheme = [];\n\n        let classNameFound = false;\n  \n        /**\n         * If class is already defined, we add button to class definition\n         */\n        this.options.buttonTheme.map(buttonTheme => {\n\n          if(buttonTheme.class.split(\" \").includes(classNameItem)){\n            classNameFound = true;\n            \n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\n            if(!buttonThemeArray.includes(button)){\n              classNameFound = true;\n              buttonThemeArray.push(button);\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\n            }\n          }\n          return buttonTheme;\n        });\n\n        /**\n         * If class is not defined, we create a new entry\n         */\n        if(!classNameFound){\n          this.options.buttonTheme.push({\n            class: classNameItem,\n            buttons: buttons\n          });\n        }\n\n      });\n    });\n\n    this.render();\n  }\n\n  /**\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\n   * @param  {string} buttons List of buttons to select (separated by a space).\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\n   */\n  removeButtonTheme(buttons, className){\n    /**\n     * When called with empty parameters, remove all button themes\n     */\n    if(!buttons && !className){\n      this.options.buttonTheme = [];\n      this.render();\n      return false;\n    }\n\n    /**\n     * If buttons are passed and buttonTheme has items\n     */\n    if(buttons && Array.isArray(this.options.buttonTheme) && this.options.buttonTheme.length){\n      let buttonArray = buttons.split(\" \");\n      buttonArray.forEach((button, key) => {\n        this.options.buttonTheme.map((buttonTheme, index) => {\n\n          /**\n           * If className is set, we affect the buttons only for that class\n           * Otherwise, we afect all classes\n           */\n          if(\n            (className && className.includes(buttonTheme.class)) ||\n            !className\n          ){\n            let filteredButtonArray = buttonTheme.buttons.split(\" \").filter(item => item !== button);\n\n            /**\n             * If buttons left, return them, otherwise, remove button Theme\n             */\n            if(filteredButtonArray.length){\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\n            } else {\n              this.options.buttonTheme.splice(index, 1);\n              buttonTheme = null;\n            }\n \n          }\n\n          return buttonTheme;\n        });\n      });\n\n      this.render();\n    }\n  }\n\n  /**\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\n   * @param  {string} button The button layout name to select\n   */\n  getButtonElement(button){\n    let output;\n\n    let buttonArr = this.buttonElements[button];\n    if(buttonArr){\n      if(buttonArr.length > 1){\n        output = buttonArr;\n      } else {\n        output = buttonArr[0];\n      }\n    }\n\n    return output;\n  }\n\n  /**\n   * Retrieves the current cursor position within a input or textarea (if any)\n   */\n  handleCaret(){\n    if(this.options.debug){\n      console.log(\"Caret handling started\");\n    }\n\n    document.addEventListener(\"keyup\", this.caretEventHandler);\n    document.addEventListener(\"mouseup\", this.caretEventHandler);\n    document.addEventListener(\"touchend\", this.caretEventHandler);\n  }\n\n  /**\n   * Called by {@link handleCaret} when an event that warrants a cursor position update is triggered\n   */\n  caretEventHandler(event){\n    let targetTagName;\n\n    if(event.target.tagName){\n      targetTagName = event.target.tagName.toLowerCase();\n    }\n\n    if(\n      (targetTagName === \"textarea\" ||\n      targetTagName === \"input\") &&\n      !this.options.disableCaretPositioning\n    ){\n      /**\n       * Tracks current cursor position\n       * As keys are pressed, text will be added/removed at that position within the input.\n       */\n      this.caretPosition = event.target.selectionStart;\n\n      if(this.options.debug){\n        console.log('Caret at: ', event.target.selectionStart, event.target.tagName.toLowerCase());\n      }     \n    }\n  }\n\n  /**\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\n   */\n  onInit(){\n    if(this.options.debug){\n      console.log(\"Initialized\");\n    }\n\n    /**\n     * Caret handling\n     */\n    this.handleCaret();\n\n    if(typeof this.options.onInit === \"function\")\n      this.options.onInit();\n  }\n\n  /**\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\n   */\n  onRender(){\n    if(typeof this.options.onRender === \"function\")\n      this.options.onRender();\n  }\n\n /**\n  * Executes the callback function once all modules have been loaded\n  */\n  onModulesLoaded(){\n    if(typeof this.options.onModulesLoaded === \"function\")\n      this.options.onModulesLoaded();\n  }\n\n  /**\n   * Register module\n   */\n  registerModule = (name, initCallback) => {\n    if(!this.modules[name])\n      this.modules[name] = {};\n\n    initCallback(this.modules[name]);\n  }\n\n  /**\n   * Load modules\n   */\n  loadModules(){\n    if(Array.isArray(this.options.modules)){\n      this.options.modules.forEach(Module => {\n        let module = new Module();\n\n        /* istanbul ignore next */\n        if(module.constructor.name && module.constructor.name !== \"Function\"){\n          let classStr = `module-${this.utilities.camelCase(module.constructor.name)}`;\n          this.keyboardPluginClasses = this.keyboardPluginClasses + ` ${classStr}`;\n        }\n\n        module.init(this);\n      });\n\n      this.keyboardPluginClasses = this.keyboardPluginClasses + ' modules-loaded';\n\n      this.render();\n      this.onModulesLoaded();\n    }\n  }\n\n  /**\n   * Get module prop\n   */\n  getModuleProp = (name, prop) => {\n    if(!this.modules[name])\n      return false;\n    \n    return this.modules[name][prop];\n  }\n\n  /**\n   * getModulesList\n   */\n  getModulesList = () => {\n    return Object.keys(this.modules);\n  }\n\n  /**\n   * Renders rows and buttons as per options\n   */\n  render(){\n    /**\n     * Clear keyboard\n     */\n    this.clear();\n\n    let layoutClass = this.options.layout ? \"hg-layout-custom\" : `hg-layout-${this.options.layoutName}`;\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\n    let useTouchEvents = this.options.useTouchEvents || false\n\n    /**\n     * Account for buttonTheme, if set\n     */\n    let buttonThemesParsed = {};\n    if(Array.isArray(this.options.buttonTheme)){\n      this.options.buttonTheme.forEach(themeObj => {\n        if(themeObj.buttons && themeObj.class){\n          let themeButtons;\n\n          if(typeof themeObj.buttons === \"string\"){\n            themeButtons = themeObj.buttons.split(' ');\n          }\n\n          if(themeButtons){\n            themeButtons.forEach(themeButton => {\n              let themeParsed = buttonThemesParsed[themeButton];\n\n              // If the button has already been added\n              if(themeParsed){\n                // Making sure we don't add duplicate classes, even when buttonTheme has duplicates\n                if(!this.utilities.countInArray(themeParsed.split(\" \"), themeObj.class)){\n                  buttonThemesParsed[themeButton] = `${themeParsed} ${themeObj.class}`;\n                }\n              } else {\n                buttonThemesParsed[themeButton] = themeObj.class;\n              }\n            });\n          }\n        } else {\n          console.warn(`buttonTheme row is missing the \"buttons\" or the \"class\". Please check the documentation.`)\n        }\n      });\n    }\n\n    /**\n     * Adding themeClass, layoutClass to keyboardDOM\n     */\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass} ${this.keyboardPluginClasses}`;\n\n    /**\n     * Iterating through each row\n     */\n    layout[this.options.layoutName].forEach((row, rIndex) => {\n      let rowArray = row.split(' ');\n\n      /**\n       * Creating empty row\n       */\n      var rowDOM = document.createElement('div');\n      rowDOM.className += \"hg-row\";\n\n      /**\n       * Iterating through each button in row\n       */\n      rowArray.forEach((button, bIndex) => {\n        let fctBtnClass = this.utilities.getButtonClass(button);\n        let buttonThemeClass = buttonThemesParsed[button];\n        let buttonDisplayName = this.utilities.getButtonDisplayName(button, this.options.display, this.options.mergeDisplay);\n\n        /**\n         * Creating button\n         */\n        var buttonDOM = document.createElement('div');\n        buttonDOM.className += `hg-button ${fctBtnClass}${buttonThemeClass ? \" \"+buttonThemeClass : \"\"}`;\n        \n        if (useTouchEvents) {\n          buttonDOM.ontouchstart = (e) => {\n            this.handleButtonClicked(button);\n            this.handleButtonMouseDown(button, e);\n          }\n          buttonDOM.ontouchend = e => this.handleButtonMouseUp();\n          buttonDOM.ontouchcancel = e => this.handleButtonMouseUp();\n        } else {\n          buttonDOM.onclick = () => {\n            this.isMouseHold = false;\n            this.handleButtonClicked(button);\n          }\n          buttonDOM.onmousedown = (e) => this.handleButtonMouseDown(button, e);\n        }\n        \n        /**\n         * Adding identifier\n         */\n        buttonDOM.setAttribute(\"data-skBtn\", button);\n\n        /**\n         * Adding unique id\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\n         */\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\n\n        /**\n         * Adding display label\n         */\n        buttonDOM.setAttribute(\"data-displayLabel\", buttonDisplayName);\n\n        /**\n         * Adding button label to button\n         */\n        var buttonSpanDOM = document.createElement('span');\n        buttonSpanDOM.innerHTML = buttonDisplayName;\n        buttonDOM.appendChild(buttonSpanDOM);\n\n        /**\n         * Adding to buttonElements\n         */\n        if(!this.buttonElements[button])\n          this.buttonElements[button] = [];\n\n        this.buttonElements[button].push(buttonDOM);\n\n        /**\n         * Appending button to row\n         */\n        rowDOM.appendChild(buttonDOM);\n\n      });\n\n      /**\n       * Appending row to keyboard\n       */\n      this.keyboardDOM.appendChild(rowDOM);\n    });\n\n    /**\n     * Calling onRender\n     */\n    this.onRender();\n\n    /**\n     * Handling mouseup\n     */\n    if (!useTouchEvents) {\n      document.onmouseup = () => this.handleButtonMouseUp();\n    }\n\n    if(!this.initialized){\n      /**\n       * Ensures that onInit is only called once per instantiation\n       */\n      this.initialized = true;\n\n      /**\n       * Calling onInit\n       */\n      this.onInit();\n    }\n  }\n}\n\nexport default SimpleKeyboard;\n","import SimpleKeyboard from './components/Keyboard';\nexport default SimpleKeyboard;\n"],"sourceRoot":""}