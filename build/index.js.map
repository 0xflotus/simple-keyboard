{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/Utilities.js","services/PhysicalKeyboard.js","services/KeyboardLayout.js","components/Keyboard.js","index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utilities","getOptions","getCaretPosition","dispatch","this","bindMethods","myClass","instance","getOwnPropertyNames","myMethod","button","buttonTypeClass","includes","buttonWithoutBraces","replace","buttonNormalized","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","options","output","length","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","minus","newCaretPos","updateCaretPosAction","caretPosition","debug","console","log","keyboardDOMClass","source","string","position","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","Boolean","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","PhysicalKeyboard","event","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","getButtonElement","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","code","KeyboardLayout","default","shift","SimpleKeyboard","initCallback","keyboardDOMQuery","utilities","keyboardDOM","document","querySelector","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","buttonElements","camelCase","allKeyboardInstances","currentInstanceName","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","warn","Error","render","loadModules","onKeyPress","getUpdatedInput","inputPattern","inputPatternIsValid","handleMaxLength","syncInstanceInputs","onChange","onChangeAll","e","preventDefault","stopMouseDownPropagation","stopPropagation","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","disableButtonHold","setTimeout","handleButtonHold","onKeyReleased","handleButtonClicked","replaceInput","onSetOptions","innerHTML","className","callback","forEach","buttons","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","Array","isArray","index","filteredButtonArray","filter","item","splice","buttonArr","inputVal","inputPatternRaw","RegExp","didInputMatch","test","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","targetTagName","target","tagName","disableCaretPositioning","selectionStart","removeEventListener","clear","buttonClasses","themeObj","themeObjClasses","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","classList","contains","autoUseTouchEvents","useTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","Module","constructor","classStr","init","prop","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","createElement","containerUID","setAttribute","containedElements","element","appendChild","initialized","layoutClass","layout","getDefaultLayout","useTouchEventsClass","disableRowButtonContainers","row","rIndex","rowArray","bIndex","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","buttonType","useButtonTag","add","getButtonThemeClasses","setDOMButtonAttributes","ontouchstart","handleButtonMouseDown","ontouchend","handleButtonMouseUp","ontouchcancel","onclick","onmousedown","onmouseup","onpointerdown","onpointerup","onpointercancel","buttonUID","buttonSpanDOM","parseRowDOMContainers"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, dispatch }) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button) {\r\n    let buttonTypeClass =\r\n      button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\r\n        ? \"functionBtn\"\r\n        : \"standardBtn\";\r\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\"\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button, input, caretPos, moveCaret) {\r\n    let options = this.getOptions();\r\n    let output = input;\r\n\r\n    if (\r\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeAt(output, caretPos, moveCaret);\r\n    } else if (button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\r\n    else if (\r\n      button === \"{tab}\" &&\r\n      !(\r\n        typeof options.tabCharOnTab === \"boolean\" &&\r\n        options.tabCharOnTab === false\r\n      )\r\n    ) {\r\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\r\n    } else if (\r\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\r\n      options.newLineOnEnter\r\n    )\r\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\r\n    else if (\r\n      button.includes(\"numpad\") &&\r\n      Number.isInteger(Number(button[button.length - 2]))\r\n    ) {\r\n      output = this.addStringAt(\r\n        output,\r\n        button[button.length - 2],\r\n        caretPos,\r\n        moveCaret\r\n      );\r\n    } else if (button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, \"/\", caretPos, moveCaret);\r\n    else if (button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, \"*\", caretPos, moveCaret);\r\n    else if (button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, \"-\", caretPos, moveCaret);\r\n    else if (button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, \"+\", caretPos, moveCaret);\r\n    else if (button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, \".\", caretPos, moveCaret);\r\n    else if (button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus) {\r\n    let newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch(instance => {\r\n      instance.caretPosition = newCaretPos;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length, minus) {\r\n    let options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (minus) {\r\n      if (caretPosition > 0) caretPosition = caretPosition - length;\r\n    } else {\r\n      caretPosition = caretPosition + length;\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition, `(${this.keyboardDOMClass})`);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source, string, position, moveCaret) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + string;\r\n    } else {\r\n      output = [source.slice(0, position), string, source.slice(position)].join(\r\n        \"\"\r\n      );\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(string.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source, position, moveCaret) {\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n    let prevTwoChars;\r\n    let emojiMatched;\r\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n    /**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */\r\n    if (position && position >= 0) {\r\n      prevTwoChars = source.substring(position - 2, position);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position - 2) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.substr(0, position - 1) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    } else {\r\n      prevTwoChars = source.slice(-2);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.slice(0, -2);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.slice(0, -1);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, updatedInput) {\r\n    let options = this.getOptions();\r\n    let maxLength = options.maxLength;\r\n    let currentInput = inputObj[options.inputName];\r\n    let condition = currentInput.length === maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      let condition = currentInput.length === maxLength[options.inputName];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass, instance) {\r\n    for (let myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      let excludeMethod =\r\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} string The string to transform.\r\n   */\r\n  camelCase(string) {\r\n    if (!string) return false;\r\n\r\n    return string\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((string, word) =>\r\n        word.length ? string + word[0].toUpperCase() + word.slice(1) : string\r\n      );\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(event) {\r\n    let options = this.getOptions();\r\n    let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      let buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM) {\r\n        buttonDOM.style.backgroundColor =\r\n          options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\r\n        buttonDOM.style.color =\r\n          options.physicalKeyboardHighlightTextColor || \"white\";\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(event) {\r\n    let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      let buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM && buttonDOM.removeAttribute) {\r\n        buttonDOM.removeAttribute(\"style\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event) {\r\n    let output;\r\n\r\n    if (\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ) {\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" &&\r\n        Number.isInteger(Number(event.code[1])) &&\r\n        event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","/**\r\n * Keyboard Layout Service\r\n */\r\nclass KeyboardLayout {\r\n  /**\r\n   * Get default simple-keyboard layout\r\n   * @return {object} The default layout (US-QWERTY)\r\n   */\r\n  static getDefaultLayout() {\r\n    return {\r\n      default: [\r\n        \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n        \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n        \"{lock} a s d f g h j k l ; ' {enter}\",\r\n        \"{shift} z x c v b n m , . / {shift}\",\r\n        \".com @ {space}\"\r\n      ],\r\n      shift: [\r\n        \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n        \"{tab} Q W E R T Y U I O P { } |\",\r\n        '{lock} A S D F G H J K L : \" {enter}',\r\n        \"{shift} Z X C V B N M < > ? {shift}\",\r\n        \".com @ {space}\"\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport default KeyboardLayout;\r\n","import \"./Keyboard.css\";\r\n\r\n// Services\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport KeyboardLayout from \"../services/KeyboardLayout\";\r\nimport Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params) {\r\n    let keyboardDOMQuery =\r\n      typeof params[0] === \"string\" ? params[0] : \".simple-keyboard\";\r\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\r\n\r\n    if (!options) options = {};\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      dispatch: this.dispatch\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {Array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n    this.options.preventMouseDownDefault =\r\n      this.options.preventMouseDownDefault || false;\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * let input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMQuery.split(\".\").join(\"\");\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!window[\"SimpleKeyboardInstances\"])\r\n      window[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    window[\"SimpleKeyboardInstances\"][\r\n      this.utilities.camelCase(this.keyboardDOMClass)\r\n    ] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = window[\"SimpleKeyboardInstances\"];\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    this.keyboardInstanceNames = Object.keys(window[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance =\r\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions\r\n    });\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = () => this.options;\r\n  getCaretPosition = () => this.caretPosition;\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button) {\r\n    let debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n\r\n    if (!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = \"\";\r\n\r\n    let updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[this.options.inputName],\r\n      this.caretPosition\r\n    );\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[this.options.inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (\r\n        this.options.maxLength &&\r\n        this.utilities.handleMaxLength(this.input, updatedInput)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName] = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[this.options.inputName],\r\n        this.caretPosition,\r\n        true\r\n      );\r\n\r\n      if (debug) console.log(\"Input changed:\", this.input);\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.input[this.options.inputName]);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\")\r\n        this.options.onChangeAll(this.input);\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button, e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n    if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.isMouseHold = true;\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = setTimeout(() => {\r\n        if (\r\n          this.isMouseHold &&\r\n          ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n            button === \"{delete}\" ||\r\n            button === \"{backspace}\" ||\r\n            button === \"{bksp}\" ||\r\n            button === \"{space}\" ||\r\n            button === \"{tab}\")\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button, e);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button) {\r\n    this.isMouseHold = false;\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === \"function\")\r\n      this.options.onKeyReleased(button);\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button) {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = setTimeout(() => {\r\n      if (this.isMouseHold) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs() {\r\n    this.dispatch(instance => {\r\n      instance.replaceInput(this.input);\r\n      instance.caretPosition = this.caretPosition;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.caretPosition = 0;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n    return this.input[inputName];\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj) {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options) {\r\n    options = options || {};\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    /**\r\n     * Some option changes require adjustments before re-render\r\n     */\r\n    this.onSetOptions(options);\r\n\r\n    /**\r\n     * Rendering\r\n     */\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(options) {\r\n    if (options.inputName) {\r\n      /**\r\n       * inputName changed. This requires a caretPosition reset\r\n       */\r\n      if (this.options.debug) {\r\n        console.log(\"inputName changed. caretPosition reset.\");\r\n      }\r\n\r\n      this.caretPosition = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used interally between re-renders.\r\n   */\r\n  clear() {\r\n    this.keyboardDOM.innerHTML = \"\";\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback) {\r\n    if (!window[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(\r\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\r\n      );\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach(key => {\r\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className) {\r\n    if (!className || !buttons) return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n          if (buttonTheme.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className) {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (\r\n      buttons &&\r\n      Array.isArray(this.options.buttonTheme) &&\r\n      this.options.buttonTheme.length\r\n    ) {\r\n      let buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button, key) => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if (\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ) {\r\n            let filteredButtonArray = buttonTheme.buttons\r\n              .split(\" \")\r\n              .filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (filteredButtonArray.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button) {\r\n    let output;\r\n\r\n    let buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal) {\r\n    let inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      let didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `inputPattern (\"${inputPattern}\"): ${\r\n            didInputMatch ? \"passed\" : \"did not pass!\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners() {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      /**\r\n       * Event Listeners\r\n       */\r\n      document.addEventListener(\"keyup\", this.handleKeyUp);\r\n      document.addEventListener(\"keydown\", this.handleKeyDown);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event) {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event) {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  handleTouchEnd(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event) {\r\n    let targetTagName;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch(instance => {\r\n      if (instance.isMouseHold) {\r\n        instance.isMouseHold = false;\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" || targetTagName === \"input\") &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        instance.caretPosition = event.target.selectionStart;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            event.target.selectionStart,\r\n            event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`\r\n          );\r\n        }\r\n      } else if (instance.options.disableCaretPositioning) {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.caretPosition = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy() {\r\n    /**\r\n     * Remove listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\r\n\r\n    /**\r\n     * Clear DOM\r\n     */\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button) {\r\n    let buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach(themeObj => {\r\n        if (\r\n          themeObj.class &&\r\n          typeof themeObj.class === \"string\" &&\r\n          (themeObj.buttons && typeof themeObj.buttons === \"string\")\r\n        ) {\r\n          let themeObjClasses = themeObj.class.split(\" \");\r\n          let themeObjButtons = themeObj.buttons.split(\" \");\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonTheme\". Please check the documentation.`,\r\n            themeObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button, callback) {\r\n    let buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach(attrObj => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === \"string\" &&\r\n          (attrObj.value && typeof attrObj.value === \"string\") &&\r\n          (attrObj.buttons && typeof attrObj.buttons === \"string\")\r\n        ) {\r\n          let attrObjButtons = attrObj.buttons.split(\" \");\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonAttributes\". Please check the documentation.`,\r\n            attrObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = event => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\")\r\n      this.options.beforeFirstRender();\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\")\r\n      this.options.beforeRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\")\r\n      this.options.onModulesLoaded();\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach(Module => {\r\n        let module = new Module();\r\n\r\n        /* istanbul ignore next */\r\n        if (module.constructor.name && module.constructor.name !== \"Function\") {\r\n          let classStr = `module-${this.utilities.camelCase(\r\n            module.constructor.name\r\n          )}`;\r\n          this.keyboardPluginClasses =\r\n            this.keyboardPluginClasses + ` ${classStr}`;\r\n        }\r\n\r\n        module.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses =\r\n        this.keyboardPluginClasses + \" modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name, prop) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM,\r\n    rowIndex,\r\n    containerStartIndexes,\r\n    containerEndIndexes\r\n  ) {\r\n    let rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        let endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        let updated_startIndex = startIndex - removedElements;\r\n        let updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        let containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        let containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        let containedElements = rowDOMArray.splice(\r\n          updated_startIndex,\r\n          updated_endIndex - updated_startIndex + 1\r\n        );\r\n        removedElements = updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach(element => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach(element => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\r\n            \"rowDOMContainer\",\r\n            containedElements,\r\n            updated_startIndex,\r\n            updated_endIndex,\r\n            removedElements + 1\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    let layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\r\n    let useTouchEvents = this.options.useTouchEvents || false;\r\n    let useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    let useMouseEvents = this.options.useMouseEvents || false;\r\n    let disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass} ${this.keyboardPluginClasses} ${useTouchEventsClass}`;\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      let rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      let containerStartIndexes = [];\r\n      let containerEndIndexes = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        let buttonHasContainerStart =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"[\") &&\r\n          button.length > 1;\r\n        let buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"]\") &&\r\n          button.length > 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        let fctBtnClass = this.utilities.getButtonClass(button);\r\n        let buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        let buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        let buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute, value) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (\r\n          this.utilities.pointerEventsSupported() &&\r\n          !useTouchEvents &&\r\n          !useMouseEvents\r\n        ) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = e => {\r\n            this.handleButtonClicked(button);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = () => this.handleButtonMouseUp(button);\r\n          buttonDOM.onpointercancel = () => this.handleButtonMouseUp(button);\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = e => {\r\n              this.handleButtonClicked(button);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = () => this.handleButtonMouseUp(button);\r\n            buttonDOM.ontouchcancel = () => this.handleButtonMouseUp(button);\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = () => {\r\n              this.isMouseHold = false;\r\n              this.handleButtonClicked(button);\r\n            };\r\n            buttonDOM.onmousedown = e => this.handleButtonMouseDown(button, e);\r\n            buttonDOM.onmouseup = () => this.handleButtonMouseUp(button);\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        let buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(\r\n        rowDOM,\r\n        rIndex,\r\n        containerStartIndexes,\r\n        containerEndIndexes\r\n      );\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling onpointerup\r\n       */\r\n      /* istanbul ignore next */\r\n      if (\r\n        this.utilities.pointerEventsSupported() &&\r\n        !useTouchEvents &&\r\n        !useMouseEvents\r\n      ) {\r\n        document.onpointerup = () => this.handleButtonMouseUp();\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = () => this.handleButtonMouseUp();\r\n        document.ontouchcancel = () => this.handleButtonMouseUp();\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = () => this.handleButtonMouseUp();\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport default SimpleKeyboard;\r\n"],"sourceRoot":""}