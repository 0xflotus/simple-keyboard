{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/Utilities.js","services/PhysicalKeyboard.js","services/KeyboardLayout.js","components/Keyboard.js","index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utilities","_ref","getOptions","getCaretPosition","dispatch","_classCallCheck","this","bindMethods","myClass","instance","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","getOwnPropertyNames","iterator","next","done","myMethod","err","return","button","buttonTypeClass","includes","buttonWithoutBraces","replace","buttonNormalized","concat","{bksp}","{backspace}","{enter}","{shift}","{shiftleft}","{shiftright}","{alt}","{s}","{tab}","{lock}","{capslock}","{accept}","{space}","{//}","{esc}","{escape}","{f1}","{f2}","{f3}","{f4}","{f5}","{f6}","{f7}","{f8}","{f9}","{f10}","{f11}","{f12}","{numpaddivide}","{numlock}","{arrowup}","{arrowleft}","{arrowdown}","{arrowright}","{prtscr}","{scrolllock}","{pause}","{insert}","{home}","{pageup}","{delete}","{end}","{pagedown}","{numpadmultiply}","{numpadsubtract}","{numpadadd}","{numpadenter}","{period}","{numpaddecimal}","{numpad0}","{numpad1}","{numpad2}","{numpad3}","{numpad4}","{numpad5}","{numpad6}","{numpad7}","{numpad8}","{numpad9}","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","options","output","length","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","minus","newCaretPos","updateCaretPosAction","caretPosition","debug","console","log","keyboardDOMClass","source","string","position","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","PhysicalKeyboard","PhysicalKeyboard_classCallCheck","event","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","getButtonElement","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","code","KeyboardLayout","default","shift","SimpleKeyboard","_this","Keyboard_classCallCheck","registerModule","initCallback","keyboardDOMQuery","arguments","Keyboard_typeof","utilities","keyboardDOM","document","querySelector","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","buttonElements","camelCase","allKeyboardInstances","currentInstanceName","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","warn","Error","render","loadModules","onKeyPress","getUpdatedInput","inputPattern","inputPatternIsValid","handleMaxLength","syncInstanceInputs","onChange","onChangeAll","e","_this2","preventDefault","stopMouseDownPropagation","stopPropagation","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","disableButtonHold","setTimeout","handleButtonHold","onKeyReleased","_this3","handleButtonClicked","_this4","replaceInput","onSetOptions","innerHTML","className","callback","forEach","buttons","_this5","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","_this6","Array","isArray","index","filteredButtonArray","filter","item","splice","buttonArr","inputVal","inputPatternRaw","RegExp","didInputMatch","test","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","targetTagName","target","tagName","disableCaretPositioning","selectionStart","removeEventListener","clear","buttonClasses","themeObj","themeObjClasses","_toConsumableArray","buttonAttributes","attrObj","attribute","processAutoTouchEvents","disableContextualWindow","oncontextmenu","classList","contains","autoUseTouchEvents","useTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this7","Module","constructor","classStr","init","prop","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","_this8","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","createElement","containerUID","setAttribute","containedElements","element","appendChild","_this9","initialized","layoutClass","layout","getDefaultLayout","useTouchEventsClass","disableRowButtonContainers","row","rIndex","rowArray","bIndex","_buttonDOM$classList","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonDisplayName","getButtonDisplayName","buttonType","useButtonTag","add","apply","getButtonThemeClasses","setDOMButtonAttributes","ontouchstart","handleButtonMouseDown","ontouchend","handleButtonMouseUp","ontouchcancel","onclick","onmousedown","onmouseup","onpointerdown","onpointerup","onpointercancel","buttonUID","buttonSpanDOM","parseRowDOMContainers"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, dispatch }) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button) {\r\n    let buttonTypeClass =\r\n      button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\r\n        ? \"functionBtn\"\r\n        : \"standardBtn\";\r\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\"\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button, input, caretPos, moveCaret) {\r\n    let options = this.getOptions();\r\n    let output = input;\r\n\r\n    if (\r\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeAt(output, caretPos, moveCaret);\r\n    } else if (button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\r\n    else if (\r\n      button === \"{tab}\" &&\r\n      !(\r\n        typeof options.tabCharOnTab === \"boolean\" &&\r\n        options.tabCharOnTab === false\r\n      )\r\n    ) {\r\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\r\n    } else if (\r\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\r\n      options.newLineOnEnter\r\n    )\r\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\r\n    else if (\r\n      button.includes(\"numpad\") &&\r\n      Number.isInteger(Number(button[button.length - 2]))\r\n    ) {\r\n      output = this.addStringAt(\r\n        output,\r\n        button[button.length - 2],\r\n        caretPos,\r\n        moveCaret\r\n      );\r\n    } else if (button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, \"/\", caretPos, moveCaret);\r\n    else if (button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, \"*\", caretPos, moveCaret);\r\n    else if (button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, \"-\", caretPos, moveCaret);\r\n    else if (button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, \"+\", caretPos, moveCaret);\r\n    else if (button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, \".\", caretPos, moveCaret);\r\n    else if (button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus) {\r\n    let newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch(instance => {\r\n      instance.caretPosition = newCaretPos;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length, minus) {\r\n    let options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (minus) {\r\n      if (caretPosition > 0) caretPosition = caretPosition - length;\r\n    } else {\r\n      caretPosition = caretPosition + length;\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition, `(${this.keyboardDOMClass})`);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source, string, position, moveCaret) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + string;\r\n    } else {\r\n      output = [source.slice(0, position), string, source.slice(position)].join(\r\n        \"\"\r\n      );\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(string.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source, position, moveCaret) {\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n    let prevTwoChars;\r\n    let emojiMatched;\r\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n    /**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */\r\n    if (position && position >= 0) {\r\n      prevTwoChars = source.substring(position - 2, position);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position - 2) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.substr(0, position - 1) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    } else {\r\n      prevTwoChars = source.slice(-2);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.slice(0, -2);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.slice(0, -1);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, updatedInput) {\r\n    let options = this.getOptions();\r\n    let maxLength = options.maxLength;\r\n    let currentInput = inputObj[options.inputName];\r\n    let condition = currentInput.length === maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      let condition = currentInput.length === maxLength[options.inputName];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass, instance) {\r\n    for (let myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      let excludeMethod =\r\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} string The string to transform.\r\n   */\r\n  camelCase(string) {\r\n    if (!string) return false;\r\n\r\n    return string\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((string, word) =>\r\n        word.length ? string + word[0].toUpperCase() + word.slice(1) : string\r\n      );\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(event) {\r\n    let options = this.getOptions();\r\n    let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      let buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM) {\r\n        buttonDOM.style.backgroundColor =\r\n          options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\r\n        buttonDOM.style.color =\r\n          options.physicalKeyboardHighlightTextColor || \"white\";\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(event) {\r\n    let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      let buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM && buttonDOM.removeAttribute) {\r\n        buttonDOM.removeAttribute(\"style\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event) {\r\n    let output;\r\n\r\n    if (\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ) {\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" &&\r\n        Number.isInteger(Number(event.code[1])) &&\r\n        event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","/**\r\n * Keyboard Layout Service\r\n */\r\nclass KeyboardLayout {\r\n  /**\r\n   * Get default simple-keyboard layout\r\n   * @return {object} The default layout (US-QWERTY)\r\n   */\r\n  static getDefaultLayout() {\r\n    return {\r\n      default: [\r\n        \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n        \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n        \"{lock} a s d f g h j k l ; ' {enter}\",\r\n        \"{shift} z x c v b n m , . / {shift}\",\r\n        \".com @ {space}\"\r\n      ],\r\n      shift: [\r\n        \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n        \"{tab} Q W E R T Y U I O P { } |\",\r\n        '{lock} A S D F G H J K L : \" {enter}',\r\n        \"{shift} Z X C V B N M < > ? {shift}\",\r\n        \".com @ {space}\"\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport default KeyboardLayout;\r\n","import \"./Keyboard.css\";\r\n\r\n// Services\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport KeyboardLayout from \"../services/KeyboardLayout\";\r\nimport Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionality\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params) {\r\n    let keyboardDOMQuery =\r\n      typeof params[0] === \"string\" ? params[0] : \".simple-keyboard\";\r\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\r\n\r\n    if (!options) options = {};\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      dispatch: this.dispatch\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {Array} buttonAttributes A prop to add your own attributes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n    this.options.preventMouseDownDefault =\r\n      this.options.preventMouseDownDefault || false;\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * let input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMQuery.split(\".\").join(\"\");\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!window[\"SimpleKeyboardInstances\"])\r\n      window[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    window[\"SimpleKeyboardInstances\"][\r\n      this.utilities.camelCase(this.keyboardDOMClass)\r\n    ] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = window[\"SimpleKeyboardInstances\"];\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    this.keyboardInstanceNames = Object.keys(window[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance =\r\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions\r\n    });\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = () => this.options;\r\n  getCaretPosition = () => this.caretPosition;\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button) {\r\n    let debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n\r\n    if (!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = \"\";\r\n\r\n    let updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[this.options.inputName],\r\n      this.caretPosition\r\n    );\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[this.options.inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (\r\n        this.options.maxLength &&\r\n        this.utilities.handleMaxLength(this.input, updatedInput)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName] = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[this.options.inputName],\r\n        this.caretPosition,\r\n        true\r\n      );\r\n\r\n      if (debug) console.log(\"Input changed:\", this.input);\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.input[this.options.inputName]);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\")\r\n        this.options.onChangeAll(this.input);\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button, e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n    if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.isMouseHold = true;\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = setTimeout(() => {\r\n        if (\r\n          this.isMouseHold &&\r\n          ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n            button === \"{delete}\" ||\r\n            button === \"{backspace}\" ||\r\n            button === \"{bksp}\" ||\r\n            button === \"{space}\" ||\r\n            button === \"{tab}\")\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button, e);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp(button) {\r\n    this.isMouseHold = false;\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (button && typeof this.options.onKeyReleased === \"function\")\r\n      this.options.onKeyReleased(button);\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button) {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = setTimeout(() => {\r\n      if (this.isMouseHold) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs() {\r\n    this.dispatch(instance => {\r\n      instance.replaceInput(this.input);\r\n      instance.caretPosition = this.caretPosition;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.caretPosition = 0;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n    return this.input[inputName];\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj) {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options) {\r\n    options = options || {};\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    /**\r\n     * Some option changes require adjustments before re-render\r\n     */\r\n    this.onSetOptions(options);\r\n\r\n    /**\r\n     * Rendering\r\n     */\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(options) {\r\n    if (options.inputName) {\r\n      /**\r\n       * inputName changed. This requires a caretPosition reset\r\n       */\r\n      if (this.options.debug) {\r\n        console.log(\"inputName changed. caretPosition reset.\");\r\n      }\r\n\r\n      this.caretPosition = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used interally between re-renders.\r\n   */\r\n  clear() {\r\n    this.keyboardDOM.innerHTML = \"\";\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback) {\r\n    if (!window[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(\r\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\r\n      );\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach(key => {\r\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className) {\r\n    if (!className || !buttons) return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n          if (buttonTheme.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className) {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (\r\n      buttons &&\r\n      Array.isArray(this.options.buttonTheme) &&\r\n      this.options.buttonTheme.length\r\n    ) {\r\n      let buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button, key) => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if (\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ) {\r\n            let filteredButtonArray = buttonTheme.buttons\r\n              .split(\" \")\r\n              .filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (filteredButtonArray.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button) {\r\n    let output;\r\n\r\n    let buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal) {\r\n    let inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      let didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `inputPattern (\"${inputPattern}\"): ${\r\n            didInputMatch ? \"passed\" : \"did not pass!\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners() {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      /**\r\n       * Event Listeners\r\n       */\r\n      document.addEventListener(\"keyup\", this.handleKeyUp);\r\n      document.addEventListener(\"keydown\", this.handleKeyDown);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event) {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event) {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  handleTouchEnd(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link setEventListeners} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event) {\r\n    let targetTagName;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch(instance => {\r\n      if (instance.isMouseHold) {\r\n        instance.isMouseHold = false;\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" || targetTagName === \"input\") &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        instance.caretPosition = event.target.selectionStart;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            event.target.selectionStart,\r\n            event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`\r\n          );\r\n        }\r\n      } else if (instance.options.disableCaretPositioning) {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.caretPosition = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy() {\r\n    /**\r\n     * Remove listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\r\n\r\n    /**\r\n     * Clear DOM\r\n     */\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonThemeClasses(button) {\r\n    let buttonTheme = this.options.buttonTheme;\r\n    let buttonClasses = [];\r\n\r\n    if (Array.isArray(buttonTheme)) {\r\n      buttonTheme.forEach(themeObj => {\r\n        if (\r\n          themeObj.class &&\r\n          typeof themeObj.class === \"string\" &&\r\n          (themeObj.buttons && typeof themeObj.buttons === \"string\")\r\n        ) {\r\n          let themeObjClasses = themeObj.class.split(\" \");\r\n          let themeObjButtons = themeObj.buttons.split(\" \");\r\n\r\n          if (themeObjButtons.includes(button)) {\r\n            buttonClasses = [...buttonClasses, ...themeObjClasses];\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonTheme\". Please check the documentation.`,\r\n            themeObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return buttonClasses;\r\n  }\r\n\r\n  /**\r\n   * Process buttonAttributes option\r\n   */\r\n  setDOMButtonAttributes(button, callback) {\r\n    let buttonAttributes = this.options.buttonAttributes;\r\n\r\n    if (Array.isArray(buttonAttributes)) {\r\n      buttonAttributes.forEach(attrObj => {\r\n        if (\r\n          attrObj.attribute &&\r\n          typeof attrObj.attribute === \"string\" &&\r\n          (attrObj.value && typeof attrObj.value === \"string\") &&\r\n          (attrObj.buttons && typeof attrObj.buttons === \"string\")\r\n        ) {\r\n          let attrObjButtons = attrObj.buttons.split(\" \");\r\n\r\n          if (attrObjButtons.includes(button)) {\r\n            callback(attrObj.attribute, attrObj.value);\r\n          }\r\n        } else {\r\n          console.warn(\r\n            `Incorrect \"buttonAttributes\". Please check the documentation.`,\r\n            attrObj\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = event => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\")\r\n      this.options.beforeFirstRender();\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\")\r\n      this.options.beforeRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\")\r\n      this.options.onModulesLoaded();\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach(Module => {\r\n        let module = new Module();\r\n\r\n        /* istanbul ignore next */\r\n        if (module.constructor.name && module.constructor.name !== \"Function\") {\r\n          let classStr = `module-${this.utilities.camelCase(\r\n            module.constructor.name\r\n          )}`;\r\n          this.keyboardPluginClasses =\r\n            this.keyboardPluginClasses + ` ${classStr}`;\r\n        }\r\n\r\n        module.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses =\r\n        this.keyboardPluginClasses + \" modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name, prop) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM,\r\n    rowIndex,\r\n    containerStartIndexes,\r\n    containerEndIndexes\r\n  ) {\r\n    let rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        let endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        let updated_startIndex = startIndex - removedElements;\r\n        let updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        let containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        let containerUID = `${this.options.layoutName}-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        let containedElements = rowDOMArray.splice(\r\n          updated_startIndex,\r\n          updated_endIndex - updated_startIndex + 1\r\n        );\r\n        removedElements = updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach(element => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach(element => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\r\n            \"rowDOMContainer\",\r\n            containedElements,\r\n            updated_startIndex,\r\n            updated_endIndex,\r\n            removedElements + 1\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    let layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\r\n    let useTouchEvents = this.options.useTouchEvents || false;\r\n    let useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    let useMouseEvents = this.options.useMouseEvents || false;\r\n    let disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass} ${this.keyboardPluginClasses} ${useTouchEventsClass}`;\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      let rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      let containerStartIndexes = [];\r\n      let containerEndIndexes = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        let buttonHasContainerStart =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"[\") &&\r\n          button.length > 1;\r\n        let buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"]\") &&\r\n          button.length > 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        let fctBtnClass = this.utilities.getButtonClass(button);\r\n        let buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        let buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        let buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}`;\r\n\r\n        /**\r\n         * Adding buttonTheme\r\n         */\r\n        buttonDOM.classList.add(...this.getButtonThemeClasses(button));\r\n\r\n        /**\r\n         * Adding buttonAttributes\r\n         */\r\n        this.setDOMButtonAttributes(button, (attribute, value) => {\r\n          buttonDOM.setAttribute(attribute, value);\r\n        });\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (\r\n          this.utilities.pointerEventsSupported() &&\r\n          !useTouchEvents &&\r\n          !useMouseEvents\r\n        ) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = e => {\r\n            this.handleButtonClicked(button);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = () => this.handleButtonMouseUp(button);\r\n          buttonDOM.onpointercancel = () => this.handleButtonMouseUp(button);\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = e => {\r\n              this.handleButtonClicked(button);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = () => this.handleButtonMouseUp(button);\r\n            buttonDOM.ontouchcancel = () => this.handleButtonMouseUp(button);\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = () => {\r\n              this.isMouseHold = false;\r\n              this.handleButtonClicked(button);\r\n            };\r\n            buttonDOM.onmousedown = e => this.handleButtonMouseDown(button, e);\r\n            buttonDOM.onmouseup = () => this.handleButtonMouseUp(button);\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        let buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(\r\n        rowDOM,\r\n        rIndex,\r\n        containerStartIndexes,\r\n        containerEndIndexes\r\n      );\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling onpointerup\r\n       */\r\n      /* istanbul ignore next */\r\n      if (\r\n        this.utilities.pointerEventsSupported() &&\r\n        !useTouchEvents &&\r\n        !useMouseEvents\r\n      ) {\r\n        document.onpointerup = () => this.handleButtonMouseUp();\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = () => this.handleButtonMouseUp();\r\n        document.ontouchcancel = () => this.handleButtonMouseUp();\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = () => this.handleButtonMouseUp();\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport default SimpleKeyboard;\r\n"],"sourceRoot":""}
