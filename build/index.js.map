{"version":3,"sources":["../../webpack/universalModuleDefinition","../../webpack/bootstrap","services/Utilities.js","services/PhysicalKeyboard.js","services/KeyboardLayout.js","components/Keyboard.js","index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Utilities","_ref","getOptions","getCaretPosition","dispatch","_classCallCheck","this","bindMethods","myClass","instance","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","getOwnPropertyNames","iterator","next","done","myMethod","err","return","button","buttonTypeClass","includes","buttonWithoutBraces","replace","buttonNormalized","concat","{bksp}","{backspace}","{enter}","{shift}","{shiftleft}","{shiftright}","{alt}","{s}","{tab}","{lock}","{capslock}","{accept}","{space}","{//}","{esc}","{escape}","{f1}","{f2}","{f3}","{f4}","{f5}","{f6}","{f7}","{f8}","{f9}","{f10}","{f11}","{f12}","{numpaddivide}","{numlock}","{arrowup}","{arrowleft}","{arrowdown}","{arrowright}","{prtscr}","{scrolllock}","{pause}","{insert}","{home}","{pageup}","{delete}","{end}","{pagedown}","{numpadmultiply}","{numpadsubtract}","{numpadadd}","{numpadenter}","{period}","{numpaddecimal}","{numpad0}","{numpad1}","{numpad2}","{numpad3}","{numpad4}","{numpad5}","{numpad6}","{numpad7}","{numpad8}","{numpad9}","display","mergeDisplay","assign","getDefaultDiplay","input","caretPos","moveCaret","options","output","length","removeAt","addStringAt","tabCharOnTab","newLineOnEnter","Number","isInteger","minus","newCaretPos","updateCaretPosAction","caretPosition","debug","console","log","keyboardDOMClass","source","string","position","slice","join","isMaxLengthReached","updateCaretPos","emojiMatchedReg","substring","match","substr","inputObj","updatedInput","maxLength","currentInput","inputName","condition","maxLengthReached","_typeof","Boolean","navigator","maxTouchPoints","PointerEvent","toLowerCase","trim","split","reduce","word","toUpperCase","array","x","PhysicalKeyboard","PhysicalKeyboard_classCallCheck","event","buttonPressed","getSimpleKeyboardLayoutKey","buttonDOM","getButtonElement","style","backgroundColor","physicalKeyboardHighlightBgColor","color","physicalKeyboardHighlightTextColor","removeAttribute","code","KeyboardLayout","default","shift","SimpleKeyboard","_this","Keyboard_classCallCheck","registerModule","initCallback","keyboardDOMQuery","arguments","Keyboard_typeof","utilities","keyboardDOM","document","querySelector","layoutName","theme","preventMouseDownDefault","keyboardPluginClasses","buttonElements","camelCase","allKeyboardInstances","currentInstanceName","keyboardInstanceNames","keys","isFirstKeyboardInstance","physicalKeyboard","warn","Error","render","loadModules","onKeyPress","getUpdatedInput","inputPattern","inputPatternIsValid","handleMaxLength","syncInstanceInputs","onChange","onChangeAll","e","_this2","preventDefault","stopMouseDownPropagation","stopPropagation","isMouseHold","holdInteractionTimeout","clearTimeout","holdTimeout","disableButtonHold","setTimeout","handleButtonHold","onKeyReleased","_this3","handleButtonClicked","_this4","replaceInput","onSetOptions","innerHTML","className","callback","forEach","buttons","_this5","classNameItem","buttonTheme","classNameFound","map","class","buttonThemeArray","push","_this6","Array","isArray","index","filteredButtonArray","filter","item","splice","buttonArr","inputVal","inputPatternRaw","RegExp","didInputMatch","test","addEventListener","handleKeyUp","handleKeyDown","handleMouseUp","handleTouchEnd","caretEventHandler","physicalKeyboardHighlight","handleHighlightKeyUp","handleHighlightKeyDown","targetTagName","target","tagName","disableCaretPositioning","selectionStart","removeEventListener","clear","_this7","buttonThemesParsed","themeObj","themeButtons","themeButton","themeParsed","countInArray","processAutoTouchEvents","disableContextualWindow","oncontextmenu","classList","contains","autoUseTouchEvents","useTouchEvents","setEventListeners","onInit","isTouchDevice","onTouchDeviceDetected","beforeFirstRender","pointerEventsSupported","useMouseEvents","beforeRender","onRender","onModulesLoaded","_this8","Module","constructor","classStr","init","prop","rowDOM","rowIndex","containerStartIndexes","containerEndIndexes","_this9","rowDOMArray","from","children","removedElements","startIndex","arrIndex","endIndex","updated_startIndex","updated_endIndex","containerDOM","createElement","containerUID","setAttribute","containedElements","element","appendChild","_this10","initialized","layoutClass","layout","getDefaultLayout","useTouchEventsClass","disableRowButtonContainers","getButtonTheme","row","rIndex","rowArray","bIndex","buttonHasContainerStart","buttonHasContainerEnd","fctBtnClass","getButtonClass","buttonThemeClass","buttonDisplayName","getButtonDisplayName","buttonType","useButtonTag","ontouchstart","handleButtonMouseDown","ontouchend","handleButtonMouseUp","ontouchcancel","onclick","onmousedown","onpointerdown","onpointerup","onpointercancel","buttonUID","buttonSpanDOM","parseRowDOMContainers","onmouseup"],"mappings":";;;;;;;;;;;CAAA,SAAAA,EAAAC,GACA,kBAAAC,SAAA,kBAAAC,OACAA,OAAAD,QAAAD,IACA,oBAAAG,eAAAC,IACAD,OAAA,oBAAAH,GACA,kBAAAC,QACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,IARA,CASCK,OAAA,WACD,mBCTA,IAAAC,EAAA,GAGA,SAAAC,EAAAC,GAGA,GAAAF,EAAAE,GACA,OAAAF,EAAAE,GAAAP,QAGA,IAAAC,EAAAI,EAAAE,GAAA,CACAC,EAAAD,EACAE,GAAA,EACAT,QAAA,IAUA,OANAU,EAAAH,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAQ,GAAA,EAGAR,EAAAD,QA0DA,OArDAM,EAAAM,EAAAF,EAGAJ,EAAAO,EAAAR,EAGAC,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,EAAA,CAA0CK,YAAA,EAAAC,IAAAL,KAK1CV,EAAAgB,EAAA,SAAAtB,GACA,qBAAAuB,eAAAC,aACAN,OAAAC,eAAAnB,EAAAuB,OAAAC,YAAA,CAAwDC,MAAA,WAExDP,OAAAC,eAAAnB,EAAA,cAAiDyB,OAAA,KAQjDnB,EAAAoB,EAAA,SAAAD,EAAAE,GAEA,GADA,EAAAA,IAAAF,EAAAnB,EAAAmB,IACA,EAAAE,EAAA,OAAAF,EACA,KAAAE,GAAA,kBAAAF,QAAAG,WAAA,OAAAH,EACA,IAAAI,EAAAX,OAAAY,OAAA,MAGA,GAFAxB,EAAAgB,EAAAO,GACAX,OAAAC,eAAAU,EAAA,WAAyCT,YAAA,EAAAK,UACzC,EAAAE,GAAA,iBAAAF,EAAA,QAAAM,KAAAN,EAAAnB,EAAAQ,EAAAe,EAAAE,EAAA,SAAAA,GAAgH,OAAAN,EAAAM,IAAqBC,KAAA,KAAAD,IACrI,OAAAF,GAIAvB,EAAA2B,EAAA,SAAAhC,GACA,IAAAe,EAAAf,KAAA2B,WACA,WAA2B,OAAA3B,EAAA,SAC3B,WAAiC,OAAAA,GAEjC,OADAK,EAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAiB,EAAAC,GAAsD,OAAAjB,OAAAkB,UAAAC,eAAA1B,KAAAuB,EAAAC,IAGtD7B,EAAAgC,EAAA,GAIAhC,IAAAiC,EAAA,kfC6UeC,aAxZb,SAAAA,EAAAC,GAAwD,IAA1CC,EAA0CD,EAA1CC,WAAYC,EAA8BF,EAA9BE,iBAAkBC,EAAYH,EAAZG,sGAAYC,CAAAC,KAAAN,GACtDM,KAAKJ,WAAaA,EAClBI,KAAKH,iBAAmBA,EACxBG,KAAKF,SAAWA,EAKhBJ,EAAUO,YAAYP,EAAWM,gEA0WhBE,EAASC,GAAU,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACpC,QAAAC,EAAAC,EAAqBrC,OAAOsC,oBAAoBR,EAAQZ,WAAxDb,OAAAkC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAoE,KAA3DU,EAA2DN,EAAA7B,MAEnD,gBAAbmC,GAA2C,gBAAbA,IAE9BX,EAASW,GAAYX,EAASW,GAAU5B,KAAKiB,KALb,MAAAY,GAAAV,GAAA,EAAAC,EAAAS,EAAA,YAAAX,GAAA,MAAAK,EAAAO,QAAAP,EAAAO,SAAA,WAAAX,EAAA,MAAAC,gDAjWvBW,GACb,IAAIC,EACFD,EAAOE,SAAS,MAAQF,EAAOE,SAAS,MAAmB,SAAXF,EAC5C,cACA,cACFG,EAAsBH,EAAOI,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAC3DC,EAAmB,GAKvB,MAHwB,gBAApBJ,IACFI,EAAgB,cAAAC,OAAiBH,IAEnC,MAAAG,OAAaL,GAAbK,OAA+BD,8CAO/B,MAAO,CACLE,SAAU,YACVC,cAAe,YACfC,UAAW,UACXC,UAAW,QACXC,cAAe,QACfC,eAAgB,QAChBC,QAAS,MACTC,MAAO,QACPC,QAAS,MACTC,SAAU,OACVC,aAAc,OACdC,WAAY,SACZC,UAAW,IACXC,OAAQ,IACRC,QAAS,MACTC,WAAY,MACZC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,OAAQ,KACRC,QAAS,MACTC,QAAS,MACTC,QAAS,MACTC,iBAAkB,IAClBC,YAAa,OACbC,YAAa,SACbC,cAAe,SACfC,cAAe,SACfC,eAAgB,SAChBC,WAAY,QACZC,eAAgB,SAChBC,UAAW,QACXC,WAAY,MACZC,SAAU,OACVC,WAAY,KACZC,WAAY,MACZC,QAAS,MACTC,aAAc,OACdC,mBAAoB,IACpBC,mBAAoB,IACpBC,cAAe,IACfC,gBAAiB,QACjBC,WAAY,IACZC,kBAAmB,IACnBC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,IACbC,YAAa,kDAUIjE,EAAQkE,EAASC,GAOpC,OALED,EADEC,EACQhH,OAAOiH,OAAO,GAAIrF,KAAKsF,mBAAoBH,GAE3CA,GAAWnF,KAAKsF,oBAGbrE,IAAWA,0CAWZA,EAAQsE,EAAOC,EAAUC,GACvC,IAAIC,EAAU1F,KAAKJ,aACf+F,EAASJ,EA+Cb,OA5Cc,WAAXtE,GAAkC,gBAAXA,IACxB0E,EAAOC,OAAS,EAEhBD,EAAS3F,KAAK6F,SAASF,EAAQH,EAAUC,GACrB,YAAXxE,EACT0E,EAAS3F,KAAK8F,YAAYH,EAAQ,IAAKH,EAAUC,GAEtC,UAAXxE,GAEkC,mBAAzByE,EAAQK,eACU,IAAzBL,EAAQK,aAKE,YAAX9E,GAAmC,kBAAXA,IACzByE,EAAQM,eAIR/E,EAAOE,SAAS,WAChB8E,OAAOC,UAAUD,OAAOhF,EAAOA,EAAO2E,OAAS,KAE/CD,EAAS3F,KAAK8F,YACZH,EACA1E,EAAOA,EAAO2E,OAAS,GACvBJ,EACAC,GAEkB,mBAAXxE,EACT0E,EAAS3F,KAAK8F,YAAYH,EAAQ,IAAKH,EAAUC,GAC/B,qBAAXxE,EACP0E,EAAS3F,KAAK8F,YAAYH,EAAQ,IAAKH,EAAUC,GAC/B,qBAAXxE,EACP0E,EAAS3F,KAAK8F,YAAYH,EAAQ,IAAKH,EAAUC,GAC/B,gBAAXxE,EACP0E,EAAS3F,KAAK8F,YAAYH,EAAQ,IAAKH,EAAUC,GAC/B,oBAAXxE,EACP0E,EAAS3F,KAAK8F,YAAYH,EAAQ,IAAKH,EAAUC,GAC/B,MAAXxE,GAA6B,MAAXA,EACzB0E,EAAS3F,KAAK8F,YAAYH,EAAQ1E,EAAQuE,EAAUC,GAC5CxE,EAAOE,SAAS,MAASF,EAAOE,SAAS,OACjDwE,EAAS3F,KAAK8F,YAAYH,EAAQ1E,EAAQuE,EAAUC,IAxBpDE,EAAS3F,KAAK8F,YAAYH,EAAQ,KAAMH,EAAUC,GALlDE,EAAS3F,KAAK8F,YAAYH,EAAQ,KAAMH,EAAUC,GA+B7CE,yCASMC,EAAQO,GACrB,IAAIC,EAAcpG,KAAKqG,qBAAqBT,EAAQO,GAEpDnG,KAAKF,SAAS,SAAAK,GACZA,EAASmG,cAAgBF,iDAURR,EAAQO,GAC3B,IAAIT,EAAU1F,KAAKJ,aACf0G,EAAgBtG,KAAKH,mBAYzB,OAVIsG,EACEG,EAAgB,IAAGA,GAAgCV,GAEvDU,GAAgCV,EAG9BF,EAAQa,OACVC,QAAQC,IAAI,YAAaH,EAAzB,IAAA/E,OAA4CvB,KAAK0G,iBAAjD,MAGKJ,sCAWGK,EAAQC,EAAQC,EAAUpB,GACpC,IAAIE,EAiBJ,OAfKkB,GAAyB,IAAbA,GAGflB,EAAS,CAACgB,EAAOG,MAAM,EAAGD,GAAWD,EAAQD,EAAOG,MAAMD,IAAWE,KACnE,IAMG/G,KAAKgH,sBACJvB,GAAWzF,KAAKiH,eAAeL,EAAOhB,SAV5CD,EAASgB,EAASC,EAcbjB,mCAUAgB,EAAQE,EAAUpB,GACzB,IAMIE,EAJJ,GAAsB,IAFF3F,KAAKH,mBAGvB,OAAO8G,EAMT,IAAIO,EAAkB,oCA8BtB,OAxBIL,GAAYA,GAAY,EACXF,EAAOQ,UAAUN,EAAW,EAAGA,GAClBO,MAAMF,IAGhCvB,EAASgB,EAAOU,OAAO,EAAGR,EAAW,GAAKF,EAAOU,OAAOR,GACpDpB,GAAWzF,KAAKiH,eAAe,GAAG,KAEtCtB,EAASgB,EAAOU,OAAO,EAAGR,EAAW,GAAKF,EAAOU,OAAOR,GACpDpB,GAAWzF,KAAKiH,eAAe,GAAG,IAGzBN,EAAOG,OAAO,GACDM,MAAMF,IAGhCvB,EAASgB,EAAOG,MAAM,GAAI,GACtBrB,GAAWzF,KAAKiH,eAAe,GAAG,KAEtCtB,EAASgB,EAAOG,MAAM,GAAI,GACtBrB,GAAWzF,KAAKiH,eAAe,GAAG,IAInCtB,0CAQO2B,EAAUC,GACxB,IAAI7B,EAAU1F,KAAKJ,aACf4H,EAAY9B,EAAQ8B,UACpBC,EAAeH,EAAS5B,EAAQgC,WAChCC,EAAYF,EAAa7B,SAAW4B,EAExC,GAKED,EAAa3B,QAAU6B,EAAa7B,OAEpC,OAAO,EAGT,GAAIK,OAAOC,UAAUsB,GAKnB,OAJI9B,EAAQa,OACVC,QAAQC,IAAI,2BAA4BkB,GAGtCA,GAIF3H,KAAK4H,kBAAmB,GACjB,IAEP5H,KAAK4H,kBAAmB,GACjB,GAIX,GAAyB,WAArBC,EAAOL,GAAwB,CACjC,IAAIG,EAAYF,EAAa7B,SAAW4B,EAAU9B,EAAQgC,WAM1D,OAJIhC,EAAQa,OACVC,QAAQC,IAAI,2BAA4BkB,GAGtCA,GACF3H,KAAK4H,kBAAmB,GACjB,IAEP5H,KAAK4H,kBAAmB,GACjB,iDASX,OAAOE,QAAQ9H,KAAK4H,0DAOpB,MAAO,iBAAkBtK,QAAUyK,UAAUC,gEAO7C,OAAO1K,OAAO2K,+CAsBNrB,GACR,QAAKA,GAEEA,EACJsB,cACAC,OACAC,MAAM,aACNC,OAAO,SAACzB,EAAQ0B,GAAT,OACNA,EAAK1C,OAASgB,EAAS0B,EAAK,GAAGC,cAAgBD,EAAKxB,MAAM,GAAKF,yCAUxD4B,EAAO7J,GAClB,OAAO6J,EAAMH,OAAO,SAAClJ,EAAGsJ,GAAJ,OAAUtJ,GAAKsJ,IAAM9J,IAAQ,kNChUtC+J,aAlFb,SAAAA,EAAA/I,GAAsC,IAAxBG,EAAwBH,EAAxBG,SAAUF,EAAcD,EAAdC,wGAAc+I,CAAA3I,KAAA0I,GAIpC1I,KAAKF,SAAWA,EAChBE,KAAKJ,WAAaA,EAKlBF,EAAUO,YAAYyI,EAAkB1I,4EAGnB4I,GACrB,IAAIlD,EAAU1F,KAAKJ,aACfiJ,EAAgB7I,KAAK8I,2BAA2BF,GAEpD5I,KAAKF,SAAS,SAAAK,GACZ,IAAI4I,EACF5I,EAAS6I,iBAAiBH,IAC1B1I,EAAS6I,iBAAT,IAAAzH,OAA8BsH,EAA9B,MAEEE,IACFA,EAAUE,MAAMC,gBACdxD,EAAQyD,kCAAoC,UAC9CJ,EAAUE,MAAMG,MACd1D,EAAQ2D,oCAAsC,wDAKjCT,GACnB,IAAIC,EAAgB7I,KAAK8I,2BAA2BF,GAEpD5I,KAAKF,SAAS,SAAAK,GACZ,IAAI4I,EACF5I,EAAS6I,iBAAiBH,IAC1B1I,EAAS6I,iBAAT,IAAAzH,OAA8BsH,EAA9B,MAEEE,GAAaA,EAAUO,iBACzBP,EAAUO,gBAAgB,8DASLV,GACzB,IAAIjD,EA4BJ,QAjBEA,EARAiD,EAAMW,KAAKpI,SAAS,WACpByH,EAAMW,KAAKpI,SAAS,UACpByH,EAAMW,KAAKpI,SAAS,UACpByH,EAAMW,KAAKpI,SAAS,cACpByH,EAAMW,KAAKpI,SAAS,YACpByH,EAAMW,KAAKpI,SAAS,QACpByH,EAAMW,KAAKpI,SAAS,QAEXyH,EAAMW,KAENX,EAAM3J,OAOJ0G,EAAO4C,eACC,MAAlBK,EAAMW,KAAK,IACVtD,OAAOC,UAAUD,OAAO2C,EAAMW,KAAK,MACnCX,EAAMW,KAAK3D,QAAU,KAEvBD,EAASA,EAAOuC,eAGXvC,iNC3DI6D,iMAnBX,MAAO,CACLC,QAAS,CACP,mCACA,mCACA,uCACA,sCACA,kBAEFC,MAAO,CACL,mCACA,kCACA,uCACA,sCACA,kdC2vCOC,aA9vCb,SAAAA,IAAuB,IAAAC,EAAA5J,kGAAA6J,CAAA7J,KAAA2J,GAAA3J,KAuJvBJ,WAAa,kBAAMgK,EAAKlE,SAvJD1F,KAwJvBH,iBAAmB,kBAAM+J,EAAKtD,eAxJPtG,KAk3BvB8J,eAAiB,SAAC7L,EAAM8L,GACjBH,EAAKhM,QAAQK,KAAO2L,EAAKhM,QAAQK,GAAQ,IAE9C8L,EAAaH,EAAKhM,QAAQK,KAp3B1B,IAAI+L,EACmB,kBAArBC,UAAArE,QAAA,OAAArF,EAAA0J,UAAA,IAAAA,UAAArE,QAAA,OAAArF,EAAA0J,UAAA,GAA4C,mBAC1CvE,EAA+B,WAArBwE,EAAAD,UAAArE,QAAA,OAAArF,EAAA0J,UAAA,IAAAA,UAAArE,QAAA,OAAArF,EAAA0J,UAAA,GAAAA,UAAArE,QAAA,OAAArF,EAAA0J,UAAA,GAoId,GAlIKvE,IAASA,EAAU,IAKxB1F,KAAKmK,UAAY,IAAIzK,EAAU,CAC7BE,WAAYI,KAAKJ,WACjBC,iBAAkBG,KAAKH,iBACvBC,SAAUE,KAAKF,WAMjBE,KAAKsG,cAAgB,KAKrBtG,KAAKoK,YAAcC,SAASC,cAAcN,GAoC1ChK,KAAK0F,QAAUA,EACf1F,KAAK0F,QAAQ6E,WAAavK,KAAK0F,QAAQ6E,YAAc,UACrDvK,KAAK0F,QAAQ8E,MAAQxK,KAAK0F,QAAQ8E,OAAS,mBAC3CxK,KAAK0F,QAAQgC,UAAY1H,KAAK0F,QAAQgC,WAAa,UACnD1H,KAAK0F,QAAQ+E,wBACXzK,KAAK0F,QAAQ+E,0BAA2B,EAK1CzK,KAAK0K,sBAAwB,GAK7BhL,EAAUO,YAAY0J,EAAgB3J,MAgBtCA,KAAKuF,MAAQ,GACbvF,KAAKuF,MAAMvF,KAAK0F,QAAQgC,WAAa,GAKrC1H,KAAK0G,iBAAmBsD,EAAiB5B,MAAM,KAAKrB,KAAK,IAKzD/G,KAAK2K,eAAiB,GAMjBrN,OAAM,0BACTA,OAAM,wBAA8B,IAEtCA,OAAM,wBACJ0C,KAAKmK,UAAUS,UAAU5K,KAAK0G,mBAC5B1G,KAKJA,KAAK6K,qBAAuBvN,OAAM,wBAClC0C,KAAK8K,oBAAsB9K,KAAKmK,UAAUS,UAAU5K,KAAK0G,kBACzD1G,KAAK+K,sBAAwB3M,OAAO4M,KAAK1N,OAAM,yBAC/C0C,KAAKiL,wBACHjL,KAAK+K,sBAAsB,KAAO/K,KAAK8K,oBAKzC9K,KAAKkL,iBAAmB,IAAIxC,EAAiB,CAC3C5I,SAAUE,KAAKF,SACfF,WAAYI,KAAKJ,cAMfI,KAAKoK,YAGP,MADA5D,QAAQ2E,KAAR,IAAA5J,OAAiByI,EAAjB,gCACM,IAAIoB,MAAM,sBAHIpL,KAAKqL,SAS3BrL,KAAKpC,QAAU,GACfoC,KAAKsL,iFAaarK,GAClB,IAAIsF,EAAQvG,KAAK0F,QAAQa,MAKzB,GAAe,SAAXtF,EAAmB,OAAO,EAKS,oBAA5BjB,KAAK0F,QAAQ6F,YACtBvL,KAAK0F,QAAQ6F,WAAWtK,GAErBjB,KAAKuF,MAAMvF,KAAK0F,QAAQgC,aAC3B1H,KAAKuF,MAAMvF,KAAK0F,QAAQgC,WAAa,IAEvC,IAAIH,EAAevH,KAAKmK,UAAUqB,gBAChCvK,EACAjB,KAAKuF,MAAMvF,KAAK0F,QAAQgC,WACxB1H,KAAKsG,eAGP,GAEEtG,KAAKuF,MAAMvF,KAAK0F,QAAQgC,aAAeH,KAGrCvH,KAAK0F,QAAQ+F,cAEZzL,KAAK0F,QAAQ+F,cAAgBzL,KAAK0L,oBAAoBnE,IACzD,CAIA,GACEvH,KAAK0F,QAAQ8B,WACbxH,KAAKmK,UAAUwB,gBAAgB3L,KAAKuF,MAAOgC,GAE3C,OAAO,EAGTvH,KAAKuF,MAAMvF,KAAK0F,QAAQgC,WAAa1H,KAAKmK,UAAUqB,gBAClDvK,EACAjB,KAAKuF,MAAMvF,KAAK0F,QAAQgC,WACxB1H,KAAKsG,eACL,GAGEC,GAAOC,QAAQC,IAAI,iBAAkBzG,KAAKuF,OAK1CvF,KAAK0F,QAAQkG,oBAAoB5L,KAAK4L,mBAAmB5L,KAAKuF,OAK7B,oBAA1BvF,KAAK0F,QAAQmG,UACtB7L,KAAK0F,QAAQmG,SAAS7L,KAAKuF,MAAMvF,KAAK0F,QAAQgC,YAKR,oBAA7B1H,KAAK0F,QAAQoG,aACtB9L,KAAK0F,QAAQoG,YAAY9L,KAAKuF,OAG9BgB,GACFC,QAAQC,IAAI,eAAgBxF,iDAQVA,EAAQ8K,GAAG,IAAAC,EAAAhM,KAI3BA,KAAK0F,QAAQ+E,yBAAyBsB,EAAEE,iBACxCjM,KAAK0F,QAAQwG,0BAA0BH,EAAEI,kBAK7CnM,KAAKoM,aAAc,EAEfpM,KAAKqM,wBAAwBC,aAAatM,KAAKqM,wBAE/CrM,KAAKuM,aAAaD,aAAatM,KAAKuM,aAKnCvM,KAAK0F,QAAQ8G,oBAChBxM,KAAKuM,YAAcE,WAAW,YAE1BT,EAAKI,cACFnL,EAAOE,SAAS,MAASF,EAAOE,SAAS,OAC/B,aAAXF,GACW,gBAAXA,GACW,WAAXA,GACW,YAAXA,GACW,UAAXA,IAEE+K,EAAKtG,QAAQa,OAAOC,QAAQC,IAAI,eAAgBxF,GAEpD+K,EAAKU,iBAAiBzL,EAAQ8K,IAEhCO,aAAaN,EAAKO,cACjB,oDAQLvM,KAAKoM,aAAc,EACfpM,KAAKqM,wBAAwBC,aAAatM,KAAKqM,wBAKT,oBAA/BrM,KAAK0F,QAAQiH,eACtB3M,KAAK0F,QAAQiH,yDAOA1L,GAAQ,IAAA2L,EAAA5M,KACnBA,KAAKqM,wBAAwBC,aAAatM,KAAKqM,wBAKnDrM,KAAKqM,uBAAyBI,WAAW,WACnCG,EAAKR,aACPQ,EAAKC,oBAAoB5L,GACzB2L,EAAKF,iBAAiBzL,IAEtBqL,aAAaM,EAAKP,yBAEnB,kDAMgB,IAAAS,EAAA9M,KACnBA,KAAKF,SAAS,SAAAK,GACZA,EAAS4M,aAAaD,EAAKvH,OAC3BpF,EAASmG,cAAgBwG,EAAKxG,mDAQvBoB,GACTA,EAAYA,GAAa1H,KAAK0F,QAAQgC,UACtC1H,KAAKuF,MAAMmC,GAAa,GAKxB1H,KAAKsG,cAAgB,EAKjBtG,KAAK0F,QAAQkG,oBAAoB5L,KAAK4L,mBAAmB5L,KAAKuF,wCAO3DmC,GAQP,OAPAA,EAAYA,GAAa1H,KAAK0F,QAAQgC,UAKlC1H,KAAK0F,QAAQkG,oBAAoB5L,KAAK4L,mBAAmB5L,KAAKuF,OAE3DvF,KAAKuF,MAAMmC,oCAQXnC,EAAOmC,GACdA,EAAYA,GAAa1H,KAAK0F,QAAQgC,UACtC1H,KAAKuF,MAAMmC,GAAanC,EAKpBvF,KAAK0F,QAAQkG,oBAAoB5L,KAAK4L,mBAAmB5L,KAAKuF,4CAOvD+B,GACXtH,KAAKuF,MAAQ+B,qCAOJ5B,GACTA,EAAUA,GAAW,GACrB1F,KAAK0F,QAAUtH,OAAOiH,OAAOrF,KAAK0F,QAASA,GAK3C1F,KAAKgN,aAAatH,GAKlB1F,KAAKqL,8CAOM3F,GACPA,EAAQgC,YAIN1H,KAAK0F,QAAQa,OACfC,QAAQC,IAAI,2CAGdzG,KAAKsG,cAAgB,sCASvBtG,KAAKoK,YAAY6C,UAAY,GAC7BjN,KAAKoK,YAAY8C,UAAYlN,KAAK0G,iBAClC1G,KAAK2K,eAAiB,oCAOfwC,GACP,IAAK7P,OAAM,wBAIT,MAHAkJ,QAAQ2E,KAAR,sEAGM,IAAIC,MAAM,uBAGlB,OAAOhN,OAAO4M,KAAK1N,OAAM,yBAA6B8P,QAAQ,SAAAnO,GAC5DkO,EAAS7P,OAAM,wBAA4B2B,GAAMA,4CAStCoO,EAASH,GAAW,IAAAI,EAAAtN,KACjC,IAAKkN,IAAcG,EAAS,OAAO,EAEnCA,EAAQjF,MAAM,KAAKgF,QAAQ,SAAAnM,GACzBiM,EAAU9E,MAAM,KAAKgF,QAAQ,SAAAG,GACtBD,EAAK5H,QAAQ8H,cAAaF,EAAK5H,QAAQ8H,YAAc,IAE1D,IAAIC,GAAiB,EAKrBH,EAAK5H,QAAQ8H,YAAYE,IAAI,SAAAF,GAC3B,GAAIA,EAAYG,MAAMvF,MAAM,KAAKjH,SAASoM,GAAgB,CACxDE,GAAiB,EAEjB,IAAIG,EAAmBJ,EAAYH,QAAQjF,MAAM,KAC5CwF,EAAiBzM,SAASF,KAC7BwM,GAAiB,EACjBG,EAAiBC,KAAK5M,GACtBuM,EAAYH,QAAUO,EAAiB7G,KAAK,MAGhD,OAAOyG,IAMJC,GACHH,EAAK5H,QAAQ8H,YAAYK,KAAK,CAC5BF,MAAOJ,EACPF,QAASA,QAMjBrN,KAAKqL,mDAQWgC,EAASH,GAAW,IAAAY,EAAA9N,KAIpC,IAAKqN,IAAYH,EAGf,OAFAlN,KAAK0F,QAAQ8H,YAAc,GAC3BxN,KAAKqL,UACE,EAOPgC,GACAU,MAAMC,QAAQhO,KAAK0F,QAAQ8H,cAC3BxN,KAAK0F,QAAQ8H,YAAY5H,SAEPyH,EAAQjF,MAAM,KACpBgF,QAAQ,SAACnM,EAAQhC,GAC3B6O,EAAKpI,QAAQ8H,YAAYE,IAAI,SAACF,EAAaS,GAKzC,GACGf,GAAaA,EAAU/L,SAASqM,EAAYG,SAC5CT,EACD,CACA,IAAIgB,EAAsBV,EAAYH,QACnCjF,MAAM,KACN+F,OAAO,SAAAC,GAAI,OAAIA,IAASnN,IAKvBiN,EAAoBtI,OACtB4H,EAAYH,QAAUa,EAAoBnH,KAAK,MAE/C+G,EAAKpI,QAAQ8H,YAAYa,OAAOJ,EAAO,GACvCT,EAAc,MAIlB,OAAOA,MAIXxN,KAAKqL,mDAQQpK,GACf,IAAI0E,EAEA2I,EAAYtO,KAAK2K,eAAe1J,GASpC,OARIqN,IAEA3I,EADE2I,EAAU1I,OAAS,EACZ0I,EAEAA,EAAU,IAIhB3I,8CAOW4I,GAClB,IACI9C,EADA+C,EAAkBxO,KAAK0F,QAAQ+F,aAYnC,IALEA,EADE+C,aAA2BC,OACdD,EAEAA,EAAgBxO,KAAK0F,QAAQgC,aAG1B6G,EAAU,CAC5B,IAAIG,EAAgBjD,EAAakD,KAAKJ,GAUtC,OARIvO,KAAK0F,QAAQa,OACfC,QAAQC,IAAR,kBAAAlF,OACoBkK,EADpB,QAAAlK,OAEImN,EAAgB,SAAW,kBAK1BA,EAKP,OAAO,+CAWL1O,KAAKiL,yBAA4BjL,KAAK6K,uBACpC7K,KAAK0F,QAAQa,OACfC,QAAQC,IAAR,2BAAAlF,OAAuCvB,KAAK0G,iBAA5C,MAMF2D,SAASuE,iBAAiB,QAAS5O,KAAK6O,aACxCxE,SAASuE,iBAAiB,UAAW5O,KAAK8O,eAC1CzE,SAASuE,iBAAiB,UAAW5O,KAAK+O,eAC1C1E,SAASuE,iBAAiB,WAAY5O,KAAKgP,qDAOnCpG,GACV5I,KAAKiP,kBAAkBrG,GAEnB5I,KAAK0F,QAAQwJ,2BACflP,KAAKkL,iBAAiBiE,qBAAqBvG,yCAOjCA,GACR5I,KAAK0F,QAAQwJ,2BACflP,KAAKkL,iBAAiBkE,uBAAuBxG,yCAOnCA,GACZ5I,KAAKiP,kBAAkBrG,0CAMVA,GACb5I,KAAKiP,kBAAkBrG,6CAMPA,GAChB,IAAIyG,EACAzG,EAAM0G,OAAOC,UACfF,EAAgBzG,EAAM0G,OAAOC,QAAQrH,eAGvClI,KAAKF,SAAS,SAAAK,GACRA,EAASiM,cACXjM,EAASiM,aAAc,GAIJ,aAAlBiD,GAAkD,UAAlBA,GAChClP,EAASuF,QAAQ8J,wBAgBTrP,EAASuF,QAAQ8J,0BAI1BrP,EAASmG,cAAgB,OAdzBnG,EAASmG,cAAgBsC,EAAM0G,OAAOG,eAElCtP,EAASuF,QAAQa,OACnBC,QAAQC,IACN,aACAmC,EAAM0G,OAAOG,eACb7G,EAAM0G,OAAOC,QAAQrH,cAHvB,IAAA3G,OAIMpB,EAASuG,iBAJf,2CAuBN2D,SAASqF,oBAAoB,QAAS1P,KAAK6O,aAC3CxE,SAASqF,oBAAoB,UAAW1P,KAAK8O,eAC7CzE,SAASqF,oBAAoB,UAAW1P,KAAK+O,eAC7C1E,SAASqF,oBAAoB,WAAY1P,KAAKgP,gBAK9ChP,KAAK2P,iDAMU,IAAAC,EAAA5P,KACX6P,EAAqB,GAuCzB,OArCA7P,KAAK0F,QAAQ8H,YAAYJ,QAAQ,SAAA0C,GAE7B,IAAIC,EADFD,EAASzC,SAAWyC,EAASnC,OAGC,kBAArBmC,EAASzC,UAClB0C,EAAeD,EAASzC,QAAQjF,MAAM,MAGpC2H,GACFA,EAAa3C,QAAQ,SAAA4C,GACnB,IAAIC,EAAcJ,EAAmBG,GAGjCC,EAGCL,EAAKzF,UAAU+F,aACdD,EAAY7H,MAAM,KAClB0H,EAASnC,SAGXkC,EAAmBG,GAAnB,GAAAzO,OAAqC0O,EAArC,KAAA1O,OACEuO,EAASnC,QAIbkC,EAAmBG,GAAeF,EAASnC,SAKjDnH,QAAQ2E,KAAR,8FAMG0E,kDAOP7P,KAAKmQ,yBAKLnQ,KAAKoQ,4EAQL9S,OAAO+S,cAAgB,SAAAzH,GACrB,GAAIA,EAAM0G,OAAOgB,UAAUC,SAAS,aAGlC,OAFA3H,EAAMqD,iBACNrD,EAAMuD,mBACC,oDASPnM,KAAK0F,QAAQ8K,qBACfxQ,KAAK0F,QAAQ+K,gBAAiB,EAE1BzQ,KAAK0F,QAAQa,OACfC,QAAQC,IAAR,wGAWAzG,KAAK0F,QAAQa,OACfC,QAAQC,IAAR,GAAAlF,OAAevB,KAAK0G,iBAApB,iBAMF1G,KAAK0Q,oBAE8B,oBAAxB1Q,KAAK0F,QAAQiL,QAAuB3Q,KAAK0F,QAAQiL,qDAUxD3Q,KAAKmK,UAAUyG,iBACjB5Q,KAAK6Q,wBAGuC,oBAAnC7Q,KAAK0F,QAAQoL,mBACtB9Q,KAAK0F,QAAQoL,oBAMb9Q,KAAKiL,yBACLjL,KAAKmK,UAAU4G,2BACd/Q,KAAK0F,QAAQ+K,iBACbzQ,KAAK0F,QAAQsL,gBAEVhR,KAAK0F,QAAQa,OACfC,QAAQC,IAAI,0DAOZzG,KAAK0F,QAAQ+K,gBACXzQ,KAAK0F,QAAQa,OACfC,QAAQC,IACN,2GAUmC,oBAA9BzG,KAAK0F,QAAQuL,cACtBjR,KAAK0F,QAAQuL,kDAOsB,oBAA1BjR,KAAK0F,QAAQwL,UAAyBlR,KAAK0F,QAAQwL,qDAOlB,oBAAjClR,KAAK0F,QAAQyL,iBACtBnR,KAAK0F,QAAQyL,wDAeH,IAAAC,EAAApR,KACR+N,MAAMC,QAAQhO,KAAK0F,QAAQ9H,WAC7BoC,KAAK0F,QAAQ9H,QAAQwP,QAAQ,SAAAiE,GAC3B,IAAIlU,EAAS,IAAIkU,EAGjB,GAAIlU,EAAOmU,YAAYrT,MAAoC,aAA5Bd,EAAOmU,YAAYrT,KAAqB,CACrE,IAAIsT,EAAQ,UAAAhQ,OAAa6P,EAAKjH,UAAUS,UACtCzN,EAAOmU,YAAYrT,OAErBmT,EAAK1G,sBACH0G,EAAK1G,sBAAL,IAAAnJ,OAAiCgQ,GAGrCpU,EAAOqU,KAAKJ,KAGdpR,KAAK0K,sBACH1K,KAAK0K,sBAAwB,kBAE/B1K,KAAKqL,SACLrL,KAAKmR,yDAOKlT,EAAMwT,GAClB,QAAKzR,KAAKpC,QAAQK,IAEX+B,KAAKpC,QAAQK,GAAMwT,4CAO1B,OAAOrT,OAAO4M,KAAKhL,KAAKpC,uDAOxB8T,EACAC,EACAC,EACAC,GACA,IAAAC,EAAA9R,KACI+R,EAAchE,MAAMiE,KAAKN,EAAOO,UAChCC,EAAkB,EAyEtB,OAvEIH,EAAYnM,QACdgM,EAAsBxE,QAAQ,SAAC+E,EAAYC,GACzC,IAAIC,EAAWR,EAAoBO,GAMnC,IAAKC,KAAcA,EAAWF,GAC5B,OAAO,EAQT,IAAIG,EAAqBH,EAAaD,EAClCK,EAAmBF,EAAWH,EAK9BM,EAAenI,SAASoI,cAAc,OAC1CD,EAAatF,WAAa,sBAC1B,IAAIwF,EAAY,GAAAnR,OACduQ,EAAKpM,QAAQ6E,WADC,MAAAhJ,OAEXoQ,EAFW,KAAApQ,OAEC6Q,GACjBI,EAAaG,aAAa,aAAcD,GAKxC,IAAIE,EAAoBb,EAAY1D,OAClCiE,EACAC,EAAmBD,EAAqB,GAE1CJ,EAAkBK,EAAmBD,EAKrCM,EAAkBxF,QAAQ,SAAAyF,GAAO,OAAIL,EAAaM,YAAYD,KAK9Dd,EAAY1D,OAAOiE,EAAoB,EAAGE,GAK1Cd,EAAOzE,UAAY,GAKnB8E,EAAY3E,QAAQ,SAAAyF,GAAO,OAAInB,EAAOoB,YAAYD,KAE9Cf,EAAKpM,QAAQa,OACfC,QAAQC,IACN,kBACAmM,EACAN,EACAC,EACAL,EAAkB,KAMnBR,mCAMA,IAAAqB,EAAA/S,KAIPA,KAAK2P,QAKA3P,KAAKgT,aACRhT,KAAK8Q,oBAMP9Q,KAAKiR,eAEL,IAAIgC,EAAW,aAAA1R,OAAgBvB,KAAK0F,QAAQ6E,YACxC2I,EAASlT,KAAK0F,QAAQwN,QAAU1J,EAAe2J,mBAC/C1C,EAAiBzQ,KAAK0F,QAAQ+K,iBAAkB,EAChD2C,EAAsB3C,EAAiB,kBAAoB,GAC3DO,EAAiBhR,KAAK0F,QAAQsL,iBAAkB,EAChDqC,EAA6BrT,KAAK0F,QAAQ2N,2BAK1CxD,EAAqB9B,MAAMC,QAAQhO,KAAK0F,QAAQ8H,aAChDxN,KAAKsT,iBACL,GAKJtT,KAAKoK,YAAY8C,WAAjB,IAAA3L,OAAkCvB,KAAK0F,QAAQ8E,MAA/C,KAAAjJ,OAAwD0R,EAAxD,KAAA1R,OACEvB,KAAK0K,sBADP,KAAAnJ,OAEI6R,GAKJF,EAAOlT,KAAK0F,QAAQ6E,YAAY6C,QAAQ,SAACmG,EAAKC,GAC5C,IAAIC,EAAWF,EAAInL,MAAM,KAKrBsJ,EAASrH,SAASoI,cAAc,OACpCf,EAAOxE,WAAa,SAKpB,IAAI0E,EAAwB,GACxBC,EAAsB,GAK1B4B,EAASrG,QAAQ,SAACnM,EAAQyS,GAIxB,IAAIC,GACDN,GACDpS,EAAOE,SAAS,MAChBF,EAAO2E,OAAS,EACdgO,GACDP,GACDpS,EAAOE,SAAS,MAChBF,EAAO2E,OAAS,EAKd+N,IACF/B,EAAsB/D,KAAK6F,GAK3BzS,EAASA,EAAOI,QAAQ,MAAO,KAG7BuS,IACF/B,EAAoBhE,KAAK6F,GAKzBzS,EAASA,EAAOI,QAAQ,MAAO,KAMjC,IAAIwS,EAAcd,EAAK5I,UAAU2J,eAAe7S,GAC5C8S,EAAmBlE,EAAmB5O,GACtC+S,EAAoBjB,EAAK5I,UAAU8J,qBACrChT,EACA8R,EAAKrN,QAAQP,QACb4N,EAAKrN,QAAQN,cAMX8O,EAAanB,EAAKrN,QAAQyO,aAAe,SAAW,MACpDpL,EAAYsB,SAASoI,cAAcyB,GACvCnL,EAAUmE,WAAV,aAAA3L,OAAoCsS,GAApCtS,OACEwS,EAAmB,IAAMA,EAAmB,KAQ5ChB,EAAK5I,UAAU4G,0BACdN,GACAO,EAiBGP,GAIF1H,EAAUqL,aAAe,SAAArI,GACvBgH,EAAKlG,oBAAoB5L,GACzB8R,EAAKsB,sBAAsBpT,EAAQ8K,IAErChD,EAAUuL,WAAa,SAAAvI,GAAC,OAAIgH,EAAKwB,uBACjCxL,EAAUyL,cAAgB,SAAAzI,GAAC,OAAIgH,EAAKwB,yBAKpCxL,EAAU0L,QAAU,WAClB1B,EAAK3G,aAAc,EACnB2G,EAAKlG,oBAAoB5L,IAE3B8H,EAAU2L,YAAc,SAAA3I,GACtBgH,EAAKsB,sBAAsBpT,EAAQ8K,MA/BvChD,EAAU4L,cAAgB,SAAA5I,GACxBgH,EAAKlG,oBAAoB5L,GACzB8R,EAAKsB,sBAAsBpT,EAAQ8K,IAErChD,EAAU6L,YAAc,SAAA7I,GACtBgH,EAAKwB,uBAEPxL,EAAU8L,gBAAkB,SAAA9I,GAAC,OAAIgH,EAAKwB,wBAgCxCxL,EAAU4J,aAAa,aAAc1R,GAMrC,IAAI6T,EAAS,GAAAvT,OAAMwR,EAAKrN,QAAQ6E,WAAnB,MAAAhJ,OAAkCiS,EAAlC,KAAAjS,OAA4CmS,GACzD3K,EAAU4J,aAAa,gBAAiBmC,GAKxC/L,EAAU4J,aAAa,oBAAqBqB,GAK5C,IAAIe,EAAgB1K,SAASoI,cAAc,QAC3CsC,EAAc9H,UAAY+G,EAC1BjL,EAAU+J,YAAYiC,GAKjBhC,EAAKpI,eAAe1J,KAAS8R,EAAKpI,eAAe1J,GAAU,IAEhE8R,EAAKpI,eAAe1J,GAAQ4M,KAAK9E,GAKjC2I,EAAOoB,YAAY/J,KAMrB2I,EAASqB,EAAKiC,sBACZtD,EACA8B,EACA5B,EACAC,GAMFkB,EAAK3I,YAAY0I,YAAYpB,KAM/B1R,KAAKkR,WAEAlR,KAAKgT,cAIRhT,KAAKgT,aAAc,GAOjBhT,KAAKmK,UAAU4G,0BACdN,GACAO,EAGQP,GAITpG,SAASiK,WAAa,SAAAvI,GAAC,OAAIgH,EAAKwB,uBAChClK,SAASmK,cAAgB,SAAAzI,GAAC,OAAIgH,EAAKwB,wBACzB9D,IAIVpG,SAAS4K,UAAY,kBAAMlC,EAAKwB,wBAXhClK,SAASuK,YAAc,kBAAM7B,EAAKwB,uBAiBpCvU,KAAK2Q,+CC3wCIhH","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"SimpleKeyboard\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"SimpleKeyboard\"] = factory();\n\telse\n\t\troot[\"SimpleKeyboard\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\r\n * Utility Service\r\n */\r\nclass Utilities {\r\n  /**\r\n   * Creates an instance of the Utility service\r\n   */\r\n  constructor({ getOptions, getCaretPosition, dispatch }) {\r\n    this.getOptions = getOptions;\r\n    this.getCaretPosition = getCaretPosition;\r\n    this.dispatch = dispatch;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(Utilities, this);\r\n  }\r\n\r\n  /**\r\n   * Adds default classes to a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @return {string} The classes to be added to the button\r\n   */\r\n  getButtonClass(button) {\r\n    let buttonTypeClass =\r\n      button.includes(\"{\") && button.includes(\"}\") && button !== \"{//}\"\r\n        ? \"functionBtn\"\r\n        : \"standardBtn\";\r\n    let buttonWithoutBraces = button.replace(\"{\", \"\").replace(\"}\", \"\");\r\n    let buttonNormalized = \"\";\r\n\r\n    if (buttonTypeClass !== \"standardBtn\")\r\n      buttonNormalized = ` hg-button-${buttonWithoutBraces}`;\r\n\r\n    return `hg-${buttonTypeClass}${buttonNormalized}`;\r\n  }\r\n\r\n  /**\r\n   * Default button display labels\r\n   */\r\n  getDefaultDiplay() {\r\n    return {\r\n      \"{bksp}\": \"backspace\",\r\n      \"{backspace}\": \"backspace\",\r\n      \"{enter}\": \"< enter\",\r\n      \"{shift}\": \"shift\",\r\n      \"{shiftleft}\": \"shift\",\r\n      \"{shiftright}\": \"shift\",\r\n      \"{alt}\": \"alt\",\r\n      \"{s}\": \"shift\",\r\n      \"{tab}\": \"tab\",\r\n      \"{lock}\": \"caps\",\r\n      \"{capslock}\": \"caps\",\r\n      \"{accept}\": \"Submit\",\r\n      \"{space}\": \" \",\r\n      \"{//}\": \" \",\r\n      \"{esc}\": \"esc\",\r\n      \"{escape}\": \"esc\",\r\n      \"{f1}\": \"f1\",\r\n      \"{f2}\": \"f2\",\r\n      \"{f3}\": \"f3\",\r\n      \"{f4}\": \"f4\",\r\n      \"{f5}\": \"f5\",\r\n      \"{f6}\": \"f6\",\r\n      \"{f7}\": \"f7\",\r\n      \"{f8}\": \"f8\",\r\n      \"{f9}\": \"f9\",\r\n      \"{f10}\": \"f10\",\r\n      \"{f11}\": \"f11\",\r\n      \"{f12}\": \"f12\",\r\n      \"{numpaddivide}\": \"/\",\r\n      \"{numlock}\": \"lock\",\r\n      \"{arrowup}\": \"↑\",\r\n      \"{arrowleft}\": \"←\",\r\n      \"{arrowdown}\": \"↓\",\r\n      \"{arrowright}\": \"→\",\r\n      \"{prtscr}\": \"print\",\r\n      \"{scrolllock}\": \"scroll\",\r\n      \"{pause}\": \"pause\",\r\n      \"{insert}\": \"ins\",\r\n      \"{home}\": \"home\",\r\n      \"{pageup}\": \"up\",\r\n      \"{delete}\": \"del\",\r\n      \"{end}\": \"end\",\r\n      \"{pagedown}\": \"down\",\r\n      \"{numpadmultiply}\": \"*\",\r\n      \"{numpadsubtract}\": \"-\",\r\n      \"{numpadadd}\": \"+\",\r\n      \"{numpadenter}\": \"enter\",\r\n      \"{period}\": \".\",\r\n      \"{numpaddecimal}\": \".\",\r\n      \"{numpad0}\": \"0\",\r\n      \"{numpad1}\": \"1\",\r\n      \"{numpad2}\": \"2\",\r\n      \"{numpad3}\": \"3\",\r\n      \"{numpad4}\": \"4\",\r\n      \"{numpad5}\": \"5\",\r\n      \"{numpad6}\": \"6\",\r\n      \"{numpad7}\": \"7\",\r\n      \"{numpad8}\": \"8\",\r\n      \"{numpad9}\": \"9\"\r\n    };\r\n  }\r\n  /**\r\n   * Returns the display (label) name for a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {object} display The provided display option\r\n   * @param  {boolean} mergeDisplay Whether the provided param value should be merged with the default one.\r\n   */\r\n  getButtonDisplayName(button, display, mergeDisplay) {\r\n    if (mergeDisplay) {\r\n      display = Object.assign({}, this.getDefaultDiplay(), display);\r\n    } else {\r\n      display = display || this.getDefaultDiplay();\r\n    }\r\n\r\n    return display[button] || button;\r\n  }\r\n\r\n  /**\r\n   * Returns the updated input resulting from clicking a given button\r\n   *\r\n   * @param  {string} button The button's layout name\r\n   * @param  {string} input The input string\r\n   * @param  {number} caretPos The cursor's current position\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  getUpdatedInput(button, input, caretPos, moveCaret) {\r\n    let options = this.getOptions();\r\n    let output = input;\r\n\r\n    if (\r\n      (button === \"{bksp}\" || button === \"{backspace}\") &&\r\n      output.length > 0\r\n    ) {\r\n      output = this.removeAt(output, caretPos, moveCaret);\r\n    } else if (button === \"{space}\")\r\n      output = this.addStringAt(output, \" \", caretPos, moveCaret);\r\n    else if (\r\n      button === \"{tab}\" &&\r\n      !(\r\n        typeof options.tabCharOnTab === \"boolean\" &&\r\n        options.tabCharOnTab === false\r\n      )\r\n    ) {\r\n      output = this.addStringAt(output, \"\\t\", caretPos, moveCaret);\r\n    } else if (\r\n      (button === \"{enter}\" || button === \"{numpadenter}\") &&\r\n      options.newLineOnEnter\r\n    )\r\n      output = this.addStringAt(output, \"\\n\", caretPos, moveCaret);\r\n    else if (\r\n      button.includes(\"numpad\") &&\r\n      Number.isInteger(Number(button[button.length - 2]))\r\n    ) {\r\n      output = this.addStringAt(\r\n        output,\r\n        button[button.length - 2],\r\n        caretPos,\r\n        moveCaret\r\n      );\r\n    } else if (button === \"{numpaddivide}\")\r\n      output = this.addStringAt(output, \"/\", caretPos, moveCaret);\r\n    else if (button === \"{numpadmultiply}\")\r\n      output = this.addStringAt(output, \"*\", caretPos, moveCaret);\r\n    else if (button === \"{numpadsubtract}\")\r\n      output = this.addStringAt(output, \"-\", caretPos, moveCaret);\r\n    else if (button === \"{numpadadd}\")\r\n      output = this.addStringAt(output, \"+\", caretPos, moveCaret);\r\n    else if (button === \"{numpaddecimal}\")\r\n      output = this.addStringAt(output, \".\", caretPos, moveCaret);\r\n    else if (button === \"{\" || button === \"}\")\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n    else if (!button.includes(\"{\") && !button.includes(\"}\"))\r\n      output = this.addStringAt(output, button, caretPos, moveCaret);\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Moves the cursor position by a given amount\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPos(length, minus) {\r\n    let newCaretPos = this.updateCaretPosAction(length, minus);\r\n\r\n    this.dispatch(instance => {\r\n      instance.caretPosition = newCaretPos;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Action method of updateCaretPos\r\n   *\r\n   * @param  {number} length Represents by how many characters the input should be moved\r\n   * @param  {boolean} minus Whether the cursor should be moved to the left or not.\r\n   */\r\n  updateCaretPosAction(length, minus) {\r\n    let options = this.getOptions();\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (minus) {\r\n      if (caretPosition > 0) caretPosition = caretPosition - length;\r\n    } else {\r\n      caretPosition = caretPosition + length;\r\n    }\r\n\r\n    if (options.debug) {\r\n      console.log(\"Caret at:\", caretPosition, `(${this.keyboardDOMClass})`);\r\n    }\r\n\r\n    return caretPosition;\r\n  }\r\n\r\n  /**\r\n   * Adds a string to the input at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {string} string The string to add\r\n   * @param  {number} position The (cursor) position where the string should be added\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  addStringAt(source, string, position, moveCaret) {\r\n    let output;\r\n\r\n    if (!position && position !== 0) {\r\n      output = source + string;\r\n    } else {\r\n      output = [source.slice(0, position), string, source.slice(position)].join(\r\n        \"\"\r\n      );\r\n\r\n      /**\r\n       * Avoid caret position change when maxLength is set\r\n       */\r\n      if (!this.isMaxLengthReached()) {\r\n        if (moveCaret) this.updateCaretPos(string.length);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * Removes an amount of characters at a given position\r\n   *\r\n   * @param  {string} source The source input\r\n   * @param  {number} position The (cursor) position from where the characters should be removed\r\n   * @param  {boolean} moveCaret Whether to update simple-keyboard's cursor\r\n   */\r\n  removeAt(source, position, moveCaret) {\r\n    let caretPosition = this.getCaretPosition();\r\n\r\n    if (caretPosition === 0) {\r\n      return source;\r\n    }\r\n\r\n    let output;\r\n    let prevTwoChars;\r\n    let emojiMatched;\r\n    let emojiMatchedReg = /([\\uD800-\\uDBFF][\\uDC00-\\uDFFF])/g;\r\n\r\n    /**\r\n     * Emojis are made out of two characters, so we must take a custom approach to trim them.\r\n     * For more info: https://mathiasbynens.be/notes/javascript-unicode\r\n     */\r\n    if (position && position >= 0) {\r\n      prevTwoChars = source.substring(position - 2, position);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.substr(0, position - 2) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.substr(0, position - 1) + source.substr(position);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    } else {\r\n      prevTwoChars = source.slice(-2);\r\n      emojiMatched = prevTwoChars.match(emojiMatchedReg);\r\n\r\n      if (emojiMatched) {\r\n        output = source.slice(0, -2);\r\n        if (moveCaret) this.updateCaretPos(2, true);\r\n      } else {\r\n        output = source.slice(0, -1);\r\n        if (moveCaret) this.updateCaretPos(1, true);\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n  /**\r\n   * Determines whether the maxLength has been reached. This function is called when the maxLength option it set.\r\n   *\r\n   * @param  {object} inputObj\r\n   * @param  {string} updatedInput\r\n   */\r\n  handleMaxLength(inputObj, updatedInput) {\r\n    let options = this.getOptions();\r\n    let maxLength = options.maxLength;\r\n    let currentInput = inputObj[options.inputName];\r\n    let condition = currentInput.length === maxLength;\r\n\r\n    if (\r\n      /**\r\n       * If pressing this button won't add more characters\r\n       * We exit out of this limiter function\r\n       */\r\n      updatedInput.length <= currentInput.length\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    if (Number.isInteger(maxLength)) {\r\n      if (options.debug) {\r\n        console.log(\"maxLength (num) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        /**\r\n         * @type {boolean} Boolean value that shows whether maxLength has been reached\r\n         */\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n\r\n    if (typeof maxLength === \"object\") {\r\n      let condition = currentInput.length === maxLength[options.inputName];\r\n\r\n      if (options.debug) {\r\n        console.log(\"maxLength (obj) reached:\", condition);\r\n      }\r\n\r\n      if (condition) {\r\n        this.maxLengthReached = true;\r\n        return true;\r\n      } else {\r\n        this.maxLengthReached = false;\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of maxLengthReached\r\n   */\r\n  isMaxLengthReached() {\r\n    return Boolean(this.maxLengthReached);\r\n  }\r\n\r\n  /**\r\n   * Determines whether a touch device is being used\r\n   */\r\n  isTouchDevice() {\r\n    return \"ontouchstart\" in window || navigator.maxTouchPoints;\r\n  }\r\n\r\n  /**\r\n   * Determines whether pointer events are supported\r\n   */\r\n  pointerEventsSupported() {\r\n    return window.PointerEvent;\r\n  }\r\n\r\n  /**\r\n   * Bind all methods in a given class\r\n   */\r\n\r\n  static bindMethods(myClass, instance) {\r\n    for (let myMethod of Object.getOwnPropertyNames(myClass.prototype)) {\r\n      let excludeMethod =\r\n        myMethod === \"constructor\" || myMethod === \"bindMethods\";\r\n      if (!excludeMethod) {\r\n        instance[myMethod] = instance[myMethod].bind(instance);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transforms an arbitrary string to camelCase\r\n   *\r\n   * @param  {string} string The string to transform.\r\n   */\r\n  camelCase(string) {\r\n    if (!string) return false;\r\n\r\n    return string\r\n      .toLowerCase()\r\n      .trim()\r\n      .split(/[.\\-_\\s]/g)\r\n      .reduce((string, word) =>\r\n        word.length ? string + word[0].toUpperCase() + word.slice(1) : string\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Counts the number of duplicates in a given array\r\n   *\r\n   * @param  {Array} array The haystack to search in\r\n   * @param  {string} value The needle to search for\r\n   */\r\n  countInArray(array, value) {\r\n    return array.reduce((n, x) => n + (x === value), 0);\r\n  }\r\n}\r\n\r\nexport default Utilities;\r\n","import Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Physical Keyboard Service\r\n */\r\nclass PhysicalKeyboard {\r\n  /**\r\n   * Creates an instance of the PhysicalKeyboard service\r\n   */\r\n  constructor({ dispatch, getOptions }) {\r\n    /**\r\n     * @type {object} A simple-keyboard instance\r\n     */\r\n    this.dispatch = dispatch;\r\n    this.getOptions = getOptions;\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(PhysicalKeyboard, this);\r\n  }\r\n\r\n  handleHighlightKeyDown(event) {\r\n    let options = this.getOptions();\r\n    let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      let buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM) {\r\n        buttonDOM.style.backgroundColor =\r\n          options.physicalKeyboardHighlightBgColor || \"#9ab4d0\";\r\n        buttonDOM.style.color =\r\n          options.physicalKeyboardHighlightTextColor || \"white\";\r\n      }\r\n    });\r\n  }\r\n\r\n  handleHighlightKeyUp(event) {\r\n    let buttonPressed = this.getSimpleKeyboardLayoutKey(event);\r\n\r\n    this.dispatch(instance => {\r\n      let buttonDOM =\r\n        instance.getButtonElement(buttonPressed) ||\r\n        instance.getButtonElement(`{${buttonPressed}}`);\r\n\r\n      if (buttonDOM && buttonDOM.removeAttribute) {\r\n        buttonDOM.removeAttribute(\"style\");\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Transforms a KeyboardEvent's \"key.code\" string into a simple-keyboard layout format\r\n   * @param  {object} event The KeyboardEvent\r\n   */\r\n  getSimpleKeyboardLayoutKey(event) {\r\n    let output;\r\n\r\n    if (\r\n      event.code.includes(\"Numpad\") ||\r\n      event.code.includes(\"Shift\") ||\r\n      event.code.includes(\"Space\") ||\r\n      event.code.includes(\"Backspace\") ||\r\n      event.code.includes(\"Control\") ||\r\n      event.code.includes(\"Alt\") ||\r\n      event.code.includes(\"Meta\")\r\n    ) {\r\n      output = event.code;\r\n    } else {\r\n      output = event.key;\r\n    }\r\n\r\n    /**\r\n     * If button is not uppercase, casting to lowercase\r\n     */\r\n    if (\r\n      output !== output.toUpperCase() ||\r\n      (event.code[0] === \"F\" &&\r\n        Number.isInteger(Number(event.code[1])) &&\r\n        event.code.length <= 3)\r\n    ) {\r\n      output = output.toLowerCase();\r\n    }\r\n\r\n    return output;\r\n  }\r\n}\r\n\r\nexport default PhysicalKeyboard;\r\n","/**\r\n * Keyboard Layout Service\r\n */\r\nclass KeyboardLayout {\r\n  /**\r\n   * Get default simple-keyboard layout\r\n   * @return {object} The default layout (US-QWERTY)\r\n   */\r\n  static getDefaultLayout() {\r\n    return {\r\n      default: [\r\n        \"` 1 2 3 4 5 6 7 8 9 0 - = {bksp}\",\r\n        \"{tab} q w e r t y u i o p [ ] \\\\\",\r\n        \"{lock} a s d f g h j k l ; ' {enter}\",\r\n        \"{shift} z x c v b n m , . / {shift}\",\r\n        \".com @ {space}\"\r\n      ],\r\n      shift: [\r\n        \"~ ! @ # $ % ^ & * ( ) _ + {bksp}\",\r\n        \"{tab} Q W E R T Y U I O P { } |\",\r\n        '{lock} A S D F G H J K L : \" {enter}',\r\n        \"{shift} Z X C V B N M < > ? {shift}\",\r\n        \".com @ {space}\"\r\n      ]\r\n    };\r\n  }\r\n}\r\n\r\nexport default KeyboardLayout;\r\n","import \"./Keyboard.css\";\r\n\r\n// Services\r\nimport PhysicalKeyboard from \"../services/PhysicalKeyboard\";\r\nimport KeyboardLayout from \"../services/KeyboardLayout\";\r\nimport Utilities from \"../services/Utilities\";\r\n\r\n/**\r\n * Root class for simple-keyboard\r\n * This class:\r\n * - Parses the options\r\n * - Renders the rows and buttons\r\n * - Handles button functionalitycd\r\n */\r\nclass SimpleKeyboard {\r\n  /**\r\n   * Creates an instance of SimpleKeyboard\r\n   * @param {Array} params If first parameter is a string, it is considered the container class. The second parameter is then considered the options object. If first parameter is an object, it is considered the options object.\r\n   */\r\n  constructor(...params) {\r\n    let keyboardDOMQuery =\r\n      typeof params[0] === \"string\" ? params[0] : \".simple-keyboard\";\r\n    let options = typeof params[0] === \"object\" ? params[0] : params[1];\r\n\r\n    if (!options) options = {};\r\n\r\n    /**\r\n     * Initializing Utilities\r\n     */\r\n    this.utilities = new Utilities({\r\n      getOptions: this.getOptions,\r\n      getCaretPosition: this.getCaretPosition,\r\n      dispatch: this.dispatch\r\n    });\r\n\r\n    /**\r\n     * Caret position\r\n     */\r\n    this.caretPosition = null;\r\n\r\n    /**\r\n     * Processing options\r\n     */\r\n    this.keyboardDOM = document.querySelector(keyboardDOMQuery);\r\n\r\n    /**\r\n     * @type {object}\r\n     * @property {object} layout Modify the keyboard layout.\r\n     * @property {string} layoutName Specifies which layout should be used.\r\n     * @property {object} display Replaces variable buttons (such as {bksp}) with a human-friendly name (e.g.: “backspace”).\r\n     * @property {boolean} mergeDisplay By default, when you set the display property, you replace the default one. This setting merges them instead.\r\n     * @property {string} theme A prop to add your own css classes to the keyboard wrapper. You can add multiple classes separated by a space.\r\n     * @property {Array} buttonTheme A prop to add your own css classes to one or several buttons.\r\n     * @property {boolean} debug Runs a console.log every time a key is pressed. Displays the buttons pressed and the current input.\r\n     * @property {boolean} newLineOnEnter Specifies whether clicking the “ENTER” button will input a newline (\\n) or not.\r\n     * @property {boolean} tabCharOnTab Specifies whether clicking the “TAB” button will input a tab character (\\t) or not.\r\n     * @property {string} inputName Allows you to use a single simple-keyboard instance for several inputs.\r\n     * @property {number} maxLength Restrains all of simple-keyboard inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {object} maxLength Restrains simple-keyboard’s individual inputs to a certain length. This should be used in addition to the input element’s maxlengthattribute.\r\n     * @property {boolean} syncInstanceInputs When set to true, this option synchronizes the internal input of every simple-keyboard instance.\r\n     * @property {boolean} physicalKeyboardHighlight Enable highlighting of keys pressed on physical keyboard.\r\n     * @property {boolean} preventMouseDownDefault Calling preventDefault for the mousedown events keeps the focus on the input.\r\n     * @property {string} physicalKeyboardHighlightTextColor Define the text color that the physical keyboard highlighted key should have.\r\n     * @property {string} physicalKeyboardHighlightBgColor Define the background color that the physical keyboard highlighted key should have.\r\n     * @property {function(button: string):string} onKeyPress Executes the callback function on key press. Returns button layout name (i.e.: “{shift}”).\r\n     * @property {function(input: string):string} onChange Executes the callback function on input change. Returns the current input’s string.\r\n     * @property {function} onRender Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n     * @property {function} onInit Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n     * @property {function(inputs: object):object} onChangeAll Executes the callback function on input change. Returns the input object with all defined inputs.\r\n     * @property {boolean} useButtonTag Render buttons as a button element instead of a div element.\r\n     * @property {boolean} disableCaretPositioning A prop to ensure characters are always be added/removed at the end of the string.\r\n     * @property {object} inputPattern Restrains input(s) change to the defined regular expression pattern.\r\n     * @property {boolean} useTouchEvents Instructs simple-keyboard to use touch events instead of click events.\r\n     * @property {boolean} autoUseTouchEvents Enable useTouchEvents automatically when touch device is detected.\r\n     * @property {boolean} useMouseEvents Opt out of PointerEvents handling, falling back to the prior mouse event logic.\r\n     * @property {function} destroy Clears keyboard listeners and DOM elements.\r\n     * @property {boolean} disableButtonHold Disable button hold action.\r\n     * @property {function} onKeyReleased Executes the callback function on key release.\r\n     */\r\n    this.options = options;\r\n    this.options.layoutName = this.options.layoutName || \"default\";\r\n    this.options.theme = this.options.theme || \"hg-theme-default\";\r\n    this.options.inputName = this.options.inputName || \"default\";\r\n    this.options.preventMouseDownDefault =\r\n      this.options.preventMouseDownDefault || false;\r\n\r\n    /**\r\n     * @type {object} Classes identifying loaded plugins\r\n     */\r\n    this.keyboardPluginClasses = \"\";\r\n\r\n    /**\r\n     * Bindings\r\n     */\r\n    Utilities.bindMethods(SimpleKeyboard, this);\r\n\r\n    /**\r\n     * simple-keyboard uses a non-persistent internal input to keep track of the entered string (the variable `keyboard.input`).\r\n     * This removes any dependency to input DOM elements. You can type and directly display the value in a div element, for example.\r\n     * @example\r\n     * // To get entered input\r\n     * let input = keyboard.getInput();\r\n     *\r\n     * // To clear entered input.\r\n     * keyboard.clearInput();\r\n     *\r\n     * @type {object}\r\n     * @property {object} default Default SimpleKeyboard internal input.\r\n     * @property {object} myInputName Example input that can be set through `options.inputName:\"myInputName\"`.\r\n     */\r\n    this.input = {};\r\n    this.input[this.options.inputName] = \"\";\r\n\r\n    /**\r\n     * @type {string} DOM class of the keyboard wrapper, normally \"simple-keyboard\" by default.\r\n     */\r\n    this.keyboardDOMClass = keyboardDOMQuery.split(\".\").join(\"\");\r\n\r\n    /**\r\n     * @type {object} Contains the DOM elements of every rendered button, the key being the button's layout name (e.g.: \"{enter}\").\r\n     */\r\n    this.buttonElements = {};\r\n\r\n    /**\r\n     * Simple-keyboard Instances\r\n     * This enables multiple simple-keyboard support with easier management\r\n     */\r\n    if (!window[\"SimpleKeyboardInstances\"])\r\n      window[\"SimpleKeyboardInstances\"] = {};\r\n\r\n    window[\"SimpleKeyboardInstances\"][\r\n      this.utilities.camelCase(this.keyboardDOMClass)\r\n    ] = this;\r\n\r\n    /**\r\n     * Instance vars\r\n     */\r\n    this.allKeyboardInstances = window[\"SimpleKeyboardInstances\"];\r\n    this.currentInstanceName = this.utilities.camelCase(this.keyboardDOMClass);\r\n    this.keyboardInstanceNames = Object.keys(window[\"SimpleKeyboardInstances\"]);\r\n    this.isFirstKeyboardInstance =\r\n      this.keyboardInstanceNames[0] === this.currentInstanceName;\r\n\r\n    /**\r\n     * Physical Keyboard support\r\n     */\r\n    this.physicalKeyboard = new PhysicalKeyboard({\r\n      dispatch: this.dispatch,\r\n      getOptions: this.getOptions\r\n    });\r\n\r\n    /**\r\n     * Rendering keyboard\r\n     */\r\n    if (this.keyboardDOM) this.render();\r\n    else {\r\n      console.warn(`\"${keyboardDOMQuery}\" was not found in the DOM.`);\r\n      throw new Error(\"KEYBOARD_DOM_ERROR\");\r\n    }\r\n\r\n    /**\r\n     * Modules\r\n     */\r\n    this.modules = {};\r\n    this.loadModules();\r\n  }\r\n\r\n  /**\r\n   * Getters\r\n   */\r\n  getOptions = () => this.options;\r\n  getCaretPosition = () => this.caretPosition;\r\n\r\n  /**\r\n   * Handles clicks made to keyboard buttons\r\n   * @param  {string} button The button's layout name.\r\n   */\r\n  handleButtonClicked(button) {\r\n    let debug = this.options.debug;\r\n\r\n    /**\r\n     * Ignoring placeholder buttons\r\n     */\r\n    if (button === \"{//}\") return false;\r\n\r\n    /**\r\n     * Calling onKeyPress\r\n     */\r\n    if (typeof this.options.onKeyPress === \"function\")\r\n      this.options.onKeyPress(button);\r\n\r\n    if (!this.input[this.options.inputName])\r\n      this.input[this.options.inputName] = \"\";\r\n\r\n    let updatedInput = this.utilities.getUpdatedInput(\r\n      button,\r\n      this.input[this.options.inputName],\r\n      this.caretPosition\r\n    );\r\n\r\n    if (\r\n      // If input will change as a result of this button press\r\n      this.input[this.options.inputName] !== updatedInput &&\r\n      // This pertains to the \"inputPattern\" option:\r\n      // If inputPattern isn't set\r\n      (!this.options.inputPattern ||\r\n        // Or, if it is set and if the pattern is valid - we proceed.\r\n        (this.options.inputPattern && this.inputPatternIsValid(updatedInput)))\r\n    ) {\r\n      /**\r\n       * If maxLength and handleMaxLength yield true, halting\r\n       */\r\n      if (\r\n        this.options.maxLength &&\r\n        this.utilities.handleMaxLength(this.input, updatedInput)\r\n      ) {\r\n        return false;\r\n      }\r\n\r\n      this.input[this.options.inputName] = this.utilities.getUpdatedInput(\r\n        button,\r\n        this.input[this.options.inputName],\r\n        this.caretPosition,\r\n        true\r\n      );\r\n\r\n      if (debug) console.log(\"Input changed:\", this.input);\r\n\r\n      /**\r\n       * Enforce syncInstanceInputs, if set\r\n       */\r\n      if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n      /**\r\n       * Calling onChange\r\n       */\r\n      if (typeof this.options.onChange === \"function\")\r\n        this.options.onChange(this.input[this.options.inputName]);\r\n\r\n      /**\r\n       * Calling onChangeAll\r\n       */\r\n      if (typeof this.options.onChangeAll === \"function\")\r\n        this.options.onChangeAll(this.input);\r\n    }\r\n\r\n    if (debug) {\r\n      console.log(\"Key pressed:\", button);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mousedown\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonMouseDown(button, e) {\r\n    /**\r\n     * Handle event options\r\n     */\r\n    if (this.options.preventMouseDownDefault) e.preventDefault();\r\n    if (this.options.stopMouseDownPropagation) e.stopPropagation();\r\n\r\n    /**\r\n     * @type {boolean} Whether the mouse is being held onKeyPress\r\n     */\r\n    this.isMouseHold = true;\r\n\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    if (this.holdTimeout) clearTimeout(this.holdTimeout);\r\n\r\n    /**\r\n     * @type {object} Time to wait until a key hold is detected\r\n     */\r\n    if (!this.options.disableButtonHold) {\r\n      this.holdTimeout = setTimeout(() => {\r\n        if (\r\n          this.isMouseHold &&\r\n          ((!button.includes(\"{\") && !button.includes(\"}\")) ||\r\n            button === \"{delete}\" ||\r\n            button === \"{backspace}\" ||\r\n            button === \"{bksp}\" ||\r\n            button === \"{space}\" ||\r\n            button === \"{tab}\")\r\n        ) {\r\n          if (this.options.debug) console.log(\"Button held:\", button);\r\n\r\n          this.handleButtonHold(button, e);\r\n        }\r\n        clearTimeout(this.holdTimeout);\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles button mouseup\r\n   */\r\n  handleButtonMouseUp() {\r\n    this.isMouseHold = false;\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * Calling onKeyReleased\r\n     */\r\n    if (typeof this.options.onKeyReleased === \"function\")\r\n      this.options.onKeyReleased();\r\n  }\r\n\r\n  /**\r\n   * Handles button hold\r\n   */\r\n  /* istanbul ignore next */\r\n  handleButtonHold(button) {\r\n    if (this.holdInteractionTimeout) clearTimeout(this.holdInteractionTimeout);\r\n\r\n    /**\r\n     * @type {object} Timeout dictating the speed of key hold iterations\r\n     */\r\n    this.holdInteractionTimeout = setTimeout(() => {\r\n      if (this.isMouseHold) {\r\n        this.handleButtonClicked(button);\r\n        this.handleButtonHold(button);\r\n      } else {\r\n        clearTimeout(this.holdInteractionTimeout);\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances (if you have several instances).\r\n   */\r\n  syncInstanceInputs() {\r\n    this.dispatch(instance => {\r\n      instance.replaceInput(this.input);\r\n      instance.caretPosition = this.caretPosition;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear the keyboard’s input.\r\n   * @param {string} [inputName] optional - the internal input to select\r\n   */\r\n  clearInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = \"\";\r\n\r\n    /**\r\n     * Reset caretPosition\r\n     */\r\n    this.caretPosition = 0;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Get the keyboard’s input (You can also get it from the onChange prop).\r\n   * @param  {string} [inputName] optional - the internal input to select\r\n   */\r\n  getInput(inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n\r\n    return this.input[inputName];\r\n  }\r\n\r\n  /**\r\n   * Set the keyboard’s input.\r\n   * @param  {string} input the input value\r\n   * @param  {string} inputName optional - the internal input to select\r\n   */\r\n  setInput(input, inputName) {\r\n    inputName = inputName || this.options.inputName;\r\n    this.input[inputName] = input;\r\n\r\n    /**\r\n     * Enforce syncInstanceInputs, if set\r\n     */\r\n    if (this.options.syncInstanceInputs) this.syncInstanceInputs(this.input);\r\n  }\r\n\r\n  /**\r\n   * Replace the input object (`keyboard.input`)\r\n   * @param  {object} inputObj The input object\r\n   */\r\n  replaceInput(inputObj) {\r\n    this.input = inputObj;\r\n  }\r\n\r\n  /**\r\n   * Set new option or modify existing ones after initialization.\r\n   * @param  {object} options The options to set\r\n   */\r\n  setOptions(options) {\r\n    options = options || {};\r\n    this.options = Object.assign(this.options, options);\r\n\r\n    /**\r\n     * Some option changes require adjustments before re-render\r\n     */\r\n    this.onSetOptions(options);\r\n\r\n    /**\r\n     * Rendering\r\n     */\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Executing actions depending on changed options\r\n   * @param  {object} options The options to set\r\n   */\r\n  onSetOptions(options) {\r\n    if (options.inputName) {\r\n      /**\r\n       * inputName changed. This requires a caretPosition reset\r\n       */\r\n      if (this.options.debug) {\r\n        console.log(\"inputName changed. caretPosition reset.\");\r\n      }\r\n\r\n      this.caretPosition = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove all keyboard rows and reset keyboard values.\r\n   * Used interally between re-renders.\r\n   */\r\n  clear() {\r\n    this.keyboardDOM.innerHTML = \"\";\r\n    this.keyboardDOM.className = this.keyboardDOMClass;\r\n    this.buttonElements = {};\r\n  }\r\n\r\n  /**\r\n   * Send a command to all simple-keyboard instances at once (if you have multiple instances).\r\n   * @param  {function(instance: object, key: string)} callback Function to run on every instance\r\n   */\r\n  dispatch(callback) {\r\n    if (!window[\"SimpleKeyboardInstances\"]) {\r\n      console.warn(\r\n        `SimpleKeyboardInstances is not defined. Dispatch cannot be called.`\r\n      );\r\n      throw new Error(\"INSTANCES_VAR_ERROR\");\r\n    }\r\n\r\n    return Object.keys(window[\"SimpleKeyboardInstances\"]).forEach(key => {\r\n      callback(window[\"SimpleKeyboardInstances\"][key], key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds/Modifies an entry to the `buttonTheme`. Basically a way to add a class to a button.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  addButtonTheme(buttons, className) {\r\n    if (!className || !buttons) return false;\r\n\r\n    buttons.split(\" \").forEach(button => {\r\n      className.split(\" \").forEach(classNameItem => {\r\n        if (!this.options.buttonTheme) this.options.buttonTheme = [];\r\n\r\n        let classNameFound = false;\r\n\r\n        /**\r\n         * If class is already defined, we add button to class definition\r\n         */\r\n        this.options.buttonTheme.map(buttonTheme => {\r\n          if (buttonTheme.class.split(\" \").includes(classNameItem)) {\r\n            classNameFound = true;\r\n\r\n            let buttonThemeArray = buttonTheme.buttons.split(\" \");\r\n            if (!buttonThemeArray.includes(button)) {\r\n              classNameFound = true;\r\n              buttonThemeArray.push(button);\r\n              buttonTheme.buttons = buttonThemeArray.join(\" \");\r\n            }\r\n          }\r\n          return buttonTheme;\r\n        });\r\n\r\n        /**\r\n         * If class is not defined, we create a new entry\r\n         */\r\n        if (!classNameFound) {\r\n          this.options.buttonTheme.push({\r\n            class: classNameItem,\r\n            buttons: buttons\r\n          });\r\n        }\r\n      });\r\n    });\r\n\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Removes/Amends an entry to the `buttonTheme`. Basically a way to remove a class previously added to a button through buttonTheme or addButtonTheme.\r\n   * @param  {string} buttons List of buttons to select (separated by a space).\r\n   * @param  {string} className Classes to give to the selected buttons (separated by space).\r\n   */\r\n  removeButtonTheme(buttons, className) {\r\n    /**\r\n     * When called with empty parameters, remove all button themes\r\n     */\r\n    if (!buttons && !className) {\r\n      this.options.buttonTheme = [];\r\n      this.render();\r\n      return false;\r\n    }\r\n\r\n    /**\r\n     * If buttons are passed and buttonTheme has items\r\n     */\r\n    if (\r\n      buttons &&\r\n      Array.isArray(this.options.buttonTheme) &&\r\n      this.options.buttonTheme.length\r\n    ) {\r\n      let buttonArray = buttons.split(\" \");\r\n      buttonArray.forEach((button, key) => {\r\n        this.options.buttonTheme.map((buttonTheme, index) => {\r\n          /**\r\n           * If className is set, we affect the buttons only for that class\r\n           * Otherwise, we afect all classes\r\n           */\r\n          if (\r\n            (className && className.includes(buttonTheme.class)) ||\r\n            !className\r\n          ) {\r\n            let filteredButtonArray = buttonTheme.buttons\r\n              .split(\" \")\r\n              .filter(item => item !== button);\r\n\r\n            /**\r\n             * If buttons left, return them, otherwise, remove button Theme\r\n             */\r\n            if (filteredButtonArray.length) {\r\n              buttonTheme.buttons = filteredButtonArray.join(\" \");\r\n            } else {\r\n              this.options.buttonTheme.splice(index, 1);\r\n              buttonTheme = null;\r\n            }\r\n          }\r\n\r\n          return buttonTheme;\r\n        });\r\n      });\r\n\r\n      this.render();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the DOM Element of a button. If there are several buttons with the same name, an array of the DOM Elements is returned.\r\n   * @param  {string} button The button layout name to select\r\n   */\r\n  getButtonElement(button) {\r\n    let output;\r\n\r\n    let buttonArr = this.buttonElements[button];\r\n    if (buttonArr) {\r\n      if (buttonArr.length > 1) {\r\n        output = buttonArr;\r\n      } else {\r\n        output = buttonArr[0];\r\n      }\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  /**\r\n   * This handles the \"inputPattern\" option\r\n   * by checking if the provided inputPattern passes\r\n   */\r\n  inputPatternIsValid(inputVal) {\r\n    let inputPatternRaw = this.options.inputPattern;\r\n    let inputPattern;\r\n\r\n    /**\r\n     * Check if input pattern is global or targeted to individual inputs\r\n     */\r\n    if (inputPatternRaw instanceof RegExp) {\r\n      inputPattern = inputPatternRaw;\r\n    } else {\r\n      inputPattern = inputPatternRaw[this.options.inputName];\r\n    }\r\n\r\n    if (inputPattern && inputVal) {\r\n      let didInputMatch = inputPattern.test(inputVal);\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `inputPattern (\"${inputPattern}\"): ${\r\n            didInputMatch ? \"passed\" : \"did not pass!\"\r\n          }`\r\n        );\r\n      }\r\n\r\n      return didInputMatch;\r\n    } else {\r\n      /**\r\n       * inputPattern doesn't seem to be set for the current input, or input is empty. Pass.\r\n       */\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles simple-keyboard event listeners\r\n   */\r\n  setEventListeners() {\r\n    /**\r\n     * Only first instance should set the event listeners\r\n     */\r\n    if (this.isFirstKeyboardInstance || !this.allKeyboardInstances) {\r\n      if (this.options.debug) {\r\n        console.log(`Caret handling started (${this.keyboardDOMClass})`);\r\n      }\r\n\r\n      /**\r\n       * Event Listeners\r\n       */\r\n      document.addEventListener(\"keyup\", this.handleKeyUp);\r\n      document.addEventListener(\"keydown\", this.handleKeyDown);\r\n      document.addEventListener(\"mouseup\", this.handleMouseUp);\r\n      document.addEventListener(\"touchend\", this.handleTouchEnd);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyUp\r\n   */\r\n  handleKeyUp(event) {\r\n    this.caretEventHandler(event);\r\n\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyUp(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: KeyDown\r\n   */\r\n  handleKeyDown(event) {\r\n    if (this.options.physicalKeyboardHighlight) {\r\n      this.physicalKeyboard.handleHighlightKeyDown(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handler: MouseUp\r\n   */\r\n  handleMouseUp(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Event Handler: TouchEnd\r\n   */\r\n  handleTouchEnd(event) {\r\n    this.caretEventHandler(event);\r\n  }\r\n\r\n  /**\r\n   * Called by {@link caretEventHandler} when an event that warrants a cursor position update is triggered\r\n   */\r\n  caretEventHandler(event) {\r\n    let targetTagName;\r\n    if (event.target.tagName) {\r\n      targetTagName = event.target.tagName.toLowerCase();\r\n    }\r\n\r\n    this.dispatch(instance => {\r\n      if (instance.isMouseHold) {\r\n        instance.isMouseHold = false;\r\n      }\r\n\r\n      if (\r\n        (targetTagName === \"textarea\" || targetTagName === \"input\") &&\r\n        !instance.options.disableCaretPositioning\r\n      ) {\r\n        /**\r\n         * Tracks current cursor position\r\n         * As keys are pressed, text will be added/removed at that position within the input.\r\n         */\r\n        instance.caretPosition = event.target.selectionStart;\r\n\r\n        if (instance.options.debug) {\r\n          console.log(\r\n            \"Caret at: \",\r\n            event.target.selectionStart,\r\n            event.target.tagName.toLowerCase(),\r\n            `(${instance.keyboardDOMClass})`\r\n          );\r\n        }\r\n      } else if (instance.options.disableCaretPositioning) {\r\n        /**\r\n         * If we toggled off disableCaretPositioning, we must ensure caretPosition doesn't persist once reactivated.\r\n         */\r\n        instance.caretPosition = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Destroy keyboard listeners and DOM elements\r\n   */\r\n  destroy() {\r\n    /**\r\n     * Remove listeners\r\n     */\r\n    document.removeEventListener(\"keyup\", this.handleKeyUp);\r\n    document.removeEventListener(\"keydown\", this.handleKeyDown);\r\n    document.removeEventListener(\"mouseup\", this.handleMouseUp);\r\n    document.removeEventListener(\"touchend\", this.handleTouchEnd);\r\n\r\n    /**\r\n     * Clear DOM\r\n     */\r\n    this.clear();\r\n  }\r\n\r\n  /**\r\n   * Process buttonTheme option\r\n   */\r\n  getButtonTheme() {\r\n    let buttonThemesParsed = {};\r\n\r\n    this.options.buttonTheme.forEach(themeObj => {\r\n      if (themeObj.buttons && themeObj.class) {\r\n        let themeButtons;\r\n\r\n        if (typeof themeObj.buttons === \"string\") {\r\n          themeButtons = themeObj.buttons.split(\" \");\r\n        }\r\n\r\n        if (themeButtons) {\r\n          themeButtons.forEach(themeButton => {\r\n            let themeParsed = buttonThemesParsed[themeButton];\r\n\r\n            // If the button has already been added\r\n            if (themeParsed) {\r\n              // Making sure we don't add duplicate classes, even when buttonTheme has duplicates\r\n              if (\r\n                !this.utilities.countInArray(\r\n                  themeParsed.split(\" \"),\r\n                  themeObj.class\r\n                )\r\n              ) {\r\n                buttonThemesParsed[themeButton] = `${themeParsed} ${\r\n                  themeObj.class\r\n                }`;\r\n              }\r\n            } else {\r\n              buttonThemesParsed[themeButton] = themeObj.class;\r\n            }\r\n          });\r\n        }\r\n      } else {\r\n        console.warn(\r\n          `buttonTheme row is missing the \"buttons\" or the \"class\". Please check the documentation.`\r\n        );\r\n      }\r\n    });\r\n\r\n    return buttonThemesParsed;\r\n  }\r\n\r\n  onTouchDeviceDetected() {\r\n    /**\r\n     * Processing autoTouchEvents\r\n     */\r\n    this.processAutoTouchEvents();\r\n\r\n    /**\r\n     * Disabling contextual window on touch devices\r\n     */\r\n    this.disableContextualWindow();\r\n  }\r\n\r\n  /**\r\n   * Disabling contextual window for hg-button\r\n   */\r\n  /* istanbul ignore next */\r\n  disableContextualWindow() {\r\n    window.oncontextmenu = event => {\r\n      if (event.target.classList.contains(\"hg-button\")) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        return false;\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Process autoTouchEvents option\r\n   */\r\n  processAutoTouchEvents() {\r\n    if (this.options.autoUseTouchEvents) {\r\n      this.options.useTouchEvents = true;\r\n\r\n      if (this.options.debug) {\r\n        console.log(\r\n          `autoUseTouchEvents: Touch device detected, useTouchEvents enabled.`\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once simple-keyboard is rendered for the first time (on initialization).\r\n   */\r\n  onInit() {\r\n    if (this.options.debug) {\r\n      console.log(`${this.keyboardDOMClass} Initialized`);\r\n    }\r\n\r\n    /**\r\n     * setEventListeners\r\n     */\r\n    this.setEventListeners();\r\n\r\n    if (typeof this.options.onInit === \"function\") this.options.onInit();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeFirstRender() {\r\n    /**\r\n     * Performing actions when touch device detected\r\n     */\r\n    if (this.utilities.isTouchDevice()) {\r\n      this.onTouchDeviceDetected();\r\n    }\r\n\r\n    if (typeof this.options.beforeFirstRender === \"function\")\r\n      this.options.beforeFirstRender();\r\n\r\n    /**\r\n     * Notify about PointerEvents usage\r\n     */\r\n    if (\r\n      this.isFirstKeyboardInstance &&\r\n      this.utilities.pointerEventsSupported() &&\r\n      !this.options.useTouchEvents &&\r\n      !this.options.useMouseEvents\r\n    ) {\r\n      if (this.options.debug) {\r\n        console.log(\"Using PointerEvents as it is supported by this browser\");\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Notify about touch events usage\r\n     */\r\n    if (this.options.useTouchEvents) {\r\n      if (this.options.debug) {\r\n        console.log(\r\n          \"useTouchEvents has been enabled. Only touch events will be used.\"\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function before a simple-keyboard render.\r\n   */\r\n  beforeRender() {\r\n    if (typeof this.options.beforeRender === \"function\")\r\n      this.options.beforeRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function every time simple-keyboard is rendered (e.g: when you change layouts).\r\n   */\r\n  onRender() {\r\n    if (typeof this.options.onRender === \"function\") this.options.onRender();\r\n  }\r\n\r\n  /**\r\n   * Executes the callback function once all modules have been loaded\r\n   */\r\n  onModulesLoaded() {\r\n    if (typeof this.options.onModulesLoaded === \"function\")\r\n      this.options.onModulesLoaded();\r\n  }\r\n\r\n  /**\r\n   * Register module\r\n   */\r\n  registerModule = (name, initCallback) => {\r\n    if (!this.modules[name]) this.modules[name] = {};\r\n\r\n    initCallback(this.modules[name]);\r\n  };\r\n\r\n  /**\r\n   * Load modules\r\n   */\r\n  loadModules() {\r\n    if (Array.isArray(this.options.modules)) {\r\n      this.options.modules.forEach(Module => {\r\n        let module = new Module();\r\n\r\n        /* istanbul ignore next */\r\n        if (module.constructor.name && module.constructor.name !== \"Function\") {\r\n          let classStr = `module-${this.utilities.camelCase(\r\n            module.constructor.name\r\n          )}`;\r\n          this.keyboardPluginClasses =\r\n            this.keyboardPluginClasses + ` ${classStr}`;\r\n        }\r\n\r\n        module.init(this);\r\n      });\r\n\r\n      this.keyboardPluginClasses =\r\n        this.keyboardPluginClasses + \" modules-loaded\";\r\n\r\n      this.render();\r\n      this.onModulesLoaded();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get module prop\r\n   */\r\n  getModuleProp(name, prop) {\r\n    if (!this.modules[name]) return false;\r\n\r\n    return this.modules[name][prop];\r\n  }\r\n\r\n  /**\r\n   * getModulesList\r\n   */\r\n  getModulesList() {\r\n    return Object.keys(this.modules);\r\n  }\r\n\r\n  /**\r\n   * Parse Row DOM containers\r\n   */\r\n  parseRowDOMContainers(\r\n    rowDOM,\r\n    rowIndex,\r\n    containerStartIndexes,\r\n    containerEndIndexes\r\n  ) {\r\n    let rowDOMArray = Array.from(rowDOM.children);\r\n    let removedElements = 0;\r\n\r\n    if (rowDOMArray.length) {\r\n      containerStartIndexes.forEach((startIndex, arrIndex) => {\r\n        let endIndex = containerEndIndexes[arrIndex];\r\n\r\n        /**\r\n         * If there exists a respective end index\r\n         * if end index comes after start index\r\n         */\r\n        if (!endIndex || !(endIndex > startIndex)) {\r\n          return false;\r\n        }\r\n\r\n        /**\r\n         * Updated startIndex, endIndex\r\n         * This is since the removal of buttons to place a single button container\r\n         * results in a modified array size\r\n         */\r\n        let updated_startIndex = startIndex - removedElements;\r\n        let updated_endIndex = endIndex - removedElements;\r\n\r\n        /**\r\n         * Create button container\r\n         */\r\n        let containerDOM = document.createElement(\"div\");\r\n        containerDOM.className += \"hg-button-container\";\r\n        let containerUID = `${\r\n          this.options.layoutName\r\n        }-r${rowIndex}c${arrIndex}`;\r\n        containerDOM.setAttribute(\"data-skUID\", containerUID);\r\n\r\n        /**\r\n         * Taking elements due to be inserted into container\r\n         */\r\n        let containedElements = rowDOMArray.splice(\r\n          updated_startIndex,\r\n          updated_endIndex - updated_startIndex + 1\r\n        );\r\n        removedElements = updated_endIndex - updated_startIndex;\r\n\r\n        /**\r\n         * Inserting elements to container\r\n         */\r\n        containedElements.forEach(element => containerDOM.appendChild(element));\r\n\r\n        /**\r\n         * Adding container at correct position within rowDOMArray\r\n         */\r\n        rowDOMArray.splice(updated_startIndex, 0, containerDOM);\r\n\r\n        /**\r\n         * Clearing old rowDOM children structure\r\n         */\r\n        rowDOM.innerHTML = \"\";\r\n\r\n        /**\r\n         * Appending rowDOM new children list\r\n         */\r\n        rowDOMArray.forEach(element => rowDOM.appendChild(element));\r\n\r\n        if (this.options.debug) {\r\n          console.log(\r\n            \"rowDOMContainer\",\r\n            containedElements,\r\n            updated_startIndex,\r\n            updated_endIndex,\r\n            removedElements + 1\r\n          );\r\n        }\r\n      });\r\n    }\r\n\r\n    return rowDOM;\r\n  }\r\n\r\n  /**\r\n   * Renders rows and buttons as per options\r\n   */\r\n  render() {\r\n    /**\r\n     * Clear keyboard\r\n     */\r\n    this.clear();\r\n\r\n    /**\r\n     * Calling beforeFirstRender\r\n     */\r\n    if (!this.initialized) {\r\n      this.beforeFirstRender();\r\n    }\r\n\r\n    /**\r\n     * Calling beforeRender\r\n     */\r\n    this.beforeRender();\r\n\r\n    let layoutClass = `hg-layout-${this.options.layoutName}`;\r\n    let layout = this.options.layout || KeyboardLayout.getDefaultLayout();\r\n    let useTouchEvents = this.options.useTouchEvents || false;\r\n    let useTouchEventsClass = useTouchEvents ? \"hg-touch-events\" : \"\";\r\n    let useMouseEvents = this.options.useMouseEvents || false;\r\n    let disableRowButtonContainers = this.options.disableRowButtonContainers;\r\n\r\n    /**\r\n     * Account for buttonTheme, if set\r\n     */\r\n    let buttonThemesParsed = Array.isArray(this.options.buttonTheme)\r\n      ? this.getButtonTheme()\r\n      : {};\r\n\r\n    /**\r\n     * Adding themeClass, layoutClass to keyboardDOM\r\n     */\r\n    this.keyboardDOM.className += ` ${this.options.theme} ${layoutClass} ${\r\n      this.keyboardPluginClasses\r\n    } ${useTouchEventsClass}`;\r\n\r\n    /**\r\n     * Iterating through each row\r\n     */\r\n    layout[this.options.layoutName].forEach((row, rIndex) => {\r\n      let rowArray = row.split(\" \");\r\n\r\n      /**\r\n       * Creating empty row\r\n       */\r\n      let rowDOM = document.createElement(\"div\");\r\n      rowDOM.className += \"hg-row\";\r\n\r\n      /**\r\n       * Tracking container indicators in rows\r\n       */\r\n      let containerStartIndexes = [];\r\n      let containerEndIndexes = [];\r\n\r\n      /**\r\n       * Iterating through each button in row\r\n       */\r\n      rowArray.forEach((button, bIndex) => {\r\n        /**\r\n         * Check if button has a container indicator\r\n         */\r\n        let buttonHasContainerStart =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"[\") &&\r\n          button.length > 1;\r\n        let buttonHasContainerEnd =\r\n          !disableRowButtonContainers &&\r\n          button.includes(\"]\") &&\r\n          button.length > 1;\r\n\r\n        /**\r\n         * Save container start index, if applicable\r\n         */\r\n        if (buttonHasContainerStart) {\r\n          containerStartIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\[/g, \"\");\r\n        }\r\n\r\n        if (buttonHasContainerEnd) {\r\n          containerEndIndexes.push(bIndex);\r\n\r\n          /**\r\n           * Removing indicator\r\n           */\r\n          button = button.replace(/\\]/g, \"\");\r\n        }\r\n\r\n        /**\r\n         * Processing button options\r\n         */\r\n        let fctBtnClass = this.utilities.getButtonClass(button);\r\n        let buttonThemeClass = buttonThemesParsed[button];\r\n        let buttonDisplayName = this.utilities.getButtonDisplayName(\r\n          button,\r\n          this.options.display,\r\n          this.options.mergeDisplay\r\n        );\r\n\r\n        /**\r\n         * Creating button\r\n         */\r\n        let buttonType = this.options.useButtonTag ? \"button\" : \"div\";\r\n        let buttonDOM = document.createElement(buttonType);\r\n        buttonDOM.className += `hg-button ${fctBtnClass}${\r\n          buttonThemeClass ? \" \" + buttonThemeClass : \"\"\r\n        }`;\r\n\r\n        /**\r\n         * Handle button click event\r\n         */\r\n        /* istanbul ignore next */\r\n        if (\r\n          this.utilities.pointerEventsSupported() &&\r\n          !useTouchEvents &&\r\n          !useMouseEvents\r\n        ) {\r\n          /**\r\n           * Handle PointerEvents\r\n           */\r\n          buttonDOM.onpointerdown = e => {\r\n            this.handleButtonClicked(button);\r\n            this.handleButtonMouseDown(button, e);\r\n          };\r\n          buttonDOM.onpointerup = e => {\r\n            this.handleButtonMouseUp();\r\n          };\r\n          buttonDOM.onpointercancel = e => this.handleButtonMouseUp();\r\n        } else {\r\n          /**\r\n           * Fallback for browsers not supporting PointerEvents\r\n           */\r\n          if (useTouchEvents) {\r\n            /**\r\n             * Handle touch events\r\n             */\r\n            buttonDOM.ontouchstart = e => {\r\n              this.handleButtonClicked(button);\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n            buttonDOM.ontouchend = e => this.handleButtonMouseUp();\r\n            buttonDOM.ontouchcancel = e => this.handleButtonMouseUp();\r\n          } else {\r\n            /**\r\n             * Handle mouse events\r\n             */\r\n            buttonDOM.onclick = () => {\r\n              this.isMouseHold = false;\r\n              this.handleButtonClicked(button);\r\n            };\r\n            buttonDOM.onmousedown = e => {\r\n              this.handleButtonMouseDown(button, e);\r\n            };\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Adding identifier\r\n         */\r\n        buttonDOM.setAttribute(\"data-skBtn\", button);\r\n\r\n        /**\r\n         * Adding unique id\r\n         * Since there's no limit on spawning same buttons, the unique id ensures you can style every button\r\n         */\r\n        let buttonUID = `${this.options.layoutName}-r${rIndex}b${bIndex}`;\r\n        buttonDOM.setAttribute(\"data-skBtnUID\", buttonUID);\r\n\r\n        /**\r\n         * Adding display label\r\n         */\r\n        buttonDOM.setAttribute(\"data-displayLabel\", buttonDisplayName);\r\n\r\n        /**\r\n         * Adding button label to button\r\n         */\r\n        let buttonSpanDOM = document.createElement(\"span\");\r\n        buttonSpanDOM.innerHTML = buttonDisplayName;\r\n        buttonDOM.appendChild(buttonSpanDOM);\r\n\r\n        /**\r\n         * Adding to buttonElements\r\n         */\r\n        if (!this.buttonElements[button]) this.buttonElements[button] = [];\r\n\r\n        this.buttonElements[button].push(buttonDOM);\r\n\r\n        /**\r\n         * Appending button to row\r\n         */\r\n        rowDOM.appendChild(buttonDOM);\r\n      });\r\n\r\n      /**\r\n       * Parse containers in row\r\n       */\r\n      rowDOM = this.parseRowDOMContainers(\r\n        rowDOM,\r\n        rIndex,\r\n        containerStartIndexes,\r\n        containerEndIndexes\r\n      );\r\n\r\n      /**\r\n       * Appending row to keyboard\r\n       */\r\n      this.keyboardDOM.appendChild(rowDOM);\r\n    });\r\n\r\n    /**\r\n     * Calling onRender\r\n     */\r\n    this.onRender();\r\n\r\n    if (!this.initialized) {\r\n      /**\r\n       * Ensures that onInit and beforeFirstRender are only called once per instantiation\r\n       */\r\n      this.initialized = true;\r\n\r\n      /**\r\n       * Handling onpointerup\r\n       */\r\n      /* istanbul ignore next */\r\n      if (\r\n        this.utilities.pointerEventsSupported() &&\r\n        !useTouchEvents &&\r\n        !useMouseEvents\r\n      ) {\r\n        document.onpointerup = () => this.handleButtonMouseUp();\r\n      } else if (useTouchEvents) {\r\n        /**\r\n         * Handling ontouchend, ontouchcancel\r\n         */\r\n        document.ontouchend = e => this.handleButtonMouseUp();\r\n        document.ontouchcancel = e => this.handleButtonMouseUp();\r\n      } else if (!useTouchEvents) {\r\n        /**\r\n         * Handling mouseup\r\n         */\r\n        document.onmouseup = () => this.handleButtonMouseUp();\r\n      }\r\n\r\n      /**\r\n       * Calling onInit\r\n       */\r\n      this.onInit();\r\n    }\r\n  }\r\n}\r\n\r\nexport default SimpleKeyboard;\r\n","import SimpleKeyboard from \"./components/Keyboard\";\r\nexport default SimpleKeyboard;\r\n"],"sourceRoot":""}